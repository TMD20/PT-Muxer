<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.AspNetCore.Components</name>
    </assembly>
    <members>
        <member name="T:Microsoft.AspNetCore.Components.BindAttributes">
            <summary>
            Infrastructure for the discovery of <c>bind</c> attributes for markup elements.
            </summary>
            <remarks>
            To extend the set of <c>bind</c> attributes, define a public class named 
            <c>BindAttributes</c> and annotate it with the appropriate attributes.
            </remarks>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.BindElementAttribute">
            <summary>
            Configures options for binding specific element types.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindElementAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructs an instance of <see cref="T:Microsoft.AspNetCore.Components.BindElementAttribute"/>.
            </summary>
            <param name="element">The tag name of the element.</param>
            <param name="suffix">The suffix value. For example, set this to <code>value</code> for <code>bind-value</code>, or set this to <code>null</code> for <code>bind</code>.</param>
            <param name="valueAttribute">The name of the value attribute to be bound.</param>
            <param name="changeAttribute">The name of an attribute that will register an associated change event.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.BindElementAttribute.Element">
            <summary>
            Gets the tag name of the element.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.BindElementAttribute.Suffix">
            <summary>
            Gets the suffix value.
            For example, this will be <code>value</code> to mean <code>bind-value</code>, or <code>null</code> to mean <code>bind</code>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.BindElementAttribute.ValueAttribute">
            <summary>
            Gets the name of the value attribute to be bound.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.BindElementAttribute.ChangeAttribute">
            <summary>
            Gets the name of an attribute that will register an associated change event.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.BindInputElementAttribute">
            <summary>
            Configures options for binding subtypes of an HTML <code>input</code> element.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindInputElementAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructs an instance of <see cref="T:Microsoft.AspNetCore.Components.BindInputElementAttribute"/>.
            </summary>
            <param name="type">The value of the element's <code>type</code> attribute.</param>
            <param name="suffix">The suffix value.</param>
            <param name="valueAttribute">The name of the value attribute to be bound.</param>
            <param name="changeAttribute">The name of an attribute that will register an associated change event.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.BindInputElementAttribute.Type">
            <summary>
            Gets the value of the element's <code>type</code> attribute.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.BindInputElementAttribute.Suffix">
            <summary>
            Gets the suffix value.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.BindInputElementAttribute.ValueAttribute">
            <summary>
            Gets the name of the value attribute to be bound.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.BindInputElementAttribute.ChangeAttribute">
            <summary>
            Gets the name of an attribute that will register an associated change event.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.BindMethods">
            <summary>
            Methods used internally by @bind syntax. Not intended to be used directly.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindMethods.GetValue``1(``0)">
            <summary>
            Not intended to be used directly.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindMethods.GetValue(System.DateTime,System.String)">
            <summary>
            Not intended to be used directly.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindMethods.GetEventHandlerValue``1(System.String)">
            <summary>
            Not intended to be used directly.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindMethods.GetEventHandlerValue``1(System.Action)">
            <summary>
            Not intended to be used directly.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindMethods.GetEventHandlerValue``1(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Not intended to be used directly.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindMethods.GetEventHandlerValue``1(System.Action{``0})">
            <summary>
            Not intended to be used directly.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindMethods.GetEventHandlerValue``1(System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Not intended to be used directly.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindMethods.GetEventHandlerValue``1(Microsoft.AspNetCore.Components.EventCallback)">
            <summary>
            Not intended to be used directly.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindMethods.GetEventHandlerValue``1(Microsoft.AspNetCore.Components.EventCallback{``0})">
            <summary>
            Not intended to be used directly.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindMethods.SetValueHandler(System.Action{System.String},System.String)">
            <summary>
            Not intended to be used directly.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindMethods.SetValueHandler(System.Action{System.Boolean},System.Boolean)">
            <summary>
            Not intended to be used directly.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindMethods.SetValueHandler(System.Action{System.Nullable{System.Boolean}},System.Nullable{System.Boolean})">
            <summary>
            Not intended to be used directly.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindMethods.SetValueHandler(System.Action{System.Int32},System.Int32)">
            <summary>
            Not intended to be used directly.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindMethods.SetValueHandler(System.Action{System.Nullable{System.Int32}},System.Nullable{System.Int32})">
            <summary>
            Not intended to be used directly.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindMethods.SetValueHandler(System.Action{System.Int64},System.Int64)">
            <summary>
            Not intended to be used directly.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindMethods.SetValueHandler(System.Action{System.Nullable{System.Int64}},System.Nullable{System.Int64})">
            <summary>
            Not intended to be used directly.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindMethods.SetValueHandler(System.Action{System.Single},System.Single)">
            <summary>
            Not intended to be used directly.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindMethods.SetValueHandler(System.Action{System.Nullable{System.Single}},System.Nullable{System.Single})">
            <summary>
            Not intended to be used directly.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindMethods.SetValueHandler(System.Action{System.Double},System.Double)">
            <summary>
            Not intended to be used directly.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindMethods.SetValueHandler(System.Action{System.Nullable{System.Double}},System.Nullable{System.Double})">
            <summary>
            Not intended to be used directly.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindMethods.SetValueHandler(System.Action{System.Decimal},System.Decimal)">
            <summary>
            Not intended to be used directly.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindMethods.SetValueHandler(System.Action{System.Nullable{System.Decimal}},System.Nullable{System.Decimal})">
            <summary>
            Not intended to be used directly.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindMethods.SetValueHandler(System.Action{System.DateTime},System.DateTime)">
            <summary>
            Not intended to be used directly.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindMethods.SetValueHandler(System.Action{System.DateTime},System.DateTime,System.String)">
            <summary>
            Not intended to be used directly.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindMethods.SetValueHandler``1(System.Action{``0},``0)">
            <summary>
            Not intended to be used directly.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.CascadingParameterAttribute">
            <summary>
            Denotes the target member as a cascading component parameter. Its value will be
            supplied by the closest ancestor <see cref="T:Microsoft.AspNetCore.Components.CascadingValue`1"/> component that
            supplies values with a compatible type and name.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.CascadingParameterAttribute.Name">
             <summary>
             If specified, the parameter value will be supplied by the closest
             ancestor <see cref="T:Microsoft.AspNetCore.Components.CascadingValue`1"/> that supplies a value with
             this name.
            
             If null, the parameter value will be supplied by the closest ancestor
             <see cref="T:Microsoft.AspNetCore.Components.CascadingValue`1"/>  that supplies a value with a compatible
             type.
             </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.CascadingValue`1">
            <summary>
            A component that provides a cascading value to all descendant components.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.CascadingValue`1.ChildContent">
            <summary>
            The content to which the value should be provided.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.CascadingValue`1.Value">
            <summary>
            The value to be provided.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.CascadingValue`1.Name">
             <summary>
             Optionally gives a name to the provided value. Descendant components
             will be able to receive the value by specifying this name.
            
             If no name is specified, then descendant components will receive the
             value based the type of value they are requesting.
             </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.CascadingValue`1.IsFixed">
            <summary>
            If true, indicates that <see cref="P:Microsoft.AspNetCore.Components.CascadingValue`1.Value"/> will not change. This is a
            performance optimization that allows the framework to skip setting up
            change notifications. Set this flag only if you will not change
            <see cref="P:Microsoft.AspNetCore.Components.CascadingValue`1.Value"/> during the component's lifetime.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.CascadingValue`1.Configure(Microsoft.AspNetCore.Components.RenderHandle)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Components.CascadingValue`1.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterCollection)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNetCore.Components.ComponentBase">
            <summary>
            Optional base class for components. Alternatively, components may
            implement <see cref="T:Microsoft.AspNetCore.Components.IComponent"/> directly.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.ComponentBase.BuildRenderTreeMethodName">
            <summary>
            Specifies the name of the <see cref="N:Microsoft.AspNetCore.Components.RenderTree"/>-building method.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.ComponentBase.#ctor">
            <summary>
            Constructs an instance of <see cref="T:Microsoft.AspNetCore.Components.ComponentBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.ComponentBase.BuildRenderTree(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder)">
            <summary>
            Renders the component to the supplied <see cref="T:Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder"/>.
            </summary>
            <param name="builder">A <see cref="T:Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder"/> that will receive the render output.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.ComponentBase.OnInit">
            <summary>
            Method invoked when the component is ready to start, having received its
            initial parameters from its parent in the render tree.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.ComponentBase.OnInitAsync">
             <summary>
             Method invoked when the component is ready to start, having received its
             initial parameters from its parent in the render tree.
            
             Override this method if you will perform an asynchronous operation and
             want the component to refresh when that operation is completed.
             </summary>
             <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing any asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet">
            <summary>
            Method invoked when the component has received parameters from its parent in
            the render tree, and the incoming values have been assigned to properties.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent in
            the render tree, and the incoming values have been assigned to properties.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing any asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged">
            <summary>
            Notifies the component that its state has changed. When applicable, this will
            cause the component to be re-rendered.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.ComponentBase.ShouldRender">
            <summary>
            Returns a flag to indicate whether the component should render.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync">
            <summary>
            Method invoked after each time the component has been rendered. Note that the component does
            not automatically re-render after the completion of any returned <see cref="T:System.Threading.Tasks.Task"/>, because
            that would cause an infinite render loop.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing any asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.ComponentBase.Invoke(System.Action)">
            <summary>
            Executes the supplied work item on the associated renderer's
            synchronization context.
            </summary>
            <param name="workItem">The work item to execute.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Executes the supplied work item on the associated renderer's
            synchronization context.
            </summary>
            <param name="workItem">The work item to execute.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterCollection)">
            <summary>
            Method invoked to apply initial or updated parameters to the component.
            </summary>
            <param name="parameters">The parameters to apply.</param>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.ComponentResolver">
            <summary>
            Resolves components for an application.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.ComponentResolver.ResolveComponents(System.Reflection.Assembly)">
            <summary>
            Lists all the types
            </summary>
            <param name="appAssembly"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.ElementRef">
            <summary>
            Represents a reference to a rendered element.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.EventCallback">
            <summary>
            A bound event handler delegate.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.EventCallback.Factory">
            <summary>
            Gets a reference to the <see cref="T:Microsoft.AspNetCore.Components.EventCallbackFactory"/>.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.EventCallback.Empty">
            <summary>
            Gets an empty <see cref="T:Microsoft.AspNetCore.Components.EventCallback`1"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallback.#ctor(Microsoft.AspNetCore.Components.IHandleEvent,System.MulticastDelegate)">
            <summary>
            Creates the new <see cref="T:Microsoft.AspNetCore.Components.EventCallback`1"/>.
            </summary>
            <param name="receiver">The event receiver.</param>
            <param name="delegate">The delegate to bind.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.EventCallback.HasDelegate">
            <summary>
            Gets a value that indicates whether the delegate associated with this event dispatcher is non-null.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallback.InvokeAsync(System.Object)">
            <summary>
            Invokes the delegate associated with this binding and dispatches an event notification to the
            appropriate component.
            </summary>
            <param name="arg">The argument.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which completes asynchronously once event processing has completed.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.EventCallback`1">
            <summary>
            A bound event handler delegate.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallback`1.#ctor(Microsoft.AspNetCore.Components.IHandleEvent,System.MulticastDelegate)">
            <summary>
            Creates the new <see cref="T:Microsoft.AspNetCore.Components.EventCallback`1"/>.
            </summary>
            <param name="receiver">The event receiver.</param>
            <param name="delegate">The delegate to bind.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.EventCallback`1.HasDelegate">
            <summary>
            Gets a value that indicates whether the delegate associated with this event dispatcher is non-null.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallback`1.InvokeAsync(`0)">
            <summary>
            Invokes the delegate associated with this binding and dispatches an event notification to the
            appropriate component.
            </summary>
            <param name="arg">The argument.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which completes asynchronously once event processing has completed.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.EventCallbackFactory">
            <summary>
            A factory for creating <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/> and <see cref="T:Microsoft.AspNetCore.Components.EventCallback`1"/>
            instances.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactory.Create(System.Object,Microsoft.AspNetCore.Components.EventCallback)">
            <summary>
            Returns the provided <paramref name="callback"/>. For internal framework use only.
            </summary>
            <param name="receiver"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactory.Create(System.Object,System.Action)">
            <summary>
            Creates an <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/> for the provided <paramref name="receiver"/> and
            <paramref name="callback"/>.
            </summary>
            <param name="receiver">The event receiver.</param>
            <param name="callback">The event callback.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactory.Create(System.Object,System.Action{System.Object})">
            <summary>
            Creates an <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/> for the provided <paramref name="receiver"/> and
            <paramref name="callback"/>.
            </summary>
            <param name="receiver">The event receiver.</param>
            <param name="callback">The event callback.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactory.Create(System.Object,System.Func{System.Threading.Tasks.Task})">
            <summary>
            Creates an <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/> for the provided <paramref name="receiver"/> and
            <paramref name="callback"/>.
            </summary>
            <param name="receiver">The event receiver.</param>
            <param name="callback">The event callback.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactory.Create(System.Object,System.Func{System.Object,System.Threading.Tasks.Task})">
            <summary>
            Creates an <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/> for the provided <paramref name="receiver"/> and
            <paramref name="callback"/>.
            </summary>
            <param name="receiver">The event receiver.</param>
            <param name="callback">The event callback.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactory.Create``1(System.Object,System.String)">
            <summary>
            Returns the provided <paramref name="callback"/>. For internal framework use only.
            </summary>
            <param name="receiver"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactory.Create``1(System.Object,Microsoft.AspNetCore.Components.EventCallback)">
            <summary>
            Returns the provided <paramref name="callback"/>. For internal framework use only.
            </summary>
            <param name="receiver"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactory.Create``1(System.Object,Microsoft.AspNetCore.Components.EventCallback{``0})">
            <summary>
            Returns the provided <paramref name="callback"/>. For internal framework use only.
            </summary>
            <param name="receiver"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactory.Create``1(System.Object,System.Action)">
            <summary>
            Creates an <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/> for the provided <paramref name="receiver"/> and
            <paramref name="callback"/>.
            </summary>
            <param name="receiver">The event receiver.</param>
            <param name="callback">The event callback.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactory.Create``1(System.Object,System.Action{``0})">
            <summary>
            Creates an <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/> for the provided <paramref name="receiver"/> and
            <paramref name="callback"/>.
            </summary>
            <param name="receiver">The event receiver.</param>
            <param name="callback">The event callback.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactory.Create``1(System.Object,System.Func{System.Threading.Tasks.Task})">
            <summary>
            Creates an <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/> for the provided <paramref name="receiver"/> and
            <paramref name="callback"/>.
            </summary>
            <param name="receiver">The event receiver.</param>
            <param name="callback">The event callback.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactory.Create``1(System.Object,System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Creates an <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/> for the provided <paramref name="receiver"/> and
            <paramref name="callback"/>.
            </summary>
            <param name="receiver">The event receiver.</param>
            <param name="callback">The event callback.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactory.CreateInferred``1(System.Object,System.Action{``0},``0)">
            <summary>
            Creates an <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/> for the provided <paramref name="receiver"/> and
            <paramref name="callback"/>. For internal framework use only.
            </summary>
            <param name="receiver"></param>
            <param name="callback"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactory.CreateInferred``1(System.Object,System.Func{``0,System.Threading.Tasks.Task},``0)">
            <summary>
            Creates an <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/> for the provided <paramref name="receiver"/> and
            <paramref name="callback"/>. For internal framework use only.
            </summary>
            <param name="receiver"></param>
            <param name="callback"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions">
            <summary>
            Contains extension methods for two-way binding using <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/>. For internal use only.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.String},System.String)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.Boolean},System.Boolean)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.Nullable{System.Boolean}},System.Nullable{System.Boolean})">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.Int32},System.Int32)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.Nullable{System.Int32}},System.Nullable{System.Int32})">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.Int64},System.Int64)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.Nullable{System.Int64}},System.Nullable{System.Int64})">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.Single},System.Single)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.Nullable{System.Single}},System.Nullable{System.Single})">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.Double},System.Double)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.Nullable{System.Double}},System.Nullable{System.Double})">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.Decimal},System.Decimal)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.Nullable{System.Decimal}},System.Nullable{System.Decimal})">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.DateTime},System.DateTime)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.DateTime},System.DateTime,System.String)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder``1(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{``0},``0)">
            <summary>
            For internal use only.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.EventCallbackFactoryUIEventArgsExtensions">
            <summary>
            Provides extension methods for <see cref="T:Microsoft.AspNetCore.Components.EventCallbackFactory"/> and <see cref="T:Microsoft.AspNetCore.Components.UIEventArgs"/> types. For internal
            framework use.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryUIEventArgsExtensions.Create(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{Microsoft.AspNetCore.Components.UIEventArgs})">
            <summary>
            Creates an <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/> for the provided <paramref name="receiver"/> and
            <paramref name="callback"/>.
            </summary>
            <param name="factory">The <see cref="T:Microsoft.AspNetCore.Components.EventCallbackFactory"/>.</param>
            <param name="receiver">The event receiver.</param>
            <param name="callback">The event callback.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryUIEventArgsExtensions.Create(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Func{Microsoft.AspNetCore.Components.UIEventArgs,System.Threading.Tasks.Task})">
            <summary>
            Creates an <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/> for the provided <paramref name="receiver"/> and
            <paramref name="callback"/>.
            </summary>
            <param name="factory">The <see cref="T:Microsoft.AspNetCore.Components.EventCallbackFactory"/>.</param>
            <param name="receiver">The event receiver.</param>
            <param name="callback">The event callback.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryUIEventArgsExtensions.Create(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{Microsoft.AspNetCore.Components.UIChangeEventArgs})">
            <summary>
            Creates an <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/> for the provided <paramref name="receiver"/> and
            <paramref name="callback"/>.
            </summary>
            <param name="factory">The <see cref="T:Microsoft.AspNetCore.Components.EventCallbackFactory"/>.</param>
            <param name="receiver">The event receiver.</param>
            <param name="callback">The event callback.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryUIEventArgsExtensions.Create(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Func{Microsoft.AspNetCore.Components.UIChangeEventArgs,System.Threading.Tasks.Task})">
            <summary>
            Creates an <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/> for the provided <paramref name="receiver"/> and
            <paramref name="callback"/>.
            </summary>
            <param name="factory">The <see cref="T:Microsoft.AspNetCore.Components.EventCallbackFactory"/>.</param>
            <param name="receiver">The event receiver.</param>
            <param name="callback">The event callback.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryUIEventArgsExtensions.Create(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{Microsoft.AspNetCore.Components.UIClipboardEventArgs})">
            <summary>
            Creates an <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/> for the provided <paramref name="receiver"/> and
            <paramref name="callback"/>.
            </summary>
            <param name="factory">The <see cref="T:Microsoft.AspNetCore.Components.EventCallbackFactory"/>.</param>
            <param name="receiver">The event receiver.</param>
            <param name="callback">The event callback.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryUIEventArgsExtensions.Create(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Func{Microsoft.AspNetCore.Components.UIClipboardEventArgs,System.Threading.Tasks.Task})">
            <summary>
            Creates an <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/> for the provided <paramref name="receiver"/> and
            <paramref name="callback"/>.
            </summary>
            <param name="factory">The <see cref="T:Microsoft.AspNetCore.Components.EventCallbackFactory"/>.</param>
            <param name="receiver">The event receiver.</param>
            <param name="callback">The event callback.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryUIEventArgsExtensions.Create(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{Microsoft.AspNetCore.Components.UIDragEventArgs})">
            <summary>
            Creates an <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/> for the provided <paramref name="receiver"/> and
            <paramref name="callback"/>.
            </summary>
            <param name="factory">The <see cref="T:Microsoft.AspNetCore.Components.EventCallbackFactory"/>.</param>
            <param name="receiver">The event receiver.</param>
            <param name="callback">The event callback.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryUIEventArgsExtensions.Create(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Func{Microsoft.AspNetCore.Components.UIDragEventArgs,System.Threading.Tasks.Task})">
            <summary>
            Creates an <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/> for the provided <paramref name="receiver"/> and
            <paramref name="callback"/>.
            </summary>
            <param name="factory">The <see cref="T:Microsoft.AspNetCore.Components.EventCallbackFactory"/>.</param>
            <param name="receiver">The event receiver.</param>
            <param name="callback">The event callback.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryUIEventArgsExtensions.Create(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{Microsoft.AspNetCore.Components.UIErrorEventArgs})">
            <summary>
            Creates an <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/> for the provided <paramref name="receiver"/> and
            <paramref name="callback"/>.
            </summary>
            <param name="factory">The <see cref="T:Microsoft.AspNetCore.Components.EventCallbackFactory"/>.</param>
            <param name="receiver">The event receiver.</param>
            <param name="callback">The event callback.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryUIEventArgsExtensions.Create(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Func{Microsoft.AspNetCore.Components.UIErrorEventArgs,System.Threading.Tasks.Task})">
            <summary>
            Creates an <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/> for the provided <paramref name="receiver"/> and
            <paramref name="callback"/>.
            </summary>
            <param name="factory">The <see cref="T:Microsoft.AspNetCore.Components.EventCallbackFactory"/>.</param>
            <param name="receiver">The event receiver.</param>
            <param name="callback">The event callback.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryUIEventArgsExtensions.Create(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{Microsoft.AspNetCore.Components.UIFocusEventArgs})">
            <summary>
            Creates an <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/> for the provided <paramref name="receiver"/> and
            <paramref name="callback"/>.
            </summary>
            <param name="factory">The <see cref="T:Microsoft.AspNetCore.Components.EventCallbackFactory"/>.</param>
            <param name="receiver">The event receiver.</param>
            <param name="callback">The event callback.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryUIEventArgsExtensions.Create(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Func{Microsoft.AspNetCore.Components.UIFocusEventArgs,System.Threading.Tasks.Task})">
            <summary>
            Creates an <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/> for the provided <paramref name="receiver"/> and
            <paramref name="callback"/>.
            </summary>
            <param name="factory">The <see cref="T:Microsoft.AspNetCore.Components.EventCallbackFactory"/>.</param>
            <param name="receiver">The event receiver.</param>
            <param name="callback">The event callback.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryUIEventArgsExtensions.Create(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{Microsoft.AspNetCore.Components.UIKeyboardEventArgs})">
            <summary>
            Creates an <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/> for the provided <paramref name="receiver"/> and
            <paramref name="callback"/>.
            </summary>
            <param name="factory">The <see cref="T:Microsoft.AspNetCore.Components.EventCallbackFactory"/>.</param>
            <param name="receiver">The event receiver.</param>
            <param name="callback">The event callback.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryUIEventArgsExtensions.Create(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Func{Microsoft.AspNetCore.Components.UIKeyboardEventArgs,System.Threading.Tasks.Task})">
            <summary>
            Creates an <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/> for the provided <paramref name="receiver"/> and
            <paramref name="callback"/>.
            </summary>
            <param name="factory">The <see cref="T:Microsoft.AspNetCore.Components.EventCallbackFactory"/>.</param>
            <param name="receiver">The event receiver.</param>
            <param name="callback">The event callback.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryUIEventArgsExtensions.Create(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{Microsoft.AspNetCore.Components.UIMouseEventArgs})">
            <summary>
            Creates an <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/> for the provided <paramref name="receiver"/> and
            <paramref name="callback"/>.
            </summary>
            <param name="factory">The <see cref="T:Microsoft.AspNetCore.Components.EventCallbackFactory"/>.</param>
            <param name="receiver">The event receiver.</param>
            <param name="callback">The event callback.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryUIEventArgsExtensions.Create(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Func{Microsoft.AspNetCore.Components.UIMouseEventArgs,System.Threading.Tasks.Task})">
            <summary>
            Creates an <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/> for the provided <paramref name="receiver"/> and
            <paramref name="callback"/>.
            </summary>
            <param name="factory">The <see cref="T:Microsoft.AspNetCore.Components.EventCallbackFactory"/>.</param>
            <param name="receiver">The event receiver.</param>
            <param name="callback">The event callback.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryUIEventArgsExtensions.Create(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{Microsoft.AspNetCore.Components.UIPointerEventArgs})">
            <summary>
            Creates an <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/> for the provided <paramref name="receiver"/> and
            <paramref name="callback"/>.
            </summary>
            <param name="factory">The <see cref="T:Microsoft.AspNetCore.Components.EventCallbackFactory"/>.</param>
            <param name="receiver">The event receiver.</param>
            <param name="callback">The event callback.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryUIEventArgsExtensions.Create(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Func{Microsoft.AspNetCore.Components.UIPointerEventArgs,System.Threading.Tasks.Task})">
            <summary>
            Creates an <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/> for the provided <paramref name="receiver"/> and
            <paramref name="callback"/>.
            </summary>
            <param name="factory">The <see cref="T:Microsoft.AspNetCore.Components.EventCallbackFactory"/>.</param>
            <param name="receiver">The event receiver.</param>
            <param name="callback">The event callback.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryUIEventArgsExtensions.Create(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{Microsoft.AspNetCore.Components.UIProgressEventArgs})">
            <summary>
            Creates an <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/> for the provided <paramref name="receiver"/> and
            <paramref name="callback"/>.
            </summary>
            <param name="factory">The <see cref="T:Microsoft.AspNetCore.Components.EventCallbackFactory"/>.</param>
            <param name="receiver">The event receiver.</param>
            <param name="callback">The event callback.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryUIEventArgsExtensions.Create(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Func{Microsoft.AspNetCore.Components.UIProgressEventArgs,System.Threading.Tasks.Task})">
            <summary>
            Creates an <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/> for the provided <paramref name="receiver"/> and
            <paramref name="callback"/>.
            </summary>
            <param name="factory">The <see cref="T:Microsoft.AspNetCore.Components.EventCallbackFactory"/>.</param>
            <param name="receiver">The event receiver.</param>
            <param name="callback">The event callback.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryUIEventArgsExtensions.Create(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{Microsoft.AspNetCore.Components.UITouchEventArgs})">
            <summary>
            Creates an <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/> for the provided <paramref name="receiver"/> and
            <paramref name="callback"/>.
            </summary>
            <param name="factory">The <see cref="T:Microsoft.AspNetCore.Components.EventCallbackFactory"/>.</param>
            <param name="receiver">The event receiver.</param>
            <param name="callback">The event callback.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryUIEventArgsExtensions.Create(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Func{Microsoft.AspNetCore.Components.UITouchEventArgs,System.Threading.Tasks.Task})">
            <summary>
            Creates an <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/> for the provided <paramref name="receiver"/> and
            <paramref name="callback"/>.
            </summary>
            <param name="factory">The <see cref="T:Microsoft.AspNetCore.Components.EventCallbackFactory"/>.</param>
            <param name="receiver">The event receiver.</param>
            <param name="callback">The event callback.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryUIEventArgsExtensions.Create(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{Microsoft.AspNetCore.Components.UIWheelEventArgs})">
            <summary>
            Creates an <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/> for the provided <paramref name="receiver"/> and
            <paramref name="callback"/>.
            </summary>
            <param name="factory">The <see cref="T:Microsoft.AspNetCore.Components.EventCallbackFactory"/>.</param>
            <param name="receiver">The event receiver.</param>
            <param name="callback">The event callback.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryUIEventArgsExtensions.Create(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Func{Microsoft.AspNetCore.Components.UIWheelEventArgs,System.Threading.Tasks.Task})">
            <summary>
            Creates an <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/> for the provided <paramref name="receiver"/> and
            <paramref name="callback"/>.
            </summary>
            <param name="factory">The <see cref="T:Microsoft.AspNetCore.Components.EventCallbackFactory"/>.</param>
            <param name="receiver">The event receiver.</param>
            <param name="callback">The event callback.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/>.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.EventCallbackWorkItem">
            <summary>
            Wraps a callback delegate associated with an event.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.EventCallbackWorkItem.Empty">
            <summary>
            An empty <see cref="T:Microsoft.AspNetCore.Components.EventCallbackWorkItem"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackWorkItem.#ctor(System.MulticastDelegate)">
            <summary>
            Creates a new <see cref="T:Microsoft.AspNetCore.Components.EventCallbackWorkItem"/> with the provided <paramref name="delegate"/>.
            </summary>
            <param name="delegate">The callback delegate.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackWorkItem.InvokeAsync(System.Object)">
            <summary>
            Invokes the delegate associated with this <see cref="T:Microsoft.AspNetCore.Components.EventCallbackWorkItem"/>.
            </summary>
            <param name="arg">The argument to provide to the delegate. May be <c>null</c>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> then will complete asynchronously once the delegate has completed.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.EventHandlerAttribute">
            <summary>
            Associates an event argument type with an event attribute name.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventHandlerAttribute.#ctor(System.String,System.Type)">
            <summary>
            Constructs an instance of <see cref="T:Microsoft.AspNetCore.Components.EventHandlerAttribute"/>.
            </summary>
            <param name="attributeName"></param>
            <param name="eventArgsType"></param>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.EventHandlerAttribute.AttributeName">
            <summary>
            Gets the attribute name.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.EventHandlerAttribute.EventArgsType">
            <summary>
            Gets the event argument type.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.EventHandlers">
            <summary>
            Holds <see cref="T:System.EventHandler"/> attributes to configure the mappings between event names and
            event argument types.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator">
            <summary>
            Adds Data Annotations validation support to an <see cref="T:Microsoft.AspNetCore.Components.Forms.EditContext"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator.OnInit">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNetCore.Components.Forms.EditContext">
            <summary>
            Holds metadata related to a data editing process, such as flags to indicate which
            fields have been modified and the current set of validation messages.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Forms.EditContext.#ctor(System.Object)">
            <summary>
            Constructs an instance of <see cref="T:Microsoft.AspNetCore.Components.Forms.EditContext"/>.
            </summary>
            <param name="model">The model object for the <see cref="T:Microsoft.AspNetCore.Components.Forms.EditContext"/>. This object should hold the data being edited, for example as a set of properties.</param>
        </member>
        <member name="E:Microsoft.AspNetCore.Components.Forms.EditContext.OnFieldChanged">
            <summary>
            An event that is raised when a field value changes.
            </summary>
        </member>
        <member name="E:Microsoft.AspNetCore.Components.Forms.EditContext.OnValidationRequested">
            <summary>
            An event that is raised when validation is requested.
            </summary>
        </member>
        <member name="E:Microsoft.AspNetCore.Components.Forms.EditContext.OnValidationStateChanged">
            <summary>
            An event that is raised when validation state has changed.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Forms.EditContext.Field(System.String)">
            <summary>
            Supplies a <see cref="T:Microsoft.AspNetCore.Components.Forms.FieldIdentifier"/> corresponding to a specified field name
            on this <see cref="T:Microsoft.AspNetCore.Components.Forms.EditContext"/>'s <see cref="P:Microsoft.AspNetCore.Components.Forms.EditContext.Model"/>.
            </summary>
            <param name="fieldName">The name of the editable field.</param>
            <returns>A <see cref="T:Microsoft.AspNetCore.Components.Forms.FieldIdentifier"/> corresponding to a specified field name on this <see cref="T:Microsoft.AspNetCore.Components.Forms.EditContext"/>'s <see cref="P:Microsoft.AspNetCore.Components.Forms.EditContext.Model"/>.</returns>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Forms.EditContext.Model">
            <summary>
            Gets the model object for this <see cref="T:Microsoft.AspNetCore.Components.Forms.EditContext"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Forms.EditContext.NotifyFieldChanged(Microsoft.AspNetCore.Components.Forms.FieldIdentifier@)">
            <summary>
            Signals that the value for the specified field has changed.
            </summary>
            <param name="fieldIdentifier">Identifies the field whose value has been changed.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Forms.EditContext.NotifyValidationStateChanged">
            <summary>
            Signals that some aspect of validation state has changed.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Forms.EditContext.MarkAsUnmodified(Microsoft.AspNetCore.Components.Forms.FieldIdentifier@)">
            <summary>
            Clears any modification flag that may be tracked for the specified field.
            </summary>
            <param name="fieldIdentifier">Identifies the field whose modification flag (if any) should be cleared.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Forms.EditContext.MarkAsUnmodified">
            <summary>
            Clears all modification flags within this <see cref="T:Microsoft.AspNetCore.Components.Forms.EditContext"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Forms.EditContext.IsModified">
            <summary>
            Determines whether any of the fields in this <see cref="T:Microsoft.AspNetCore.Components.Forms.EditContext"/> have been modified.
            </summary>
            <returns>True if any of the fields in this <see cref="T:Microsoft.AspNetCore.Components.Forms.EditContext"/> have been modified; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Forms.EditContext.GetValidationMessages">
             <summary>
             Gets the current validation messages across all fields.
            
             This method does not perform validation itself. It only returns messages determined by previous validation actions.
             </summary>
             <returns>The current validation messages.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Forms.EditContext.GetValidationMessages(Microsoft.AspNetCore.Components.Forms.FieldIdentifier)">
             <summary>
             Gets the current validation messages for the specified field.
            
             This method does not perform validation itself. It only returns messages determined by previous validation actions.
             </summary>
             <param name="fieldIdentifier">Identifies the field whose current validation messages should be returned.</param>
             <returns>The current validation messages for the specified field.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Forms.EditContext.IsModified(Microsoft.AspNetCore.Components.Forms.FieldIdentifier@)">
            <summary>
            Determines whether the specified fields in this <see cref="T:Microsoft.AspNetCore.Components.Forms.EditContext"/> has been modified.
            </summary>
            <returns>True if the field has been modified; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Forms.EditContext.Validate">
            <summary>
            Validates this <see cref="T:Microsoft.AspNetCore.Components.Forms.EditContext"/>.
            </summary>
            <returns>True if there are no validation messages after validation; otherwise false.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.Forms.EditContextDataAnnotationsExtensions">
            <summary>
            Extension methods to add DataAnnotations validation to an <see cref="T:Microsoft.AspNetCore.Components.Forms.EditContext"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Forms.EditContextDataAnnotationsExtensions.AddDataAnnotationsValidation(Microsoft.AspNetCore.Components.Forms.EditContext)">
            <summary>
            Adds DataAnnotations validation support to the <see cref="T:Microsoft.AspNetCore.Components.Forms.EditContext"/>.
            </summary>
            <param name="editContext">The <see cref="T:Microsoft.AspNetCore.Components.Forms.EditContext"/>.</param>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.Forms.EditContextExpressionExtensions">
            <summary>
            Provides extension methods to simplify using <see cref="T:Microsoft.AspNetCore.Components.Forms.EditContext"/> with expressions.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Forms.EditContextExpressionExtensions.GetValidationMessages(Microsoft.AspNetCore.Components.Forms.EditContext,System.Linq.Expressions.Expression{System.Func{System.Object}})">
             <summary>
             Gets the current validation messages for the specified field.
            
             This method does not perform validation itself. It only returns messages determined by previous validation actions.
             </summary>
             <param name="editContext">The <see cref="T:Microsoft.AspNetCore.Components.Forms.EditContext"/>.</param>
             <param name="accessor">Identifies the field whose current validation messages should be returned.</param>
             <returns>The current validation messages for the specified field.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Forms.EditContextExpressionExtensions.IsModified(Microsoft.AspNetCore.Components.Forms.EditContext,System.Linq.Expressions.Expression{System.Func{System.Object}})">
            <summary>
            Determines whether the specified fields in this <see cref="T:Microsoft.AspNetCore.Components.Forms.EditContext"/> has been modified.
            </summary>
            <param name="editContext">The <see cref="T:Microsoft.AspNetCore.Components.Forms.EditContext"/>.</param>
            <param name="accessor">Identifies the field whose current validation messages should be returned.</param>
            <returns>True if the field has been modified; otherwise false.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.Forms.EditContextFieldClassExtensions">
            <summary>
            Provides extension methods to describe the state of <see cref="T:Microsoft.AspNetCore.Components.Forms.EditContext"/>
            fields as CSS class names.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Forms.EditContextFieldClassExtensions.FieldClass``1(Microsoft.AspNetCore.Components.Forms.EditContext,System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Gets a string that indicates the status of the specified field. This will include
            some combination of "modified", "valid", or "invalid", depending on the status of the field.
            </summary>
            <param name="editContext">The <see cref="T:Microsoft.AspNetCore.Components.Forms.EditContext"/>.</param>
            <param name="accessor">An identifier for the field.</param>
            <returns>A string that indicates the status of the field.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Forms.EditContextFieldClassExtensions.FieldClass(Microsoft.AspNetCore.Components.Forms.EditContext,Microsoft.AspNetCore.Components.Forms.FieldIdentifier@)">
            <summary>
            Gets a string that indicates the status of the specified field. This will include
            some combination of "modified", "valid", or "invalid", depending on the status of the field.
            </summary>
            <param name="editContext">The <see cref="T:Microsoft.AspNetCore.Components.Forms.EditContext"/>.</param>
            <param name="fieldIdentifier">An identifier for the field.</param>
            <returns>A string that indicates the status of the field.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.Forms.EditForm">
            <summary>
            Renders a form element that cascades an <see cref="P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext"/> to descendants.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Forms.EditForm.#ctor">
            <summary>
            Constructs an instance of <see cref="T:Microsoft.AspNetCore.Components.Forms.EditForm"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext">
            <summary>
            Supplies the edit context explicitly. If using this parameter, do not
            also supply <see cref="P:Microsoft.AspNetCore.Components.Forms.EditForm.Model"/>, since the model value will be taken
            from the <see cref="P:Microsoft.AspNetCore.Components.Forms.EditContext.Model"/> property.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Forms.EditForm.Model">
            <summary>
            Specifies the top-level model object for the form. An edit context will
            be constructed for this model. If using this parameter, do not also supply
            a value for <see cref="P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Forms.EditForm.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Microsoft.AspNetCore.Components.Forms.EditForm"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Forms.EditForm.OnSubmit">
             <summary>
             A callback that will be invoked when the form is submitted.
            
             If using this parameter, you are responsible for triggering any validation
             manually, e.g., by calling <see cref="M:Microsoft.AspNetCore.Components.Forms.EditContext.Validate"/>.
             </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Forms.EditForm.OnValidSubmit">
            <summary>
            A callback that will be invoked when the form is submitted and the
            <see cref="P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext"/> is determined to be valid.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Forms.EditForm.OnInvalidSubmit">
            <summary>
            A callback that will be invoked when the form is submitted and the
            <see cref="P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext"/> is determined to be invalid.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Forms.EditForm.OnParametersSet">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Forms.EditForm.BuildRenderTree(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNetCore.Components.Forms.FieldChangedEventArgs">
            <summary>
            Provides information about the <see cref="E:Microsoft.AspNetCore.Components.Forms.EditContext.OnFieldChanged"/> event.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Forms.FieldChangedEventArgs.FieldIdentifier">
            <summary>
            Identifies the field whose value has changed.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.Forms.FieldIdentifier">
            <summary>
            Uniquely identifies a single field that can be edited. This may correspond to a property on a
            model object, or can be any other named value.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Forms.FieldIdentifier.Create``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNetCore.Components.Forms.FieldIdentifier"/> structure.
            </summary>
            <param name="accessor">An expression that identifies an object member.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Forms.FieldIdentifier.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNetCore.Components.Forms.FieldIdentifier"/> structure.
            </summary>
            <param name="model">The object that owns the field.</param>
            <param name="fieldName">The name of the editable field.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Forms.FieldIdentifier.Model">
            <summary>
            Gets the object that owns the editable field.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Forms.FieldIdentifier.FieldName">
            <summary>
            Gets the name of the editable field.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Forms.FieldIdentifier.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Forms.FieldIdentifier.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNetCore.Components.Forms.InputBase`1">
            <summary>
            A base class for form input components. This base class automatically
            integrates with an <see cref="T:Microsoft.AspNetCore.Components.Forms.EditContext"/>, which must be supplied
            as a cascading parameter.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Id">
            <summary>
            Gets a value for the component's 'id' attribute.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Class">
            <summary>
            Gets a value for the component's 'class' attribute.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value">
            <summary>
            Gets or sets the value of the input. This should be used with two-way binding.
            </summary>
            <example>
            bind-Value="@model.PropertyName"
            </example>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged">
            <summary>
            Gets or sets a callback that updates the bound value.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression">
            <summary>
            Gets or sets an expression that identifies the bound value.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Forms.InputBase`1.EditContext">
            <summary>
            Gets the associated <see cref="T:Microsoft.AspNetCore.Components.Forms.EditContext"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Forms.InputBase`1.FieldIdentifier">
            <summary>
            Gets the <see cref="P:Microsoft.AspNetCore.Components.Forms.InputBase`1.FieldIdentifier"/> for the bound value.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Forms.InputBase`1.CurrentValue">
            <summary>
            Gets or sets the current value of the input.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Forms.InputBase`1.CurrentValueAsString">
            <summary>
            Gets or sets the current value of the input, represented as a string.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Forms.InputBase`1.FormatValueAsString(`0)">
            <summary>
            Formats the value as a string. Derived classes can override this to determine the formating used for <see cref="P:Microsoft.AspNetCore.Components.Forms.InputBase`1.CurrentValueAsString"/>.
            </summary>
            <param name="value">The value to format.</param>
            <returns>A string representation of the value.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Forms.InputBase`1.TryParseValueFromString(System.String,`0@,System.String@)">
            <summary>
            Parses a string to create an instance of <typeparamref name="T"/>. Derived classes can override this to change how
            <see cref="P:Microsoft.AspNetCore.Components.Forms.InputBase`1.CurrentValueAsString"/> interprets incoming values.
            </summary>
            <param name="value">The string value to be parsed.</param>
            <param name="result">An instance of <typeparamref name="T"/>.</param>
            <param name="validationErrorMessage">If the value could not be parsed, provides a validation error message.</param>
            <returns>True if the value could be parsed; otherwise false.</returns>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Forms.InputBase`1.FieldClass">
            <summary>
            Gets a string that indicates the status of the field being edited. This will include
            some combination of "modified", "valid", or "invalid", depending on the status of the field.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Forms.InputBase`1.CssClass">
            <summary>
            Gets a CSS class string that combines the <see cref="P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Class"/> and <see cref="P:Microsoft.AspNetCore.Components.Forms.InputBase`1.FieldClass"/>
            properties. Derived components should typically use this value for the primary HTML element's
            'class' attribute.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Forms.InputBase`1.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterCollection)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNetCore.Components.Forms.InputCheckbox">
            <summary>
            An input component for editing <see cref="T:System.Boolean"/> values.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Forms.InputCheckbox.BuildRenderTree(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Forms.InputCheckbox.TryParseValueFromString(System.String,System.Boolean@,System.String@)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNetCore.Components.Forms.InputDate`1">
            <summary>
            An input component for editing date values.
            Supported types are <see cref="T:System.DateTime"/> and <see cref="T:System.DateTimeOffset"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Forms.InputDate`1.BuildRenderTree(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Forms.InputDate`1.FormatValueAsString(`0)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Forms.InputDate`1.TryParseValueFromString(System.String,`0@,System.String@)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNetCore.Components.Forms.InputNumber`1">
            <summary>
            An input component for editing numeric values.
            Supported numeric types are <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.Single"/>, <see cref="T:System.Double"/>, <see cref="T:System.Decimal"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Forms.InputNumber`1.BuildRenderTree(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Forms.InputNumber`1.TryParseValueFromString(System.String,`0@,System.String@)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNetCore.Components.Forms.InputSelect`1">
            <summary>
            A dropdown selection component.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Forms.InputSelect`1.BuildRenderTree(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Forms.InputSelect`1.TryParseValueFromString(System.String,`0@,System.String@)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNetCore.Components.Forms.InputText">
            <summary>
            An input component for editing <see cref="T:System.String"/> values.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Forms.InputText.BuildRenderTree(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Forms.InputText.TryParseValueFromString(System.String,System.String@,System.String@)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNetCore.Components.Forms.InputTextArea">
            <summary>
            A multiline input component for editing <see cref="T:System.String"/> values.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Forms.InputTextArea.BuildRenderTree(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Forms.InputTextArea.TryParseValueFromString(System.String,System.String@,System.String@)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNetCore.Components.Forms.ValidationMessage`1">
            <summary>
            Displays a list of validation messages for a specified field within a cascaded <see cref="T:Microsoft.AspNetCore.Components.Forms.EditContext"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Forms.ValidationMessage`1.For">
            <summary>
            Specifies the field for which validation messages should be displayed.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Forms.ValidationMessage`1.#ctor">
            <summary>`
            Constructs an instance of <see cref="T:Microsoft.AspNetCore.Components.Forms.ValidationSummary"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Forms.ValidationMessage`1.OnParametersSet">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Forms.ValidationMessage`1.BuildRenderTree(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNetCore.Components.Forms.ValidationMessageStore">
            <summary>
            Holds validation messages for an <see cref="T:Microsoft.AspNetCore.Components.Forms.EditContext"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Forms.ValidationMessageStore.#ctor(Microsoft.AspNetCore.Components.Forms.EditContext)">
            <summary>
            Creates an instance of <see cref="T:Microsoft.AspNetCore.Components.Forms.ValidationMessageStore"/>.
            </summary>
            <param name="editContext">The <see cref="T:Microsoft.AspNetCore.Components.Forms.EditContext"/> with which this store should be associated.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Forms.ValidationMessageStore.Add(Microsoft.AspNetCore.Components.Forms.FieldIdentifier@,System.String)">
            <summary>
            Adds a validation message for the specified field.
            </summary>
            <param name="fieldIdentifier">The identifier for the field.</param>
            <param name="message">The validation message.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Forms.ValidationMessageStore.AddRange(Microsoft.AspNetCore.Components.Forms.FieldIdentifier@,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds the messages from the specified collection for the specified field.
            </summary>
            <param name="fieldIdentifier">The identifier for the field.</param>
            <param name="messages">The validation messages to be added.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Forms.ValidationMessageStore.Item(Microsoft.AspNetCore.Components.Forms.FieldIdentifier)">
             <summary>
             Gets the validation messages within this <see cref="T:Microsoft.AspNetCore.Components.Forms.ValidationMessageStore"/> for the specified field.
            
             To get the validation messages across all validation message stores, use <see cref="M:Microsoft.AspNetCore.Components.Forms.EditContext.GetValidationMessages(Microsoft.AspNetCore.Components.Forms.FieldIdentifier)"/> instead
             </summary>
             <param name="fieldIdentifier">The identifier for the field.</param>
             <returns>The validation messages for the specified field within this <see cref="T:Microsoft.AspNetCore.Components.Forms.ValidationMessageStore"/>.</returns>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Forms.ValidationMessageStore.Item(System.Linq.Expressions.Expression{System.Func{System.Object}})">
             <summary>
             Gets the validation messages within this <see cref="T:Microsoft.AspNetCore.Components.Forms.ValidationMessageStore"/> for the specified field.
            
             To get the validation messages across all validation message stores, use <see cref="M:Microsoft.AspNetCore.Components.Forms.EditContext.GetValidationMessages(Microsoft.AspNetCore.Components.Forms.FieldIdentifier)"/> instead
             </summary>
             <param name="accessor">The identifier for the field.</param>
             <returns>The validation messages for the specified field within this <see cref="T:Microsoft.AspNetCore.Components.Forms.ValidationMessageStore"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Forms.ValidationMessageStore.Clear">
            <summary>
            Removes all messages within this <see cref="T:Microsoft.AspNetCore.Components.Forms.ValidationMessageStore"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Forms.ValidationMessageStore.Clear(Microsoft.AspNetCore.Components.Forms.FieldIdentifier@)">
            <summary>
            Removes all messages within this <see cref="T:Microsoft.AspNetCore.Components.Forms.ValidationMessageStore"/> for the specified field.
            </summary>
            <param name="fieldIdentifier">The identifier for the field.</param>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.Forms.ValidationMessageStoreExpressionExtensions">
            <summary>
            Provides extension methods to simplify using <see cref="T:Microsoft.AspNetCore.Components.Forms.ValidationMessageStore"/> with expressions.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Forms.ValidationMessageStoreExpressionExtensions.Add(Microsoft.AspNetCore.Components.Forms.ValidationMessageStore,System.Linq.Expressions.Expression{System.Func{System.Object}},System.String)">
            <summary>
            Adds a validation message for the specified field.
            </summary>
            <param name="store">The <see cref="T:Microsoft.AspNetCore.Components.Forms.ValidationMessageStore"/>.</param>
            <param name="accessor">Identifies the field for which to add the message.</param>
            <param name="message">The validation message.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Forms.ValidationMessageStoreExpressionExtensions.AddRange(Microsoft.AspNetCore.Components.Forms.ValidationMessageStore,System.Linq.Expressions.Expression{System.Func{System.Object}},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds the messages from the specified collection for the specified field.
            </summary>
            <param name="store">The <see cref="T:Microsoft.AspNetCore.Components.Forms.ValidationMessageStore"/>.</param>
            <param name="accessor">Identifies the field for which to add the messages.</param>
            <param name="messages">The validation messages to be added.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Forms.ValidationMessageStoreExpressionExtensions.Clear(Microsoft.AspNetCore.Components.Forms.ValidationMessageStore,System.Linq.Expressions.Expression{System.Func{System.Object}})">
            <summary>
            Removes all messages within this <see cref="T:Microsoft.AspNetCore.Components.Forms.ValidationMessageStore"/> for the specified field.
            </summary>
            <param name="store">The <see cref="T:Microsoft.AspNetCore.Components.Forms.ValidationMessageStore"/>.</param>
            <param name="accessor">Identifies the field for which to remove the messages.</param>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.Forms.ValidationRequestedEventArgs">
            <summary>
            Provides information about the <see cref="E:Microsoft.AspNetCore.Components.Forms.EditContext.OnValidationRequested"/> event.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.Forms.ValidationStateChangedEventArgs">
            <summary>
            Provides information about the <see cref="E:Microsoft.AspNetCore.Components.Forms.EditContext.OnValidationStateChanged"/> event.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.Forms.ValidationSummary">
            <summary>
            Displays a list of validation messages from a cascaded <see cref="T:Microsoft.AspNetCore.Components.Forms.EditContext"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Forms.ValidationSummary.#ctor">
            <summary>`
            Constructs an instance of <see cref="T:Microsoft.AspNetCore.Components.Forms.ValidationSummary"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Forms.ValidationSummary.OnParametersSet">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Forms.ValidationSummary.BuildRenderTree(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNetCore.Components.HttpClientJsonExtensions">
            <summary>
            Extension methods for working with JSON APIs.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.HttpClientJsonExtensions.GetJsonAsync``1(System.Net.Http.HttpClient,System.String)">
            <summary>
            Sends a GET request to the specified URI, and parses the JSON response body
            to create an object of the generic type.
            </summary>
            <typeparam name="T">A type into which the response body can be JSON-deserialized.</typeparam>
            <param name="httpClient">The <see cref="T:System.Net.Http.HttpClient"/>.</param>
            <param name="requestUri">The URI that the request will be sent to.</param>
            <returns>The response parsed as an object of the generic type.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.HttpClientJsonExtensions.PostJsonAsync(System.Net.Http.HttpClient,System.String,System.Object)">
            <summary>
            Sends a POST request to the specified URI, including the specified <paramref name="content"/>
            in JSON-encoded format, and parses the JSON response body to create an object of the generic type.
            </summary>
            <param name="httpClient">The <see cref="T:System.Net.Http.HttpClient"/>.</param>
            <param name="requestUri">The URI that the request will be sent to.</param>
            <param name="content">Content for the request body. This will be JSON-encoded and sent as a string.</param>
            <returns>The response parsed as an object of the generic type.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.HttpClientJsonExtensions.PostJsonAsync``1(System.Net.Http.HttpClient,System.String,System.Object)">
            <summary>
            Sends a POST request to the specified URI, including the specified <paramref name="content"/>
            in JSON-encoded format, and parses the JSON response body to create an object of the generic type.
            </summary>
            <typeparam name="T">A type into which the response body can be JSON-deserialized.</typeparam>
            <param name="httpClient">The <see cref="T:System.Net.Http.HttpClient"/>.</param>
            <param name="requestUri">The URI that the request will be sent to.</param>
            <param name="content">Content for the request body. This will be JSON-encoded and sent as a string.</param>
            <returns>The response parsed as an object of the generic type.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.HttpClientJsonExtensions.PutJsonAsync(System.Net.Http.HttpClient,System.String,System.Object)">
            <summary>
            Sends a PUT request to the specified URI, including the specified <paramref name="content"/>
            in JSON-encoded format.
            </summary>
            <param name="httpClient">The <see cref="T:System.Net.Http.HttpClient"/>.</param>
            <param name="requestUri">The URI that the request will be sent to.</param>
            <param name="content">Content for the request body. This will be JSON-encoded and sent as a string.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.HttpClientJsonExtensions.PutJsonAsync``1(System.Net.Http.HttpClient,System.String,System.Object)">
            <summary>
            Sends a PUT request to the specified URI, including the specified <paramref name="content"/>
            in JSON-encoded format, and parses the JSON response body to create an object of the generic type.
            </summary>
            <typeparam name="T">A type into which the response body can be JSON-deserialized.</typeparam>
            <param name="httpClient">The <see cref="T:System.Net.Http.HttpClient"/>.</param>
            <param name="requestUri">The URI that the request will be sent to.</param>
            <param name="content">Content for the request body. This will be JSON-encoded and sent as a string.</param>
            <returns>The response parsed as an object of the generic type.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.HttpClientJsonExtensions.SendJsonAsync(System.Net.Http.HttpClient,System.Net.Http.HttpMethod,System.String,System.Object)">
            <summary>
            Sends an HTTP request to the specified URI, including the specified <paramref name="content"/>
            in JSON-encoded format.
            </summary>
            <param name="httpClient">The <see cref="T:System.Net.Http.HttpClient"/>.</param>
            <param name="method">The HTTP method.</param>
            <param name="requestUri">The URI that the request will be sent to.</param>
            <param name="content">Content for the request body. This will be JSON-encoded and sent as a string.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.HttpClientJsonExtensions.SendJsonAsync``1(System.Net.Http.HttpClient,System.Net.Http.HttpMethod,System.String,System.Object)">
            <summary>
            Sends an HTTP request to the specified URI, including the specified <paramref name="content"/>
            in JSON-encoded format, and parses the JSON response body to create an object of the generic type.
            </summary>
            <typeparam name="T">A type into which the response body can be JSON-deserialized.</typeparam>
            <param name="httpClient">The <see cref="T:System.Net.Http.HttpClient"/>.</param>
            <param name="method">The HTTP method.</param>
            <param name="requestUri">The URI that the request will be sent to.</param>
            <param name="content">Content for the request body. This will be JSON-encoded and sent as a string.</param>
            <returns>The response parsed as an object of the generic type.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.IComponent">
            <summary>
            Represents a UI component.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.IComponent.Configure(Microsoft.AspNetCore.Components.RenderHandle)">
            <summary>
            Initializes the component.
            </summary>
            <param name="renderHandle">A <see cref="T:Microsoft.AspNetCore.Components.RenderHandle"/> that allows the component to be rendered.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.IComponent.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterCollection)">
            <summary>
            Sets parameters supplied by the component's parent in the render tree.
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the component has finished updating and rendering itself.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.IHandleAfterRender">
            <summary>
            Interface implemented by components that receive notification that they have been rendered.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.IHandleAfterRender.OnAfterRenderAsync">
            <summary>
            Notifies the component that it has been rendered.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous event handling operation.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.IHandleEvent">
            <summary>
            Interface implemented by components that receive notification of state changes.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.IHandleEvent.HandleEventAsync(Microsoft.AspNetCore.Components.EventCallbackWorkItem,System.Object)">
            <summary>
            Notifies the a state change has been triggered.
            </summary>
            <param name="item">The <see cref="T:Microsoft.AspNetCore.Components.EventCallbackWorkItem"/> associated with this event.</param>
            <param name="arg">The argument associated with this event.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that completes once the component has processed the state change.
            </returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.InjectAttribute">
            <summary>
            Indicates that the associated property should have a value injected from the
            service provider during initialization.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.Layouts.LayoutAttribute">
            <summary>
            Indicates that the associated component type uses a specified layout.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Layouts.LayoutAttribute.LayoutType">
            <summary>
            The type of the layout. The type myst implement <see cref="T:Microsoft.AspNetCore.Components.IComponent"/>
            and must accept a parameter with the name 'Body'.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Layouts.LayoutAttribute.#ctor(System.Type)">
            <summary>
            Constructs an instance of <see cref="T:Microsoft.AspNetCore.Components.Layouts.LayoutAttribute"/>.
            </summary>
            <param name="layoutType">The type of the layout.</param>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.Layouts.LayoutComponentBase">
            <summary>
            Optional base class for components that represent a layout.
            Alternatively, components may implement <see cref="T:Microsoft.AspNetCore.Components.IComponent"/> directly
            and declare their own parameter named <see cref="P:Microsoft.AspNetCore.Components.Layouts.LayoutComponentBase.Body"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Layouts.LayoutComponentBase.Body">
            <summary>
            Gets the content to be rendered inside the layout.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.Layouts.LayoutDisplay">
            <summary>
            Displays the specified page component, rendering it inside its layout
            and any further nested layouts.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Layouts.LayoutDisplay.Page">
            <summary>
            Gets or sets the type of the page component to display.
            The type must implement <see cref="T:Microsoft.AspNetCore.Components.IComponent"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Layouts.LayoutDisplay.PageParameters">
            <summary>
            Gets or sets the parameters to pass to the page.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Layouts.LayoutDisplay.Configure(Microsoft.AspNetCore.Components.RenderHandle)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Layouts.LayoutDisplay.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterCollection)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNetCore.Components.MarkupString">
            <summary>
            A string value that can be rendered as markup such as HTML.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.MarkupString.#ctor(System.String)">
            <summary>
            Constructs an instance of <see cref="T:Microsoft.AspNetCore.Components.MarkupString"/>.
            </summary>
            <param name="value">The value for the new instance.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.MarkupString.Value">
            <summary>
            Gets the value of the <see cref="T:Microsoft.AspNetCore.Components.MarkupString"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.MarkupString.op_Explicit(System.String)~Microsoft.AspNetCore.Components.MarkupString">
            <summary>
            Casts a <see cref="T:System.String"/> to a <see cref="T:Microsoft.AspNetCore.Components.MarkupString"/>.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.MarkupString.ToString">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNetCore.Components.Parameter">
            <summary>
            Represents a single parameter supplied to an <see cref="T:Microsoft.AspNetCore.Components.IComponent"/>
            by its parent in the render tree.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Parameter.Name">
            <summary>
            Gets the name of the parameter.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Parameter.Value">
            <summary>
            Gets the value being supplied for the parameter.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Parameter.Cascading">
            <summary>
            Gets a value to indicate whether the parameter is cascading, meaning that it
            was supplied by a <see cref="T:Microsoft.AspNetCore.Components.CascadingValue`1"/>.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.ParameterAttribute">
            <summary>
            Denotes the target member as a component parameter.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.ParameterCollection">
            <summary>
            Represents a collection of parameters supplied to an <see cref="T:Microsoft.AspNetCore.Components.IComponent"/>
            by its parent in the render tree.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.ParameterCollection.Empty">
            <summary>
            Gets an empty <see cref="T:Microsoft.AspNetCore.Components.ParameterCollection"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.ParameterCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Microsoft.AspNetCore.Components.ParameterCollection"/>.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.ParameterCollection.TryGetValue``1(System.String,``0@)">
            <summary>
            Gets the value of the parameter with the specified name.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="parameterName">The name of the parameter.</param>
            <param name="result">Receives the result, if any.</param>
            <returns>True if a matching parameter was found; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.ParameterCollection.GetValueOrDefault``1(System.String)">
            <summary>
            Gets the value of the parameter with the specified name, or a default value
            if no such parameter exists in the collection.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="parameterName">The name of the parameter.</param>
            <returns>The parameter value if found; otherwise the default value for the specified type.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.ParameterCollection.GetValueOrDefault``1(System.String,``0)">
            <summary>
            Gets the value of the parameter with the specified name, or a specified default value
            if no such parameter exists in the collection.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="parameterName">The name of the parameter.</param>
            <param name="defaultValue">The default value to return if no such parameter exists in the collection.</param>
            <returns>The parameter value if found; otherwise <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.ParameterCollection.ToDictionary">
            <summary>
            Returns a dictionary populated with the contents of the <see cref="T:Microsoft.AspNetCore.Components.ParameterCollection"/>.
            </summary>
            <returns>A dictionary populated with the contents of the <see cref="T:Microsoft.AspNetCore.Components.ParameterCollection"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.ParameterCollection.FromDictionary(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates a new <see cref="T:Microsoft.AspNetCore.Components.ParameterCollection"/> from the given <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="parameters">The <see cref="T:System.Collections.Generic.IDictionary`2"/> with the parameters.</param>
            <returns>A <see cref="T:Microsoft.AspNetCore.Components.ParameterCollection"/>.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.ParameterCollectionExtensions">
            <summary>
            Extension methods for the <see cref="T:Microsoft.AspNetCore.Components.ParameterCollection"/> type.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.ParameterCollectionExtensions.SetParameterProperties(Microsoft.AspNetCore.Components.ParameterCollection@,System.Object)">
            <summary>
            For each parameter property on <paramref name="target"/>, updates its value to
            match the corresponding entry in the <see cref="T:Microsoft.AspNetCore.Components.ParameterCollection"/>.
            </summary>
            <param name="parameterCollection">The <see cref="T:Microsoft.AspNetCore.Components.ParameterCollection"/>.</param>
            <param name="target">An object that has a public writable property matching each parameter's name and type.</param>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.ParameterEnumerator">
            <summary>
            An enumerator that iterates through a <see cref="T:Microsoft.AspNetCore.Components.ParameterCollection"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.ParameterEnumerator.Current">
            <summary>
            Gets the current value of the enumerator.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.ParameterEnumerator.MoveNext">
            <summary>
            Instructs the enumerator to move to the next value in the sequence.
            </summary>
            <returns>A flag to indicate whether or not there is a next value.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.RenderFragment">
            <summary>
            Represents a segment of UI content, implemented as a delegate that
            writes the content to a <see cref="T:Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder"/> to which the content should be written.</param>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.RenderFragment`1">
            <summary>
            Represents a segment of UI content for an object of type <typeparamref name="T"/>, implemented as
            a function that returns a <see cref="T:Microsoft.AspNetCore.Components.RenderFragment"/>.
            </summary>
            <typeparam name="T">The type of object.</typeparam>
            <param name="value">The value used to build the content.</param>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.RenderHandle">
            <summary>
            Allows a component to notify the renderer that it should be rendered.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RenderHandle.IsInitialized">
            <summary>
            Gets a value that indicates whether the <see cref="T:Microsoft.AspNetCore.Components.RenderHandle"/> has been
            initialised and is ready to use.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderHandle.Render(Microsoft.AspNetCore.Components.RenderFragment)">
            <summary>
            Notifies the renderer that the component should be rendered.
            </summary>
            <param name="renderFragment">The content that should be rendered.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderHandle.Invoke(System.Action)">
            <summary>
            Executes the supplied work item on the renderer's
            synchronization context.
            </summary>
            <param name="workItem">The work item to execute.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderHandle.InvokeAsync(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Executes the supplied work item on the renderer's
            synchronization context.
            </summary>
            <param name="workItem">The work item to execute.</param>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.Rendering.ComponentState">
            <summary>
            Tracks the rendering state associated with an <see cref="T:Microsoft.AspNetCore.Components.IComponent"/> instance
            within the context of a <see cref="T:Microsoft.AspNetCore.Components.Rendering.Renderer"/>. This is an internal implementation
            detail of <see cref="T:Microsoft.AspNetCore.Components.Rendering.Renderer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.ComponentState.#ctor(Microsoft.AspNetCore.Components.Rendering.Renderer,System.Int32,Microsoft.AspNetCore.Components.IComponent,Microsoft.AspNetCore.Components.Rendering.ComponentState)">
            <summary>
            Constructs an instance of <see cref="T:Microsoft.AspNetCore.Components.Rendering.ComponentState"/>.
            </summary>
            <param name="renderer">The <see cref="T:Microsoft.AspNetCore.Components.Rendering.Renderer"/> with which the new instance should be associated.</param>
            <param name="componentId">The externally visible identifier for the <see cref="T:Microsoft.AspNetCore.Components.IComponent"/>. The identifier must be unique in the context of the <see cref="T:Microsoft.AspNetCore.Components.Rendering.Renderer"/>.</param>
            <param name="component">The <see cref="T:Microsoft.AspNetCore.Components.IComponent"/> whose state is being tracked.</param>
            <param name="parentComponentState">The <see cref="T:Microsoft.AspNetCore.Components.Rendering.ComponentState"/> for the parent component, or null if this is a root component.</param>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.Rendering.HtmlRenderer">
            <summary>
            A <see cref="T:Microsoft.AspNetCore.Components.Rendering.Renderer"/> that produces HTML.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.HtmlRenderer.#ctor(System.IServiceProvider,System.Func{System.String,System.String},Microsoft.AspNetCore.Components.Rendering.IDispatcher)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.AspNetCore.Components.Rendering.HtmlRenderer"/>.
            </summary>
            <param name="serviceProvider">The <see cref="T:System.IServiceProvider"/> to use to instantiate components.</param>
            <param name="htmlEncoder">A <see cref="T:System.Func`2"/> that will HTML encode the given string.</param>
            <param name="dispatcher"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.HtmlRenderer.UpdateDisplayAsync(Microsoft.AspNetCore.Components.Rendering.RenderBatch@)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.HtmlRenderer.RenderComponentAsync(System.Type,Microsoft.AspNetCore.Components.ParameterCollection)">
            <summary>
            Renders a component into a sequence of <see cref="T:System.String"/> fragments that represent the textual representation
            of the HTML produced by the component.
            </summary>
            <param name="componentType">The type of the <see cref="T:Microsoft.AspNetCore.Components.IComponent"/>.</param>
            <param name="initialParameters">A <see cref="T:Microsoft.AspNetCore.Components.ParameterCollection"/> with the initial parameters to render the component.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that on completion returns a sequence of <see cref="T:System.String"/> fragments that represent the HTML text of the component.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.HtmlRenderer.RenderComponentAsync``1(Microsoft.AspNetCore.Components.ParameterCollection)">
            <summary>
            Renders a component into a sequence of <see cref="T:System.String"/> fragments that represent the textual representation
            of the HTML produced by the component.
            </summary>
            <typeparam name="TComponent">The type of the <see cref="T:Microsoft.AspNetCore.Components.IComponent"/>.</typeparam>
            <param name="initialParameters">A <see cref="T:Microsoft.AspNetCore.Components.ParameterCollection"/> with the initial parameters to render the component.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that on completion returns a sequence of <see cref="T:System.String"/> fragments that represent the HTML text of the component.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.HtmlRenderer.HandleException(System.Exception)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNetCore.Components.Rendering.IDispatcher">
            <summary>
            Dispatches external actions to be executed on the context of a <see cref="T:Microsoft.AspNetCore.Components.Rendering.Renderer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.IDispatcher.Invoke(System.Action)">
            <summary>
            Invokes the given <see cref="T:System.Action"/> in the context of the associated <see cref="T:Microsoft.AspNetCore.Components.Rendering.Renderer"/>.
            </summary>
            <param name="action">The action to execute.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that will be completed when the action has finished executing.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.IDispatcher.InvokeAsync(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Invokes the given <see cref="T:System.Func`1"/> in the context of the associated <see cref="T:Microsoft.AspNetCore.Components.Rendering.Renderer"/>.
            </summary>
            <param name="asyncAction">The asynchronous action to execute.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that will be completed when the action has finished executing.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.IDispatcher.Invoke``1(System.Func{``0})">
            <summary>
            Invokes the given <see cref="T:System.Func`1"/> in the context of the associated <see cref="T:Microsoft.AspNetCore.Components.Rendering.Renderer"/>.
            </summary>
            <param name="function">The function to execute.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that will be completed when the function has finished executing.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.IDispatcher.InvokeAsync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Invokes the given <see cref="T:System.Func`1"/> in the context of the associated <see cref="T:Microsoft.AspNetCore.Components.Rendering.Renderer"/>.
            </summary>
            <param name="asyncFunction">The asynchronous function to execute.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that will be completed when the function has finished executing.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.Rendering.RenderBatch">
            <summary>
            Describes a set of UI changes.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Rendering.RenderBatch.UpdatedComponents">
            <summary>
            Gets the changes to components that were added or updated.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Rendering.RenderBatch.ReferenceFrames">
            <summary>
            Gets render frames that may be referenced by entries in <see cref="P:Microsoft.AspNetCore.Components.Rendering.RenderBatch.UpdatedComponents"/>.
            For example, edit entries of type <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeEditType.PrependFrame"/>
            will point to an entry in this array to specify the subtree to be prepended.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Rendering.RenderBatch.DisposedComponentIDs">
            <summary>
            Gets the IDs of the components that were disposed.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Rendering.RenderBatch.DisposedEventHandlerIDs">
            <summary>
            Gets the IDs of the event handlers that were disposed.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.Rendering.RenderBatchBuilder">
            <summary>
            Collects the data produced by the rendering system during the course
            of rendering a single batch. This tracks both the final output data
            and the intermediate states (such as the queue of components still to
            be rendered).
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.Rendering.Renderer">
            <summary>
            Provides mechanisms for rendering hierarchies of <see cref="T:Microsoft.AspNetCore.Components.IComponent"/> instances,
            dispatching events to them, and notifying when the user interface is being updated.
            </summary>
        </member>
        <member name="E:Microsoft.AspNetCore.Components.Rendering.Renderer.UnhandledSynchronizationException">
            <summary>
            Allows the caller to handle exceptions from the SynchronizationContext when one is available.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.Renderer.#ctor(System.IServiceProvider)">
            <summary>
            Constructs an instance of <see cref="T:Microsoft.AspNetCore.Components.Rendering.Renderer"/>.
            </summary>
            <param name="serviceProvider">The <see cref="T:System.IServiceProvider"/> to be used when initializing components.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.Renderer.#ctor(System.IServiceProvider,Microsoft.AspNetCore.Components.Rendering.IDispatcher)">
            <summary>
            Constructs an instance of <see cref="T:Microsoft.AspNetCore.Components.Rendering.Renderer"/>.
            </summary>
            <param name="serviceProvider">The <see cref="T:System.IServiceProvider"/> to be used when initializing components.</param>
            <param name="dispatcher">The <see cref="T:Microsoft.AspNetCore.Components.Rendering.IDispatcher"/> to be for invoking user actions into the <see cref="T:Microsoft.AspNetCore.Components.Rendering.Renderer"/> context.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.Renderer.CreateDefaultDispatcher">
            <summary>
            Creates an <see cref="T:Microsoft.AspNetCore.Components.Rendering.IDispatcher"/> that can be used with one or more <see cref="T:Microsoft.AspNetCore.Components.Rendering.Renderer"/>.
            </summary>
            <returns>The <see cref="T:Microsoft.AspNetCore.Components.Rendering.IDispatcher"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.Renderer.InstantiateComponent(System.Type)">
            <summary>
            Constructs a new component of the specified type.
            </summary>
            <param name="componentType">The type of the component to instantiate.</param>
            <returns>The component instance.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.Renderer.AssignRootComponentId(Microsoft.AspNetCore.Components.IComponent)">
            <summary>
            Associates the <see cref="T:Microsoft.AspNetCore.Components.IComponent"/> with the <see cref="T:Microsoft.AspNetCore.Components.Rendering.Renderer"/>, assigning
            an identifier that is unique within the scope of the <see cref="T:Microsoft.AspNetCore.Components.Rendering.Renderer"/>.
            </summary>
            <param name="component">The component.</param>
            <returns>The component's assigned identifier.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.Renderer.GetCurrentRenderTreeFrames(System.Int32)">
            <summary>
            Gets the current render tree for a given component.
            </summary>
            <param name="componentId">The id for the component.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder"/> representing the current render tree.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.Renderer.RenderRootComponentAsync(System.Int32)">
            <summary>
            Performs the first render for a root component, waiting for this component and all
            children components to finish rendering in case there is any asynchronous work being
            done by any of the components. After this, the root component
            makes its own decisions about when to re-render, so there is no need to call
            this more than once.
            </summary>
            <param name="componentId">The ID returned by <see cref="M:Microsoft.AspNetCore.Components.Rendering.Renderer.AssignRootComponentId(Microsoft.AspNetCore.Components.IComponent)"/>.</param>
            <remarks>
            Rendering a root component is an asynchronous operation. Clients may choose to not await the returned task to
            start, but not wait for the entire render to complete.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.Renderer.RenderRootComponentAsync(System.Int32,Microsoft.AspNetCore.Components.ParameterCollection)">
            <summary>
            Performs the first render for a root component, waiting for this component and all
            children components to finish rendering in case there is any asynchronous work being
            done by any of the components. After this, the root component
            makes its own decisions about when to re-render, so there is no need to call
            this more than once.
            </summary>
            <param name="componentId">The ID returned by <see cref="M:Microsoft.AspNetCore.Components.Rendering.Renderer.AssignRootComponentId(Microsoft.AspNetCore.Components.IComponent)"/>.</param>
            <param name="initialParameters">The <see cref="T:Microsoft.AspNetCore.Components.ParameterCollection"/>with the initial parameters to use for rendering.</param>
            <remarks>
            Rendering a root component is an asynchronous operation. Clients may choose to not await the returned task to
            start, but not wait for the entire render to complete.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.Renderer.HandleException(System.Exception)">
            <summary>
            Allows derived types to handle exceptions during rendering. Defaults to rethrowing the original exception.
            </summary>
            <param name="exception">The <see cref="T:System.Exception"/>.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.Renderer.UpdateDisplayAsync(Microsoft.AspNetCore.Components.Rendering.RenderBatch@)">
            <summary>
            Updates the visible UI.
            </summary>
            <param name="renderBatch">The changes to the UI since the previous call.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> to represent the UI update process.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.Renderer.DispatchEventAsync(System.Int32,Microsoft.AspNetCore.Components.UIEventArgs)">
            <summary>
            Notifies the renderer that an event has occurred.
            </summary>
            <param name="eventHandlerId">The <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.AttributeEventHandlerId"/> value from the original event attribute.</param>
            <param name="eventArgs">Arguments to be passed to the event handler.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> which will complete once all asynchronous processing related to the event
            has completed.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.Renderer.Invoke(System.Action)">
            <summary>
            Executes the supplied work item on the renderer's
            synchronization context.
            </summary>
            <param name="workItem">The work item to execute.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.Renderer.InvokeAsync(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Executes the supplied work item on the renderer's
            synchronization context.
            </summary>
            <param name="workItem">The work item to execute.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.Renderer.AddToRenderQueue(System.Int32,Microsoft.AspNetCore.Components.RenderFragment)">
            <summary>
            Schedules a render for the specified <paramref name="componentId"/>. Its display
            will be populated using the specified <paramref name="renderFragment"/>.
            </summary>
            <param name="componentId">The ID of the component to render.</param>
            <param name="renderFragment">A <see cref="T:Microsoft.AspNetCore.Components.RenderFragment"/> that will supply the updated UI contents.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.Renderer.Dispose(System.Boolean)">
            <summary>
            Releases all resources currently used by this <see cref="T:Microsoft.AspNetCore.Components.Rendering.Renderer"/> instance.
            </summary>
            <param name="disposing"><see langword="true"/> if this method is being invoked by <see cref="M:System.IDisposable.Dispose"/>, otherwise <see langword="false"/>.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.Renderer.Dispose">
            <summary>
            Releases all resources currently used by this <see cref="T:Microsoft.AspNetCore.Components.Rendering.Renderer"/> instance.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.RenderTree.ArrayBuilder`1">
            <summary>
            Implements a list that uses an array of objects to store the elements.
            
            This differs from a <see cref="T:System.Collections.Generic.List`1"/> in that
            it not only grows as required but also shrinks if cleared with significant
            excess capacity. This makes it useful for component rendering, because
            components can be long-lived and re-render frequently, with the rendered size
            varying dramatically depending on the user's navigation in the app.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.ArrayBuilder`1.#ctor">
            <summary>
            Constructs a new instance of <see cref="T:Microsoft.AspNetCore.Components.RenderTree.ArrayBuilder`1"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.ArrayBuilder`1.#ctor(System.Int32)">
            <summary>
            Constructs a new instance of <see cref="T:Microsoft.AspNetCore.Components.RenderTree.ArrayBuilder`1"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RenderTree.ArrayBuilder`1.Count">
            <summary>
            Gets the number of items.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RenderTree.ArrayBuilder`1.Buffer">
            <summary>
            Gets the underlying buffer.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.ArrayBuilder`1.Append(`0@)">
            <summary>
            Appends a new item, automatically resizing the underlying array if necessary.
            </summary>
            <param name="item">The item to append.</param>
            <returns>The index of the appended item.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.ArrayBuilder`1.Overwrite(System.Int32,`0@)">
            <summary>
            Sets the supplied value at the specified index. The index must be within
            range for the array.
            </summary>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.ArrayBuilder`1.RemoveLast">
            <summary>
            Removes the last item.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.ArrayBuilder`1.Clear">
            <summary>
            Marks the array as empty, also shrinking the underlying storage if it was
            not being used to near its full capacity.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.ArrayBuilder`1.ToRange">
            <summary>
            Produces an <see cref="T:Microsoft.AspNetCore.Components.RenderTree.ArrayRange`1"/> structure describing the current contents.
            </summary>
            <returns>The <see cref="T:Microsoft.AspNetCore.Components.RenderTree.ArrayRange`1"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.ArrayBuilder`1.ToSegment(System.Int32,System.Int32)">
            <summary>
            Produces an <see cref="T:System.ArraySegment`1"/> structure describing the selected contents.
            </summary>
            <param name="fromIndexInclusive">The index of the first item in the segment.</param>
            <param name="toIndexExclusive">One plus the index of the last item in the segment.</param>
            <returns>The <see cref="T:System.ArraySegment`1"/>.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.RenderTree.ArrayRange`1">
            <summary>
            Represents a range of elements in an array that are in use.
            </summary>
            <typeparam name="T">The array item type.</typeparam>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.ArrayRange`1.Array">
            <summary>
            Gets the underlying array instance.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.ArrayRange`1.Count">
            <summary>
            Gets the number of items in the array that are considered to be in use.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.ArrayRange`1.#ctor(`0[],System.Int32)">
            <summary>
            Constructs an instance of <see cref="T:Microsoft.AspNetCore.Components.RenderTree.ArrayRange`1"/>.
            </summary>
            <param name="array">The array.</param>
            <param name="count">The number of items in the array that are in use.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.ArrayRange`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.ArrayRange`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.ArrayRange`1.Clone">
            <summary>
            Creates a shallow clone of the instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder">
            <summary>
            Provides methods for building a collection of <see cref="T:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame"/> entries.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder.ChildContent">
            <summary>
            The reserved parameter name used for supplying child content.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder.#ctor(Microsoft.AspNetCore.Components.Rendering.Renderer)">
            <summary>
            Constructs an instance of <see cref="T:Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder"/>.
            </summary>
            <param name="renderer">The associated <see cref="T:Microsoft.AspNetCore.Components.Rendering.Renderer"/>.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder.OpenElement(System.Int32,System.String)">
            <summary>
            Appends a frame representing an element, i.e., a container for other frames.
            In order for the <see cref="T:Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder"/> state to be valid, you must
            also call <see cref="M:Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder.CloseElement"/> immediately after appending the
            new element's child frames.
            </summary>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="elementName">A value representing the type of the element.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder.CloseElement">
            <summary>
            Marks a previously appended element frame as closed. Calls to this method
            must be balanced with calls to <see cref="M:Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder.OpenElement(System.Int32,System.String)"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder.AddMarkupContent(System.Int32,System.String)">
            <summary>
            Appends a frame representing markup content.
            </summary>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="markupContent">Content for the new markup frame.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder.AddContent(System.Int32,System.String)">
            <summary>
            Appends a frame representing text content.
            </summary>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="textContent">Content for the new text frame.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder.AddContent(System.Int32,Microsoft.AspNetCore.Components.RenderFragment)">
            <summary>
            Appends frames representing an arbitrary fragment of content.
            </summary>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="fragment">Content to append.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder.AddContent``1(System.Int32,Microsoft.AspNetCore.Components.RenderFragment{``0},``0)">
            <summary>
            Appends frames representing an arbitrary fragment of content.
            </summary>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="fragment">Content to append.</param>
            <param name="value">The value used by <paramref name="fragment"/>.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder.AddContent(System.Int32,Microsoft.AspNetCore.Components.MarkupString)">
            <summary>
            Appends a frame representing markup content.
            </summary>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="markupContent">Content for the new markup frame.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder.AddContent(System.Int32,System.Object)">
            <summary>
            Appends a frame representing text content.
            </summary>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="textContent">Content for the new text frame.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder.AddAttribute(System.Int32,System.String,System.Boolean)">
            <summary>
            <para>
            Appends a frame representing a bool-valued attribute.
            </para>
            <para>
            The attribute is associated with the most recently added element. If the value is <c>false</c> and the
            current element is not a component, the frame will be omitted.
            </para>
            </summary>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder.AddAttribute(System.Int32,System.String,System.String)">
            <summary>
            <para>
            Appends a frame representing a string-valued attribute.
            </para>
            <para>
            The attribute is associated with the most recently added element. If the value is <c>null</c> and the
            current element is not a component, the frame will be omitted.
            </para>
            </summary>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder.AddAttribute(System.Int32,System.String,System.Action)">
            <summary>
            <para>
            Appends a frame representing an <see cref="T:System.Action"/>-valued attribute.
            </para>
            <para>
            The attribute is associated with the most recently added element. If the value is <c>null</c> and the
            current element is not a component, the frame will be omitted.
            </para>
            </summary>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder.AddAttribute(System.Int32,System.String,System.Action{Microsoft.AspNetCore.Components.UIEventArgs})">
            <summary>
            <para>
            Appends a frame representing an <see cref="T:System.Action`1"/>-valued attribute.
            </para>
            <para>
            The attribute is associated with the most recently added element. If the value is <c>null</c> and the
            current element is not a component, the frame will be omitted.
            </para>
            </summary>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder.AddAttribute(System.Int32,System.String,System.Func{System.Threading.Tasks.Task})">
            <summary>
            <para>
            Appends a frame representing a <see cref="T:System.Func`1"/>-valued attribute.
            </para>
            <para>
            The attribute is associated with the most recently added element. If the value is <c>null</c> and the
            current element is not a component, the frame will be omitted.
            </para>
            </summary>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder.AddAttribute(System.Int32,System.String,System.Func{Microsoft.AspNetCore.Components.UIEventArgs,System.Threading.Tasks.Task})">
            <summary>
            <para>
            Appends a frame representing a <see cref="T:System.Func`2"/>-valued attribute.
            </para>
            <para>
            The attribute is associated with the most recently added element. If the value is <c>null</c> and the
            current element is not a component, the frame will be omitted.
            </para>
            </summary>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder.AddAttribute(System.Int32,System.String,System.MulticastDelegate)">
            <summary>
            <para>
            Appends a frame representing a delegate-valued attribute.
            </para>
            <para>
            The attribute is associated with the most recently added element. If the value is <c>null</c> and the
            current element is not a component, the frame will be omitted.
            </para>
            </summary>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
            <remarks>
            This method is provided for infrastructure purposes, and is used to be
            <see cref="T:Microsoft.AspNetCore.Components.UIEventArgsRenderTreeBuilderExtensions"/> to provide support for delegates of specific
            types. For a good programming experience when using a custom delegate type, define an
            extension method similar to
            <see cref="M:Microsoft.AspNetCore.Components.UIEventArgsRenderTreeBuilderExtensions.AddAttribute(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder,System.Int32,System.String,System.Action{Microsoft.AspNetCore.Components.UIChangeEventArgs})"/>
            that calls this method.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder.AddAttribute(System.Int32,System.String,Microsoft.AspNetCore.Components.EventCallback)">
            <summary>
            <para>
            Appends a frame representing an <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/> attribute.
            </para>
            <para>
            The attribute is associated with the most recently added element. If the value is <c>null</c> and the
            current element is not a component, the frame will be omitted.
            </para>
            </summary>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
            <remarks>
            This method is provided for infrastructure purposes, and is used to support generated code
            that uses <see cref="T:Microsoft.AspNetCore.Components.EventCallbackFactory"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder.AddAttribute``1(System.Int32,System.String,Microsoft.AspNetCore.Components.EventCallback{``0})">
            <summary>
            <para>
            Appends a frame representing an <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/> attribute.
            </para>
            <para>
            The attribute is associated with the most recently added element. If the value is <c>null</c> and the
            current element is not a component, the frame will be omitted.
            </para>
            </summary>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
            <remarks>
            This method is provided for infrastructure purposes, and is used to support generated code
            that uses <see cref="T:Microsoft.AspNetCore.Components.EventCallbackFactory"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder.AddAttribute(System.Int32,System.String,System.Object)">
            <summary>
            Appends a frame representing a string-valued attribute.
            The attribute is associated with the most recently added element. If the value is <c>null</c>, or
            the <see cref="T:System.Boolean" /> value <c>false</c> and the current element is not a component, the
            frame will be omitted.
            </summary>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder.AddAttribute(System.Int32,Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame@)">
            <summary>
            <para>
            Appends a frame representing an attribute.
            </para>
            <para>
            The attribute is associated with the most recently added element.
            </para>
            </summary>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="frame">A <see cref="T:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame"/> holding the name and value of the attribute.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder.OpenComponent``1(System.Int32)">
            <summary>
            Appends a frame representing a child component.
            </summary>
            <typeparam name="TComponent">The type of the child component.</typeparam>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder.OpenComponent(System.Int32,System.Type)">
            <summary>
            Appends a frame representing a child component.
            </summary>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="componentType">The type of the child component.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder.CloseComponent">
            <summary>
            Marks a previously appended component frame as closed. Calls to this method
            must be balanced with calls to <see cref="M:Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder.OpenComponent``1(System.Int32)"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder.AddElementReferenceCapture(System.Int32,System.Action{Microsoft.AspNetCore.Components.ElementRef})">
            <summary>
            Appends a frame representing an instruction to capture a reference to the parent element.
            </summary>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="elementReferenceCaptureAction">An action to be invoked whenever the reference value changes.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder.AddComponentReferenceCapture(System.Int32,System.Action{System.Object})">
            <summary>
            Appends a frame representing an instruction to capture a reference to the parent component.
            </summary>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="componentReferenceCaptureAction">An action to be invoked whenever the reference value changes.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder.Clear">
            <summary>
            Clears the builder.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder.GetFrames">
            <summary>
            Returns the <see cref="T:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame"/> values that have been appended.
            </summary>
            <returns>An array range of <see cref="T:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame"/> values.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.RenderTree.RenderTreeDiff">
            <summary>
            Describes changes to a component's render tree between successive renders.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeDiff.ComponentId">
            <summary>
            Gets the ID of the component.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeDiff.Edits">
            <summary>
            Gets the changes to the render tree since a previous state.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.RenderTree.RenderTreeDiffBuilder.DiffContext">
            <summary>
            Exists only so that the various methods in this class can call each other without
            constantly building up long lists of parameters. Is private to this class, so the
            fact that it's a mutable struct is manageable.
            
            Always pass by ref to avoid copying, and because the 'SiblingIndex' is mutable.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.RenderTree.RenderTreeEdit">
            <summary>
            Represents a single edit operation on a component's render tree.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeEdit.Type">
            <summary>
            Gets the type of the edit operation.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeEdit.SiblingIndex">
            <summary>
            Gets the index of the sibling frame that the edit relates to.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeEdit.ReferenceFrameIndex">
            <summary>
            Gets the index of related data in an associated render frames array. For example, if the
            <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeEdit.Type"/> value is <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeEditType.PrependFrame"/>, gets the
            index of the new frame data in an associated render tree.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeEdit.RemovedAttributeName">
            <summary>
            If the <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeEdit.Type"/> value is <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeEditType.RemoveAttribute"/>,
            gets the name of the attribute that is being removed.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.RenderTree.RenderTreeEditType">
            <summary>
            Describes the type of a render tree edit operation.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeEditType.PrependFrame">
            <summary>
            Indicates that a new frame should be inserted before the specified tree frame.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeEditType.RemoveFrame">
            <summary>
            Indicates that the specified tree frame should be removed.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeEditType.SetAttribute">
            <summary>
            Indicates that an attribute value should be applied to the specified frame.
            This may be a change to an existing attribute, or the addition of a new attribute.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeEditType.RemoveAttribute">
            <summary>
            Indicates that a named attribute should be removed from the specified frame.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeEditType.UpdateText">
            <summary>
            Indicates that the text content of the specified frame (which must be a text frame)
            should be updated.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeEditType.StepIn">
            <summary>
            Indicates that the edit position should move inside the specified frame.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeEditType.StepOut">
            <summary>
            Indicates that there are no further edit operations on the current frame, and the
            edit position should move back to the parent frame.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeEditType.UpdateMarkup">
            <summary>
            Indicates that the markup content of the specified frame (which must be a markup frame)
            should be updated.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame">
            <summary>
            Represents an entry in a tree of user interface (UI) items.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.Sequence">
            <summary>
            Gets the sequence number of the frame. Sequence numbers indicate the relative source
            positions of the instructions that inserted the frames. Sequence numbers are only
            comparable within the same sequence (typically, the same source method).
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.FrameType">
            <summary>
            Describes the type of this frame.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.ElementSubtreeLength">
            <summary>
            If the <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.FrameType"/> property equals <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType.Element"/>
            gets the number of frames in the subtree for which this frame is the root.
            The value is zero if the frame has not yet been closed.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.ElementName">
            <summary>
            If the <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.FrameType"/> property equals <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType.Element"/>,
            gets a name representing the type of the element. Otherwise, the value is undefined.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.TextContent">
            <summary>
            If the <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.FrameType"/> property equals <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType.Text"/>,
            gets the content of the text frame. Otherwise, the value is undefined.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.AttributeEventHandlerId">
            <summary>
            If the <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.FrameType"/> property equals <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType.Attribute"/>
            gets the ID of the corresponding event handler, if any.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.AttributeName">
            <summary>
            If the <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.FrameType"/> property equals <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType.Attribute"/>,
            gets the attribute name. Otherwise, the value is undefined.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.AttributeValue">
            <summary>
            If the <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.FrameType"/> property equals <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType.Attribute"/>,
            gets the attribute value. Otherwise, the value is undefined.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.ComponentSubtreeLength">
            <summary>
            If the <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.FrameType"/> property equals <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType.Component"/>
            gets the number of frames in the subtree for which this frame is the root.
            The value is zero if the frame has not yet been closed.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.ComponentId">
            <summary>
            If the <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.FrameType"/> property equals <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType.Component"/>,
            gets the child component instance identifier.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.ComponentType">
            <summary>
            If the <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.FrameType"/> property equals <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType.Component"/>,
            gets the type of the child component.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.ComponentState">
            <summary>
            If the <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.FrameType"/> property equals <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType.Component"/>,
            gets the child component state object. Otherwise, the value is undefined.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.Component">
            <summary>
            If the <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.FrameType"/> property equals <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType.Component"/>,
            gets the child component instance. Otherwise, the value is undefined.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.RegionSubtreeLength">
            <summary>
            If the <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.FrameType"/> property equals <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType.Region"/>
            gets the number of frames in the subtree for which this frame is the root.
            The value is zero if the frame has not yet been closed.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.ElementReferenceCaptureId">
            <summary>
            If the <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.FrameType"/> property equals <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType.ElementReferenceCapture"/>,
            gets the ID of the reference capture. Otherwise, the value is undefined.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.ElementReferenceCaptureAction">
            <summary>
            If the <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.FrameType"/> property equals <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType.ElementReferenceCapture"/>,
            gets the action that writes the reference to its target. Otherwise, the value is undefined.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.ComponentReferenceCaptureParentFrameIndex">
            <summary>
            If the <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.FrameType"/> property equals <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType.ComponentReferenceCapture"/>,
            gets the index of the parent frame representing the component being captured. Otherwise, the value is undefined.
            WARNING: This index can only be used in the context of the frame's original render tree. If the frame is
                     copied elsewhere, such as to the ReferenceFrames buffer of a RenderTreeDiff, then the index will
                     not relate to entries in that other buffer.
                     Currently there's no scenario where this matters, but if there was, we could change all of the subtree
                     initialization logic in RenderTreeDiffBuilder to walk the frames hierarchically, then it would know
                     the parent index at the point where it wants to initialize the ComponentReferenceCapture frame.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.ComponentReferenceCaptureAction">
            <summary>
            If the <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.FrameType"/> property equals <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType.ComponentReferenceCapture"/>,
            gets the action that writes the reference to its target. Otherwise, the value is undefined.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.MarkupContent">
            <summary>
            If the <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.FrameType"/> property equals <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType.Markup"/>,
            gets the content of the markup frame. Otherwise, the value is undefined.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.ToString">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType">
            <summary>
            Describes the type of a <see cref="T:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame"/>.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType.Element">
            <summary>
            Represents a container for other frames.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType.Text">
            <summary>
            Represents text content.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType.Attribute">
            <summary>
            Represents a key-value pair associated with another <see cref="T:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame"/>.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType.Component">
            <summary>
            Represents a child component.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType.Region">
            <summary>
            Defines the boundary around range of sibling frames that should be treated as an
            unsplittable group for the purposes of diffing. This is typically used when appending
            a tree fragment generated by external code, because the sequence numbers in that tree
            fragment are not comparable to sequence numbers outside it.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType.ElementReferenceCapture">
            <summary>
            Represents an instruction to capture or update a reference to the parent element.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType.ComponentReferenceCapture">
            <summary>
            Represents an instruction to capture or update a reference to the parent component.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType.Markup">
            <summary>
            Represents a block of markup content.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.RouteAttribute">
            <summary>
            Indicates that the associated component should match the specified route template pattern.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RouteAttribute.#ctor(System.String)">
            <summary>
            Constructs an instance of <see cref="T:Microsoft.AspNetCore.Components.RouteAttribute"/>.
            </summary>
            <param name="template">The route template.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RouteAttribute.Template">
            <summary>
            Gets the route template.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.Routing.NavLink">
            <summary>
            A component that renders an anchor tag, automatically toggling its 'active'
            class based on whether its 'href' matches the current URI.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Routing.NavLink.ActiveClass">
            <summary>
            Gets or sets the CSS class name applied to the NavLink when the 
            current route matches the NavLink href.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Routing.NavLink.Match">
            <summary>
            Gets or sets a value representing the URL matching behavior.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Routing.NavLink.Configure(Microsoft.AspNetCore.Components.RenderHandle)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Routing.NavLink.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterCollection)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Routing.NavLink.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNetCore.Components.Routing.NavLinkMatch">
            <summary>
            Modifies the URL matching behavior for a <see cref="T:Microsoft.AspNetCore.Components.Routing.NavLink"/>.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.Routing.NavLinkMatch.Prefix">
            <summary>
            Specifies that the <see cref="T:Microsoft.AspNetCore.Components.Routing.NavLink"/> should be active when it matches any prefix
            of the current URL.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.Routing.NavLinkMatch.All">
            <summary>
            Specifies that the <see cref="T:Microsoft.AspNetCore.Components.Routing.NavLink"/> should be active when it matches the entire
            current URL.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.Routing.Router">
            <summary>
            A component that displays whichever other component corresponds to the
            current navigation location.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Routing.Router.AppAssembly">
            <summary>
            Gets or sets the assembly that should be searched, along with its referenced
            assemblies, for components matching the URI.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Routing.Router.FallbackComponent">
            <summary>
            Gets or sets the type of the component that should be used as a fallback when no match is found for the requested route.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Routing.Router.Configure(Microsoft.AspNetCore.Components.RenderHandle)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Routing.Router.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterCollection)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Routing.Router.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Routing.Router.Render(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder,System.Type,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Routing.RouteTable.RouteComparison(Microsoft.AspNetCore.Components.Routing.RouteEntry,Microsoft.AspNetCore.Components.Routing.RouteEntry)">
             <summary>
             Route precedence algorithm.
             We collect all the routes and sort them from most specific to
             less specific. The specificity of a route is given by the specificity
             of its segments and the position of those segments in the route.
             * A literal segment is more specific than a parameter segment.
             * A parameter segment with more constraints is more specific than one with fewer constraints
             * Segment earlier in the route are evaluated before segments later in the route.
             For example:
             /Literal is more specific than /Parameter
             /Route/With/{parameter} is more specific than /{multiple}/With/{parameters}
             /Product/{id:int} is more specific than /Product/{id}
            
             Routes can be ambiguous if:
             They are composed of literals and those literals have the same values (case insensitive)
             They are composed of a mix of literals and parameters, in the same relative order and the
             literals have the same values.
             For example:
             * /literal and /Literal
             /{parameter}/literal and /{something}/literal
             /{parameter:constraint}/literal and /{something:constraint}/literal
            
             To calculate the precedence we sort the list of routes as follows:
             * Shorter routes go first.
             * A literal wins over a parameter in precedence.
             * For literals with different values (case insensitive) we choose the lexical order
             * For parameters with different numbers of constraints, the one with more wins
             If we get to the end of the comparison routing we've detected an ambiguous pair of routes.
             </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.Routing.TypeRouteConstraint`1">
            <summary>
            A route constraint that requires the value to be parseable as a specified type.
            </summary>
            <typeparam name="T">The type to which the value must be parseable.</typeparam>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.RuntimeHelpers">
            <summary>
            Used by generated code produced by the Components code generator. Not intended or supported
            for use in application code.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RuntimeHelpers.TypeCheck``1(``0)">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RuntimeHelpers.TypeCheck``1(System.Action)">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RuntimeHelpers.TypeCheck``1(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RuntimeHelpers.TypeCheck``1(System.Action{Microsoft.AspNetCore.Components.Forms.EditContext})">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RuntimeHelpers.TypeCheck``1(System.Func{Microsoft.AspNetCore.Components.Forms.EditContext,System.Threading.Tasks.Task})">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RuntimeHelpers.TypeCheck``1(System.Action{Microsoft.AspNetCore.Components.UIEventArgs})">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RuntimeHelpers.TypeCheck``1(System.Func{Microsoft.AspNetCore.Components.UIEventArgs,System.Threading.Tasks.Task})">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RuntimeHelpers.TypeCheck``1(System.Action{Microsoft.AspNetCore.Components.UIChangeEventArgs})">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RuntimeHelpers.TypeCheck``1(System.Func{Microsoft.AspNetCore.Components.UIChangeEventArgs,System.Threading.Tasks.Task})">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RuntimeHelpers.TypeCheck``1(System.Action{Microsoft.AspNetCore.Components.UIClipboardEventArgs})">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RuntimeHelpers.TypeCheck``1(System.Func{Microsoft.AspNetCore.Components.UIClipboardEventArgs,System.Threading.Tasks.Task})">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RuntimeHelpers.TypeCheck``1(System.Action{Microsoft.AspNetCore.Components.UIDataTransferItem})">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RuntimeHelpers.TypeCheck``1(System.Func{Microsoft.AspNetCore.Components.UIDataTransferItem,System.Threading.Tasks.Task})">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RuntimeHelpers.TypeCheck``1(System.Action{Microsoft.AspNetCore.Components.UIDragEventArgs})">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RuntimeHelpers.TypeCheck``1(System.Func{Microsoft.AspNetCore.Components.UIDragEventArgs,System.Threading.Tasks.Task})">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RuntimeHelpers.TypeCheck``1(System.Action{Microsoft.AspNetCore.Components.UIErrorEventArgs})">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RuntimeHelpers.TypeCheck``1(System.Func{Microsoft.AspNetCore.Components.UIErrorEventArgs,System.Threading.Tasks.Task})">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RuntimeHelpers.TypeCheck``1(System.Action{Microsoft.AspNetCore.Components.UIFocusEventArgs})">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RuntimeHelpers.TypeCheck``1(System.Func{Microsoft.AspNetCore.Components.UIFocusEventArgs,System.Threading.Tasks.Task})">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RuntimeHelpers.TypeCheck``1(System.Action{Microsoft.AspNetCore.Components.UIKeyboardEventArgs})">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RuntimeHelpers.TypeCheck``1(System.Func{Microsoft.AspNetCore.Components.UIKeyboardEventArgs,System.Threading.Tasks.Task})">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RuntimeHelpers.TypeCheck``1(System.Action{Microsoft.AspNetCore.Components.UIMouseEventArgs})">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RuntimeHelpers.TypeCheck``1(System.Func{Microsoft.AspNetCore.Components.UIMouseEventArgs,System.Threading.Tasks.Task})">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RuntimeHelpers.TypeCheck``1(System.Action{Microsoft.AspNetCore.Components.UIPointerEventArgs})">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RuntimeHelpers.TypeCheck``1(System.Func{Microsoft.AspNetCore.Components.UIPointerEventArgs,System.Threading.Tasks.Task})">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RuntimeHelpers.TypeCheck``1(System.Action{Microsoft.AspNetCore.Components.UIProgressEventArgs})">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RuntimeHelpers.TypeCheck``1(System.Func{Microsoft.AspNetCore.Components.UIProgressEventArgs,System.Threading.Tasks.Task})">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RuntimeHelpers.TypeCheck``1(System.Action{Microsoft.AspNetCore.Components.UITouchEventArgs})">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RuntimeHelpers.TypeCheck``1(System.Func{Microsoft.AspNetCore.Components.UITouchEventArgs,System.Threading.Tasks.Task})">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RuntimeHelpers.TypeCheck``1(System.Action{Microsoft.AspNetCore.Components.UIWheelEventArgs})">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RuntimeHelpers.TypeCheck``1(System.Func{Microsoft.AspNetCore.Components.UIWheelEventArgs,System.Threading.Tasks.Task})">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RuntimeHelpers.TypeCheck``1(System.Action{System.Int32})">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RuntimeHelpers.TypeCheck``1(System.Func{System.Int32,System.Threading.Tasks.Task})">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RuntimeHelpers.TypeCheck``1(System.Action{System.Nullable{System.Int32}})">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RuntimeHelpers.TypeCheck``1(System.Func{System.Nullable{System.Int32},System.Threading.Tasks.Task})">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RuntimeHelpers.TypeCheck``1(System.Action{System.Int64})">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RuntimeHelpers.TypeCheck``1(System.Func{System.Int64,System.Threading.Tasks.Task})">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RuntimeHelpers.TypeCheck``1(System.Action{System.Nullable{System.Int64}})">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RuntimeHelpers.TypeCheck``1(System.Func{System.Nullable{System.Int64},System.Threading.Tasks.Task})">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RuntimeHelpers.TypeCheck``1(System.Action{System.Decimal})">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RuntimeHelpers.TypeCheck``1(System.Func{System.Decimal,System.Threading.Tasks.Task})">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RuntimeHelpers.TypeCheck``1(System.Action{System.Nullable{System.Decimal}})">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RuntimeHelpers.TypeCheck``1(System.Func{System.Nullable{System.Decimal},System.Threading.Tasks.Task})">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RuntimeHelpers.TypeCheck``1(System.Action{System.Single})">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RuntimeHelpers.TypeCheck``1(System.Func{System.Single,System.Threading.Tasks.Task})">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RuntimeHelpers.TypeCheck``1(System.Action{System.Nullable{System.Single}})">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RuntimeHelpers.TypeCheck``1(System.Func{System.Nullable{System.Single},System.Threading.Tasks.Task})">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RuntimeHelpers.TypeCheck``1(System.Action{System.Double})">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RuntimeHelpers.TypeCheck``1(System.Func{System.Double,System.Threading.Tasks.Task})">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RuntimeHelpers.TypeCheck``1(System.Action{System.Nullable{System.Double}})">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RuntimeHelpers.TypeCheck``1(System.Func{System.Nullable{System.Double},System.Threading.Tasks.Task})">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RuntimeHelpers.TypeCheck``1(System.Action{System.DateTime})">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RuntimeHelpers.TypeCheck``1(System.Func{System.DateTime,System.Threading.Tasks.Task})">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RuntimeHelpers.TypeCheck``1(System.Action{System.Nullable{System.DateTime}})">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RuntimeHelpers.TypeCheck``1(System.Func{System.Nullable{System.DateTime},System.Threading.Tasks.Task})">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RuntimeHelpers.TypeCheck``1(System.Action{System.Boolean})">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RuntimeHelpers.TypeCheck``1(System.Func{System.Boolean,System.Threading.Tasks.Task})">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RuntimeHelpers.TypeCheck``1(System.Action{System.Nullable{System.Boolean}})">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RuntimeHelpers.TypeCheck``1(System.Func{System.Nullable{System.Boolean},System.Threading.Tasks.Task})">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RuntimeHelpers.TypeCheck``1(System.Action{System.String})">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RuntimeHelpers.TypeCheck``1(System.Func{System.String,System.Threading.Tasks.Task})">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RuntimeHelpers.TypeCheck``1(System.Action{System.Object})">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RuntimeHelpers.TypeCheck``1(System.Func{System.Object,System.Threading.Tasks.Task})">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.Services.IUriHelper">
            <summary>
            Helpers for working with URIs and navigation state.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Services.IUriHelper.GetAbsoluteUri">
            <summary>
            Gets the current absolute URI.
            </summary>
            <returns>The current absolute URI.</returns>
        </member>
        <member name="E:Microsoft.AspNetCore.Components.Services.IUriHelper.OnLocationChanged">
            <summary>
            An event that fires when the navigation location has changed.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Services.IUriHelper.ToAbsoluteUri(System.String)">
            <summary>
            Converts a relative URI into an absolute one (by resolving it
            relative to the current absolute URI).
            </summary>
            <param name="href">The relative URI.</param>
            <returns>The absolute URI.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Services.IUriHelper.GetBaseUri">
            <summary>
            Gets the base URI (with trailing slash) that can be prepended before relative URI paths to produce an absolute URI.
            Typically this corresponds to the 'href' attribute on the document's &lt;base&gt; element.
            </summary>
            <returns>The URI prefix, which has a trailing slash.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Services.IUriHelper.ToBaseRelativePath(System.String,System.String)">
            <summary>
            Given a base URI (e.g., one previously returned by <see cref="M:Microsoft.AspNetCore.Components.Services.IUriHelper.GetBaseUri"/>),
            converts an absolute URI into one relative to the base URI prefix.
            </summary>
            <param name="baseUri">The base URI prefix (e.g., previously returned by <see cref="M:Microsoft.AspNetCore.Components.Services.IUriHelper.GetBaseUri"/>).</param>
            <param name="locationAbsolute">An absolute URI that is within the space of the base URI.</param>
            <returns>A relative URI path.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Services.IUriHelper.NavigateTo(System.String)">
            <summary>
            Navigates to the specified URI.
            </summary>
            <param name="uri">The destination URI. This can be absolute, or relative to the base URI
            (as returned by <see cref="M:Microsoft.AspNetCore.Components.Services.IUriHelper.GetBaseUri"/>).</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Services.IUriHelper.NavigateTo(System.String,System.Boolean)">
            <summary>
            Navigates to the specified URI.
            </summary>
            <param name="uri">The destination URI. This can be absolute, or relative to the base URI
            (as returned by <see cref="M:Microsoft.AspNetCore.Components.Services.IUriHelper.GetBaseUri"/>).</param>
            <param name="forceLoad">If true, bypasses client-side routing and forces the browser to load the new page from the server, whether or not the URI would normally be handled by the client-side router.</param>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.Services.UriHelperBase">
            <summary>
            A base class for <see cref="T:Microsoft.AspNetCore.Components.Services.IUriHelper"/> implementations.
            </summary>
        </member>
        <member name="E:Microsoft.AspNetCore.Components.Services.UriHelperBase.OnLocationChanged">
            <summary>
            An event that fires when the navigation location has changed.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Services.UriHelperBase.NavigateTo(System.String)">
            <summary>
            Navigates to the specified URI.
            </summary>
            <param name="uri">The destination URI. This can be absolute, or relative to the base URI
            (as returned by <see cref="M:Microsoft.AspNetCore.Components.Services.UriHelperBase.GetBaseUri"/>).</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Services.UriHelperBase.NavigateTo(System.String,System.Boolean)">
            <summary>
            Navigates to the specified URI.
            </summary>
            <param name="uri">The destination URI. This can be absolute, or relative to the base URI
            (as returned by <see cref="M:Microsoft.AspNetCore.Components.Services.UriHelperBase.GetBaseUri"/>).</param>
            <param name="forceLoad">If true, bypasses client-side routing and forces the browser to load the new page from the server, whether or not the URI would normally be handled by the client-side router.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Services.UriHelperBase.NavigateToCore(System.String,System.Boolean)">
            <summary>
            Navigates to the specified URI.
            </summary>
            <param name="uri">The destination URI. This can be absolute, or relative to the base URI
            (as returned by <see cref="M:Microsoft.AspNetCore.Components.Services.UriHelperBase.GetBaseUri"/>).</param>
            <param name="forceLoad">If true, bypasses client-side routing and forces the browser to load the new page from the server, whether or not the URI would normally be handled by the client-side router.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Services.UriHelperBase.InitializeState">
            <summary>
            Called to initialize BaseURI and current URI before those values the first time.
            Override this method to dynamically calculate the those values.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Services.UriHelperBase.GetAbsoluteUri">
            <summary>
            Gets the current absolute URI.
            </summary>
            <returns>The current absolute URI.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Services.UriHelperBase.GetBaseUri">
            <summary>
            Gets the base URI (with trailing slash) that can be prepended before relative URI paths to
            produce an absolute URI. Typically this corresponds to the 'href' attribute on the
            document's &lt;base&gt; element.
            </summary>
            <returns>The URI prefix, which has a trailing slash.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Services.UriHelperBase.ToAbsoluteUri(System.String)">
            <summary>
            Converts a relative URI into an absolute one (by resolving it
            relative to the current absolute URI).
            </summary>
            <param name="href">The relative URI.</param>
            <returns>The absolute URI.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Services.UriHelperBase.ToBaseRelativePath(System.String,System.String)">
            <summary>
            Given a base URI (e.g., one previously returned by <see cref="M:Microsoft.AspNetCore.Components.Services.UriHelperBase.GetBaseUri"/>),
            converts an absolute URI into one relative to the base URI prefix.
            </summary>
            <param name="baseUri">
            The base URI prefix (e.g., previously returned by <see cref="M:Microsoft.AspNetCore.Components.Services.UriHelperBase.GetBaseUri"/>).
            </param>
            <param name="locationAbsolute">An absolute URI that is within the space of the base URI.</param>
            <returns>A relative URI path.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Services.UriHelperBase.SetAbsoluteUri(System.String)">
            <summary>
            Set the URI to the provided value.
            </summary>
            <param name="uri">The URI. Must be an absolute URI.</param>
            <remarks>
            Calling <see cref="M:Microsoft.AspNetCore.Components.Services.UriHelperBase.SetAbsoluteUri(System.String)"/> does not trigger <see cref="E:Microsoft.AspNetCore.Components.Services.UriHelperBase.OnLocationChanged"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Services.UriHelperBase.SetAbsoluteBaseUri(System.String)">
            <summary>
            Sets the base URI to the provided value (after normalization).
            </summary>
            <param name="baseUri">The base URI. Must be an absolute URI.</param>
            <remarks>
            Calling <see cref="M:Microsoft.AspNetCore.Components.Services.UriHelperBase.SetAbsoluteBaseUri(System.String)"/> does not trigger <see cref="E:Microsoft.AspNetCore.Components.Services.UriHelperBase.OnLocationChanged"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Services.UriHelperBase.TriggerOnLocationChanged">
            <summary>
            Triggers the <see cref="E:Microsoft.AspNetCore.Components.Services.UriHelperBase.OnLocationChanged"/> event with the current URI value.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.UIEventArgs">
            <summary>
            Supplies information about an event that is being raised.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.UIEventArgs.Empty">
            <summary>
            An empty instance of <see cref="T:Microsoft.AspNetCore.Components.UIEventArgs"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UIEventArgs.Type">
            <summary>
            Gets or sets the type of the event.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.UIChangeEventArgs">
            <summary>
            Supplies information about an input change event that is being raised.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UIChangeEventArgs.Value">
            <summary>
            Gets or sets the new value of the input. This may be a <see cref="T:System.String"/>
            or a <see cref="T:System.Boolean"/>.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.UIClipboardEventArgs">
            <summary>
            Supplies information about an clipboard event that is being raised.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.UIDragEventArgs">
            <summary>
            Supplies information about an drag event that is being raised.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UIDragEventArgs.Detail">
            <summary>
            A count of consecutive clicks that happened in a short amount of time, incremented by one.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UIDragEventArgs.DataTransfer">
            <summary>
            The data that underlies a drag-and-drop operation, known as the drag data store.
            See <see cref="P:Microsoft.AspNetCore.Components.UIDragEventArgs.DataTransfer"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UIDragEventArgs.ScreenX">
            <summary>
            The X coordinate of the mouse pointer in global (screen) coordinates.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UIDragEventArgs.ScreenY">
            <summary>
            The Y coordinate of the mouse pointer in global (screen) coordinates.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UIDragEventArgs.ClientX">
            <summary>
            The X coordinate of the mouse pointer in local (DOM content) coordinates.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UIDragEventArgs.ClientY">
            <summary>
            	The Y coordinate of the mouse pointer in local (DOM content) coordinates.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UIDragEventArgs.Button">
            <summary>
            The button number that was pressed when the mouse event was fired:
            Left button=0,
            middle button=1 (if present),
            right button=2.
            For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UIDragEventArgs.Buttons">
            <summary>
            The buttons being pressed when the mouse event was fired:
            Left button=1,
            Right button=2,
            Middle (wheel) button=4,
            4th button (typically, "Browser Back" button)=8,
            5th button (typically, "Browser Forward" button)=16.
            If two or more buttons are pressed, returns the logical sum of the values.
            E.g., if Left button and Right button are pressed, returns 3 (=1 | 2).
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UIDragEventArgs.CtrlKey">
            <summary>
            true if the control key was down when the event was fired. false otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UIDragEventArgs.ShiftKey">
            <summary>
            true if the shift key was down when the event was fired. false otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UIDragEventArgs.AltKey">
            <summary>
            true if the alt key was down when the event was fired. false otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UIDragEventArgs.MetaKey">
            <summary>
            true if the meta key was down when the event was fired. false otherwise.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.DataTransfer">
            <summary>
            The <see cref="T:Microsoft.AspNetCore.Components.DataTransfer"/> object is used to hold the data that is being dragged during a drag and drop operation.
            It may hold one or more <see cref="T:Microsoft.AspNetCore.Components.UIDataTransferItem"/>, each of one or more data types.
            For more information about drag and drop, see HTML Drag and Drop API.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.DataTransfer.DropEffect">
            <summary>
            Gets the type of drag-and-drop operation currently selected or sets the operation to a new type.
            The value must be none, copy, link or move.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.DataTransfer.EffectAllowed">
            <summary>
            Provides all of the types of operations that are possible.
            Must be one of none, copy, copyLink, copyMove, link, linkMove, move, all or uninitialized.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.DataTransfer.Files">
            <summary>
            Contains a list of all the local files available on the data transfer.
            If the drag operation doesn't involve dragging files, this property is an empty list.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.DataTransfer.Items">
            <summary>
            Gives a <see cref="T:Microsoft.AspNetCore.Components.UIDataTransferItem"/> array which is a list of all of the drag data.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.DataTransfer.Types">
            <summary>
            An array of <see cref="T:System.String"/> giving the formats that were set in the dragstart event.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.UIDataTransferItem">
            <summary>
            The <see cref="T:Microsoft.AspNetCore.Components.UIDataTransferItem"/> object represents one drag data item.
            During a drag operation, each drag event has a dataTransfer property which contains a list of drag data items.
            Each item in the list is a <see cref="T:Microsoft.AspNetCore.Components.UIDataTransferItem"/> object.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UIDataTransferItem.Kind">
            <summary>
            The kind of drag data item, string or file
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UIDataTransferItem.Type">
            <summary>
            The drag data item's type, typically a MIME type
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.UIErrorEventArgs">
            <summary>
            Supplies information about an error event that is being raised.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UIErrorEventArgs.Message">
            <summary>
            Gets a a human-readable error message describing the problem.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UIErrorEventArgs.Filename">
            <summary>
            Gets the name of the script file in which the error occurred.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UIErrorEventArgs.Lineno">
            <summary>
            Gets the line number of the script file on which the error occurred.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UIErrorEventArgs.Colno">
            <summary>
            Gets the column number of the script file on which the error occurred.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.UIFocusEventArgs">
            <summary>
            Supplies information about a focus event that is being raised.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.UIKeyboardEventArgs">
            <summary>
            Supplies information about a keyboard event that is being raised.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UIKeyboardEventArgs.Key">
            <summary>
            The key value of the key represented by the event. 
            If the value has a printed representation, this attribute's value is the same as the char attribute. 
            Otherwise, it's one of the key value strings specified in 'Key values'. 
            If the key can't be identified, this is the string "Unidentified"
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UIKeyboardEventArgs.Code">
            <summary>
            Holds a string that identifies the physical key being pressed. 
            The value is not affected by the current keyboard layout or modifier state, so a particular key will always return the same value.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UIKeyboardEventArgs.Location">
            <summary>
            The location of the key on the device.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UIKeyboardEventArgs.Repeat">
            <summary>
            true if a key has been depressed long enough to trigger key repetition, otherwise false.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UIKeyboardEventArgs.CtrlKey">
            <summary>
            true if the control key was down when the event was fired. false otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UIKeyboardEventArgs.ShiftKey">
            <summary>
            true if the shift key was down when the event was fired. false otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UIKeyboardEventArgs.AltKey">
            <summary>
            true if the alt key was down when the event was fired. false otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UIKeyboardEventArgs.MetaKey">
            <summary>
            true if the meta key was down when the event was fired. false otherwise.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.UIMouseEventArgs">
            <summary>
            Supplies information about a mouse event that is being raised.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UIMouseEventArgs.Detail">
            <summary>
            A count of consecutive clicks that happened in a short amount of time, incremented by one.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UIMouseEventArgs.ScreenX">
            <summary>
            The X coordinate of the mouse pointer in global (screen) coordinates.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UIMouseEventArgs.ScreenY">
            <summary>
            The Y coordinate of the mouse pointer in global (screen) coordinates.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UIMouseEventArgs.ClientX">
            <summary>
            The X coordinate of the mouse pointer in local (DOM content) coordinates.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UIMouseEventArgs.ClientY">
            <summary>
            	The Y coordinate of the mouse pointer in local (DOM content) coordinates.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UIMouseEventArgs.Button">
            <summary>
            The button number that was pressed when the mouse event was fired:
            Left button=0,
            middle button=1 (if present),
            right button=2.
            For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UIMouseEventArgs.Buttons">
            <summary>
            The buttons being pressed when the mouse event was fired:
            Left button=1,
            Right button=2,
            Middle (wheel) button=4,
            4th button (typically, "Browser Back" button)=8,
            5th button (typically, "Browser Forward" button)=16.
            If two or more buttons are pressed, returns the logical sum of the values.
            E.g., if Left button and Right button are pressed, returns 3 (=1 | 2).
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UIMouseEventArgs.CtrlKey">
            <summary>
            true if the control key was down when the event was fired. false otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UIMouseEventArgs.ShiftKey">
            <summary>
            true if the shift key was down when the event was fired. false otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UIMouseEventArgs.AltKey">
            <summary>
            true if the alt key was down when the event was fired. false otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UIMouseEventArgs.MetaKey">
            <summary>
            true if the meta key was down when the event was fired. false otherwise.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.UIPointerEventArgs">
            <summary>
            Supplies information about a mouse event that is being raised.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UIPointerEventArgs.PointerId">
            <summary>
            A unique identifier for the pointer causing the event.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UIPointerEventArgs.Width">
            <summary>
            The width (magnitude on the X axis), in CSS pixels, of the contact geometry of the pointer.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UIPointerEventArgs.Height">
            <summary>
            The height (magnitude on the Y axis), in CSS pixels, of the contact geometry of the pointer.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UIPointerEventArgs.Pressure">
            <summary>
            The normalized pressure of the pointer input in the range of 0 to 1,
            where 0 and 1 represent the minimum and maximum pressure the hardware is capable of detecting, respectively.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UIPointerEventArgs.TiltX">
            <summary>
            The plane angle (in degrees, in the range of -90 to 90) between the Y-Z plane
            and the plane containing both the transducer (e.g. pen stylus) axis and the Y axis.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UIPointerEventArgs.TiltY">
            <summary>
            The plane angle (in degrees, in the range of -90 to 90) between the X-Z plane
            and the plane containing both the transducer (e.g. pen stylus) axis and the X axis.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UIPointerEventArgs.PointerType">
            <summary>
            Indicates the device type that caused the event.
            Must be one of the strings mouse, pen or touch, or an empty string.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UIPointerEventArgs.IsPrimary">
            <summary>
            Indicates if the pointer represents the primary pointer of this pointer type.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.UIProgressEventArgs">
            <summary>
            Supplies information about a progress event that is being raised.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UIProgressEventArgs.LengthComputable">
            <summary>
            Whether or not the total size of the transfer is known.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UIProgressEventArgs.Loaded">
            <summary>
            The number of bytes transferred since the beginning of the operation.
            This doesn't include headers and other overhead, but only the content itself.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UIProgressEventArgs.Total">
            <summary>
            The total number of bytes of content that will be transferred during the operation.
            If the total size is unknown, this value is zero. 
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.UITouchEventArgs">
            <summary>
            Supplies information about a touch event that is being raised.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UITouchEventArgs.Detail">
            <summary>
            A count of consecutive clicks that happened in a short amount of time, incremented by one.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UITouchEventArgs.Touches">
            <summary>
            A list of <see cref="T:Microsoft.AspNetCore.Components.UITouchPoint"/> for every point of contact currently touching the surface.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UITouchEventArgs.TargetTouches">
            <summary>
            A list of <see cref="T:Microsoft.AspNetCore.Components.UITouchPoint"/> for every point of contact that is touching the surface and started on the element that is the target of the current event.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UITouchEventArgs.ChangedTouches">
            <summary>
            A list of Touches for every point of contact which contributed to the event.
            For the touchstart event this must be a list of the touch points that just became active with the current event.
            For the touchmove event this must be a list of the touch points that have moved since the last event.
            For the touchend and touchcancel events this must be a list of the touch points that have just been removed from the surface.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UITouchEventArgs.CtrlKey">
            <summary>
            true if the control key was down when the event was fired. false otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UITouchEventArgs.ShiftKey">
            <summary>
            true if the shift key was down when the event was fired. false otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UITouchEventArgs.AltKey">
            <summary>
            true if the alt key was down when the event was fired. false otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UITouchEventArgs.MetaKey">
            <summary>
            true if the meta key was down when the event was fired. false otherwise.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.UITouchPoint">
            <summary>
            Represents a single contact point on a touch-sensitive device.
            The contact point is commonly a finger or stylus and the device may be a touchscreen or trackpad.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UITouchPoint.Identifier">
            <summary>
            A unique identifier for this Touch object.
            A given touch point (say, by a finger) will have the same identifier for the duration of its movement around the surface.
            This lets you ensure that you're tracking the same touch all the time.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UITouchPoint.ScreenX">
            <summary>
            The X coordinate of the touch point relative to the left edge of the screen.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UITouchPoint.ScreenY">
            <summary>
            The Y coordinate of the touch point relative to the top edge of the screen.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UITouchPoint.ClientX">
            <summary>
            The X coordinate of the touch point relative to the left edge of the browser viewport, not including any scroll offset.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UITouchPoint.ClientY">
            <summary>
            The Y coordinate of the touch point relative to the top edge of the browser viewport, not including any scroll offset.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UITouchPoint.PageX">
            <summary>
            The X coordinate of the touch point relative to the left edge of the document.
            Unlike <see cref="P:Microsoft.AspNetCore.Components.UITouchPoint.ClientX"/>, this value includes the horizontal scroll offset, if any.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UITouchPoint.PageY">
            <summary>
            The Y coordinate of the touch point relative to the top of the document.
            Unlike <see cref="P:Microsoft.AspNetCore.Components.UITouchPoint.ClientY"/>, this value includes the vertical scroll offset, if any.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.UIWheelEventArgs">
            <summary>
            Supplies information about a mouse wheel event that is being raised.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UIWheelEventArgs.DeltaX">
            <summary>
            The horizontal scroll amount.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UIWheelEventArgs.DeltaY">
            <summary>
            The vertical scroll amount.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UIWheelEventArgs.DeltaZ">
            <summary>
            The scroll amount for the z-axis.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.UIWheelEventArgs.DeltaMode">
            <summary>
            The unit of the delta values scroll amount. 
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.UIEventArgsRenderTreeBuilderExtensions">
            <summary>
            Extensions methods on <see cref="T:Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder"/> for event handlers.
            </summary>
            <remarks>
            <para>
            These methods enable method-group to delegate conversion for delegates and methods that accept
            types derived from <see cref="T:Microsoft.AspNetCore.Components.UIEventArgs"/>.
            </para>
            <para>
            This enhances the programming experience for using event handlers with the render tree builder
            in components written in pure C#. These extension methods make it possible to write code like:
            <code>
            builder.AddAttribute(0, "onkeypress", MyKeyPressHandler);
            </code>
            Where <c>void MyKeyPressHandler(UIKeyboardEventArgs e)</c> is a method defined in the same class.
            In this example, the author knows that the <c>onclick</c> event is associated with the
            <see cref="T:Microsoft.AspNetCore.Components.UIKeyboardEventArgs"/> event args type. The component author is responsible for 
            providing a delegate that matches the expected event args type, an error will result in a failure
            at runtime.
            </para>
            <para>
            When a component is authored in Razor (.cshtml), the Razor code generator will maintain a mapping
            between event names and event arg types that can be used to generate more strongly typed code.
            Generated code for the same case will look like:
            <code>
            builder.AddAttribute(0, "onkeypress", BindMethods.GetEventHandlerValue&lt;UIKeyboardEventArgs&gt;(MyKeyPressHandler));
            </code>
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.UIEventArgsRenderTreeBuilderExtensions.AddAttribute(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder,System.Int32,System.String,System.Action{Microsoft.AspNetCore.Components.UIChangeEventArgs})">
            <summary>
            <para>
            Appends a frame representing an <see cref="T:System.Action`1"/>-valued attribute.
            </para>
            <para>
            The attribute is associated with the most recently added element. If the value is <c>null</c> and the
            current element is not a component, the frame will be omitted.
            </para>
            </summary>
            <param name="builder">The <see cref="T:Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder"/>.</param>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.UIEventArgsRenderTreeBuilderExtensions.AddAttribute(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder,System.Int32,System.String,System.Func{Microsoft.AspNetCore.Components.UIChangeEventArgs,System.Threading.Tasks.Task})">
            <summary>
            <para>
            Appends a frame representing an <see cref="T:System.Func`2"/>-valued attribute.
            </para>
            <para>
            The attribute is associated with the most recently added element. If the value is <c>null</c> and the
            current element is not a component, the frame will be omitted.
            </para>
            </summary>
            <param name="builder">The <see cref="T:Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder"/>.</param>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.UIEventArgsRenderTreeBuilderExtensions.AddAttribute(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder,System.Int32,System.String,System.Action{Microsoft.AspNetCore.Components.UIDragEventArgs})">
            <summary>
            <para>
            Appends a frame representing an <see cref="T:System.Action`1"/>-valued attribute.
            </para>
            <para>
            The attribute is associated with the most recently added element. If the value is <c>null</c> and the
            current element is not a component, the frame will be omitted.
            </para>
            </summary>
            <param name="builder">The <see cref="T:Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder"/>.</param>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.UIEventArgsRenderTreeBuilderExtensions.AddAttribute(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder,System.Int32,System.String,System.Func{Microsoft.AspNetCore.Components.UIDragEventArgs,System.Threading.Tasks.Task})">
            <summary>
            <para>
            Appends a frame representing an <see cref="T:System.Func`2"/>-valued attribute.
            </para>
            <para>
            The attribute is associated with the most recently added element. If the value is <c>null</c> and the
            current element is not a component, the frame will be omitted.
            </para>
            </summary>
            <param name="builder">The <see cref="T:Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder"/>.</param>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.UIEventArgsRenderTreeBuilderExtensions.AddAttribute(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder,System.Int32,System.String,System.Action{Microsoft.AspNetCore.Components.UIClipboardEventArgs})">
            <summary>
            <para>
            Appends a frame representing an <see cref="T:System.Action`1"/>-valued attribute.
            </para>
            <para>
            The attribute is associated with the most recently added element. If the value is <c>null</c> and the
            current element is not a component, the frame will be omitted.
            </para>
            </summary>
            <param name="builder">The <see cref="T:Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder"/>.</param>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.UIEventArgsRenderTreeBuilderExtensions.AddAttribute(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder,System.Int32,System.String,System.Func{Microsoft.AspNetCore.Components.UIClipboardEventArgs,System.Threading.Tasks.Task})">
            <summary>
            <para>
            Appends a frame representing an <see cref="T:System.Func`2"/>-valued attribute.
            </para>
            <para>
            The attribute is associated with the most recently added element. If the value is <c>null</c> and the
            current element is not a component, the frame will be omitted.
            </para>
            </summary>
            <param name="builder">The <see cref="T:Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder"/>.</param>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.UIEventArgsRenderTreeBuilderExtensions.AddAttribute(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder,System.Int32,System.String,System.Action{Microsoft.AspNetCore.Components.UIErrorEventArgs})">
            <summary>
            <para>
            Appends a frame representing an <see cref="T:System.Action`1"/>-valued attribute.
            </para>
            <para>
            The attribute is associated with the most recently added element. If the value is <c>null</c> and the
            current element is not a component, the frame will be omitted.
            </para>
            </summary>
            <param name="builder">The <see cref="T:Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder"/>.</param>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.UIEventArgsRenderTreeBuilderExtensions.AddAttribute(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder,System.Int32,System.String,System.Func{Microsoft.AspNetCore.Components.UIErrorEventArgs,System.Threading.Tasks.Task})">
            <summary>
            <para>
            Appends a frame representing an <see cref="T:System.Func`2"/>-valued attribute.
            </para>
            <para>
            The attribute is associated with the most recently added element. If the value is <c>null</c> and the
            current element is not a component, the frame will be omitted.
            </para>
            </summary>
            <param name="builder">The <see cref="T:Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder"/>.</param>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.UIEventArgsRenderTreeBuilderExtensions.AddAttribute(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder,System.Int32,System.String,System.Action{Microsoft.AspNetCore.Components.UIFocusEventArgs})">
            <summary>
            <para>
            Appends a frame representing an <see cref="T:System.Action`1"/>-valued attribute.
            </para>
            <para>
            The attribute is associated with the most recently added element. If the value is <c>null</c> and the
            current element is not a component, the frame will be omitted.
            </para>
            </summary>
            <param name="builder">The <see cref="T:Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder"/>.</param>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.UIEventArgsRenderTreeBuilderExtensions.AddAttribute(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder,System.Int32,System.String,System.Func{Microsoft.AspNetCore.Components.UIFocusEventArgs,System.Threading.Tasks.Task})">
            <summary>
            <para>
            Appends a frame representing an <see cref="T:System.Func`2"/>-valued attribute.
            </para>
            <para>
            The attribute is associated with the most recently added element. If the value is <c>null</c> and the
            current element is not a component, the frame will be omitted.
            </para>
            </summary>
            <param name="builder">The <see cref="T:Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder"/>.</param>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.UIEventArgsRenderTreeBuilderExtensions.AddAttribute(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder,System.Int32,System.String,System.Action{Microsoft.AspNetCore.Components.UIKeyboardEventArgs})">
            <summary>
            <para>
            Appends a frame representing an <see cref="T:System.Action`1"/>-valued attribute.
            </para>
            <para>
            The attribute is associated with the most recently added element. If the value is <c>null</c> and the
            current element is not a component, the frame will be omitted.
            </para>
            </summary>
            <param name="builder">The <see cref="T:Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder"/>.</param>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.UIEventArgsRenderTreeBuilderExtensions.AddAttribute(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder,System.Int32,System.String,System.Func{Microsoft.AspNetCore.Components.UIKeyboardEventArgs,System.Threading.Tasks.Task})">
            <summary>
            <para>
            Appends a frame representing an <see cref="T:System.Func`2"/>-valued attribute.
            </para>
            <para>
            The attribute is associated with the most recently added element. If the value is <c>null</c> and the
            current element is not a component, the frame will be omitted.
            </para>
            </summary>
            <param name="builder">The <see cref="T:Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder"/>.</param>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.UIEventArgsRenderTreeBuilderExtensions.AddAttribute(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder,System.Int32,System.String,System.Action{Microsoft.AspNetCore.Components.UIMouseEventArgs})">
            <summary>
            <para>
            Appends a frame representing an <see cref="T:System.Action`1"/>-valued attribute.
            </para>
            <para>
            The attribute is associated with the most recently added element. If the value is <c>null</c> and the
            current element is not a component, the frame will be omitted.
            </para>
            </summary>
            <param name="builder">The <see cref="T:Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder"/>.</param>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.UIEventArgsRenderTreeBuilderExtensions.AddAttribute(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder,System.Int32,System.String,System.Func{Microsoft.AspNetCore.Components.UIMouseEventArgs,System.Threading.Tasks.Task})">
            <summary>
            <para>
            Appends a frame representing an <see cref="T:System.Func`2"/>-valued attribute.
            </para>
            <para>
            The attribute is associated with the most recently added element. If the value is <c>null</c> and the
            current element is not a component, the frame will be omitted.
            </para>
            </summary>
            <param name="builder">The <see cref="T:Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder"/>.</param>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.UIEventArgsRenderTreeBuilderExtensions.AddAttribute(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder,System.Int32,System.String,System.Action{Microsoft.AspNetCore.Components.UIPointerEventArgs})">
            <summary>
            <para>
            Appends a frame representing an <see cref="T:System.Action`1"/>-valued attribute.
            </para>
            <para>
            The attribute is associated with the most recently added element. If the value is <c>null</c> and the
            current element is not a component, the frame will be omitted.
            </para>
            </summary>
            <param name="builder">The <see cref="T:Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder"/>.</param>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.UIEventArgsRenderTreeBuilderExtensions.AddAttribute(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder,System.Int32,System.String,System.Func{Microsoft.AspNetCore.Components.UIPointerEventArgs,System.Threading.Tasks.Task})">
            <summary>
            <para>
            Appends a frame representing an <see cref="T:System.Func`2"/>-valued attribute.
            </para>
            <para>
            The attribute is associated with the most recently added element. If the value is <c>null</c> and the
            current element is not a component, the frame will be omitted.
            </para>
            </summary>
            <param name="builder">The <see cref="T:Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder"/>.</param>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.UIEventArgsRenderTreeBuilderExtensions.AddAttribute(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder,System.Int32,System.String,System.Action{Microsoft.AspNetCore.Components.UIProgressEventArgs})">
            <summary>
            <para>
            Appends a frame representing an <see cref="T:System.Action`1"/>-valued attribute.
            </para>
            <para>
            The attribute is associated with the most recently added element. If the value is <c>null</c> and the
            current element is not a component, the frame will be omitted.
            </para>
            </summary>
            <param name="builder">The <see cref="T:Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder"/>.</param>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.UIEventArgsRenderTreeBuilderExtensions.AddAttribute(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder,System.Int32,System.String,System.Func{Microsoft.AspNetCore.Components.UIProgressEventArgs,System.Threading.Tasks.Task})">
            <summary>
            <para>
            Appends a frame representing an <see cref="T:System.Func`2"/>-valued attribute.
            </para>
            <para>
            The attribute is associated with the most recently added element. If the value is <c>null</c> and the
            current element is not a component, the frame will be omitted.
            </para>
            </summary>
            <param name="builder">The <see cref="T:Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder"/>.</param>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.UIEventArgsRenderTreeBuilderExtensions.AddAttribute(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder,System.Int32,System.String,System.Action{Microsoft.AspNetCore.Components.UITouchEventArgs})">
            <summary>
            <para>
            Appends a frame representing an <see cref="T:System.Action`1"/>-valued attribute.
            </para>
            <para>
            The attribute is associated with the most recently added element. If the value is <c>null</c> and the
            current element is not a component, the frame will be omitted.
            </para>
            </summary>
            <param name="builder">The <see cref="T:Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder"/>.</param>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.UIEventArgsRenderTreeBuilderExtensions.AddAttribute(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder,System.Int32,System.String,System.Func{Microsoft.AspNetCore.Components.UITouchEventArgs,System.Threading.Tasks.Task})">
            <summary>
            <para>
            Appends a frame representing an <see cref="T:System.Func`2"/>-valued attribute.
            </para>
            <para>
            The attribute is associated with the most recently added element. If the value is <c>null</c> and the
            current element is not a component, the frame will be omitted.
            </para>
            </summary>
            <param name="builder">The <see cref="T:Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder"/>.</param>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.UIEventArgsRenderTreeBuilderExtensions.AddAttribute(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder,System.Int32,System.String,System.Action{Microsoft.AspNetCore.Components.UIWheelEventArgs})">
            <summary>
            <para>
            Appends a frame representing an <see cref="T:System.Action`1"/>-valued attribute.
            </para>
            <para>
            The attribute is associated with the most recently added element. If the value is <c>null</c> and the
            current element is not a component, the frame will be omitted.
            </para>
            </summary>
            <param name="builder">The <see cref="T:Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder"/>.</param>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.UIEventArgsRenderTreeBuilderExtensions.AddAttribute(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder,System.Int32,System.String,System.Func{Microsoft.AspNetCore.Components.UIWheelEventArgs,System.Threading.Tasks.Task})">
            <summary>
            <para>
            Appends a frame representing an <see cref="T:System.Func`2"/>-valued attribute.
            </para>
            <para>
            The attribute is associated with the most recently added element. If the value is <c>null</c> and the
            current element is not a component, the frame will be omitted.
            </para>
            </summary>
            <param name="builder">The <see cref="T:Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder"/>.</param>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
        </member>
    </members>
</doc>
