// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

[assembly:System.Reflection.AssemblyVersionAttribute("0.0.0.0")]
[assembly:System.Diagnostics.DebuggableAttribute(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
namespace System.Reactive.Linq
{
    public static partial class QbservableAliases
    {
        public static System.Reactive.Linq.IQbservable<TSource> Filter<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, bool>> predicate) { throw null; }
        public static System.Reactive.Linq.IQbservable<TSource> Filter<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, int, bool>> predicate) { throw null; }
        public static System.Reactive.Linq.IQbservable<TOther> FlatMap<TSource, TOther>(this System.Reactive.Linq.IQbservable<TSource> source, System.IObservable<TOther> other) { throw null; }
        public static System.Reactive.Linq.IQbservable<TResult> FlatMap<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>> selector) { throw null; }
        public static System.Reactive.Linq.IQbservable<TResult> FlatMap<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, int, System.Collections.Generic.IEnumerable<TResult>>> selector) { throw null; }
        public static System.Reactive.Linq.IQbservable<TResult> FlatMap<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, int, System.IObservable<TResult>>> selector) { throw null; }
        public static System.Reactive.Linq.IQbservable<TResult> FlatMap<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, int, System.IObservable<TResult>>> onNext, System.Linq.Expressions.Expression<System.Func<System.Exception, System.IObservable<TResult>>> onError, System.Linq.Expressions.Expression<System.Func<System.IObservable<TResult>>> onCompleted) { throw null; }
        public static System.Reactive.Linq.IQbservable<TResult> FlatMap<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, int, System.Threading.CancellationToken, System.Threading.Tasks.Task<TResult>>> selector) { throw null; }
        public static System.Reactive.Linq.IQbservable<TResult> FlatMap<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, int, System.Threading.Tasks.Task<TResult>>> selector) { throw null; }
        public static System.Reactive.Linq.IQbservable<TResult> FlatMap<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.IObservable<TResult>>> selector) { throw null; }
        public static System.Reactive.Linq.IQbservable<TResult> FlatMap<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.IObservable<TResult>>> onNext, System.Linq.Expressions.Expression<System.Func<System.Exception, System.IObservable<TResult>>> onError, System.Linq.Expressions.Expression<System.Func<System.IObservable<TResult>>> onCompleted) { throw null; }
        public static System.Reactive.Linq.IQbservable<TResult> FlatMap<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.Task<TResult>>> selector) { throw null; }
        public static System.Reactive.Linq.IQbservable<TResult> FlatMap<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Threading.Tasks.Task<TResult>>> selector) { throw null; }
        public static System.Reactive.Linq.IQbservable<TResult> FlatMap<TSource, TCollection, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Collections.Generic.IEnumerable<TCollection>>> collectionSelector, System.Linq.Expressions.Expression<System.Func<TSource, TCollection, TResult>> resultSelector) { throw null; }
        public static System.Reactive.Linq.IQbservable<TResult> FlatMap<TSource, TCollection, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, int, System.Collections.Generic.IEnumerable<TCollection>>> collectionSelector, System.Linq.Expressions.Expression<System.Func<TSource, int, TCollection, int, TResult>> resultSelector) { throw null; }
        public static System.Reactive.Linq.IQbservable<TResult> FlatMap<TSource, TCollection, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, int, System.IObservable<TCollection>>> collectionSelector, System.Linq.Expressions.Expression<System.Func<TSource, int, TCollection, int, TResult>> resultSelector) { throw null; }
        public static System.Reactive.Linq.IQbservable<TResult> FlatMap<TSource, TTaskResult, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, int, System.Threading.CancellationToken, System.Threading.Tasks.Task<TTaskResult>>> taskSelector, System.Linq.Expressions.Expression<System.Func<TSource, int, TTaskResult, TResult>> resultSelector) { throw null; }
        public static System.Reactive.Linq.IQbservable<TResult> FlatMap<TSource, TTaskResult, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, int, System.Threading.Tasks.Task<TTaskResult>>> taskSelector, System.Linq.Expressions.Expression<System.Func<TSource, int, TTaskResult, TResult>> resultSelector) { throw null; }
        public static System.Reactive.Linq.IQbservable<TResult> FlatMap<TSource, TCollection, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.IObservable<TCollection>>> collectionSelector, System.Linq.Expressions.Expression<System.Func<TSource, TCollection, TResult>> resultSelector) { throw null; }
        public static System.Reactive.Linq.IQbservable<TResult> FlatMap<TSource, TTaskResult, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.Task<TTaskResult>>> taskSelector, System.Linq.Expressions.Expression<System.Func<TSource, TTaskResult, TResult>> resultSelector) { throw null; }
        public static System.Reactive.Linq.IQbservable<TResult> FlatMap<TSource, TTaskResult, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Threading.Tasks.Task<TTaskResult>>> taskSelector, System.Linq.Expressions.Expression<System.Func<TSource, TTaskResult, TResult>> resultSelector) { throw null; }
        public static System.Reactive.Linq.IQbservable<TResult> Map<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, int, TResult>> selector) { throw null; }
        public static System.Reactive.Linq.IQbservable<TResult> Map<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TResult>> selector) { throw null; }
    }
}
namespace System.Reactive.Observable.Aliases
{
    public static partial class QueryLanguage
    {
        public static System.IObservable<TSource> Filter<TSource>(this System.IObservable<TSource> source, System.Func<TSource, bool> predicate) { throw null; }
        public static System.IObservable<TSource> Filter<TSource>(this System.IObservable<TSource> source, System.Func<TSource, int, bool> predicate) { throw null; }
        public static System.IObservable<TResult> FlatMap<TSource, TResult>(this System.IObservable<TSource> source, System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>> selector) { throw null; }
        public static System.IObservable<TResult> FlatMap<TSource, TResult>(this System.IObservable<TSource> source, System.Func<TSource, int, System.Collections.Generic.IEnumerable<TResult>> selector) { throw null; }
        public static System.IObservable<TResult> FlatMap<TSource, TResult>(this System.IObservable<TSource> source, System.Func<TSource, int, System.IObservable<TResult>> selector) { throw null; }
        public static System.IObservable<TResult> FlatMap<TSource, TResult>(this System.IObservable<TSource> source, System.Func<TSource, int, System.IObservable<TResult>> onNext, System.Func<System.Exception, System.IObservable<TResult>> onError, System.Func<System.IObservable<TResult>> onCompleted) { throw null; }
        public static System.IObservable<TResult> FlatMap<TSource, TResult>(this System.IObservable<TSource> source, System.Func<TSource, int, System.Threading.CancellationToken, System.Threading.Tasks.Task<TResult>> selector) { throw null; }
        public static System.IObservable<TResult> FlatMap<TSource, TResult>(this System.IObservable<TSource> source, System.Func<TSource, int, System.Threading.Tasks.Task<TResult>> selector) { throw null; }
        public static System.IObservable<TResult> FlatMap<TSource, TResult>(this System.IObservable<TSource> source, System.Func<TSource, System.IObservable<TResult>> selector) { throw null; }
        public static System.IObservable<TResult> FlatMap<TSource, TResult>(this System.IObservable<TSource> source, System.Func<TSource, System.IObservable<TResult>> onNext, System.Func<System.Exception, System.IObservable<TResult>> onError, System.Func<System.IObservable<TResult>> onCompleted) { throw null; }
        public static System.IObservable<TResult> FlatMap<TSource, TResult>(this System.IObservable<TSource> source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.Task<TResult>> selector) { throw null; }
        public static System.IObservable<TResult> FlatMap<TSource, TResult>(this System.IObservable<TSource> source, System.Func<TSource, System.Threading.Tasks.Task<TResult>> selector) { throw null; }
        public static System.IObservable<TOther> FlatMap<TSource, TOther>(this System.IObservable<TSource> source, System.IObservable<TOther> other) { throw null; }
        public static System.IObservable<TResult> FlatMap<TSource, TCollection, TResult>(this System.IObservable<TSource> source, System.Func<TSource, System.Collections.Generic.IEnumerable<TCollection>> collectionSelector, System.Func<TSource, TCollection, TResult> resultSelector) { throw null; }
        public static System.IObservable<TResult> FlatMap<TSource, TCollection, TResult>(this System.IObservable<TSource> source, System.Func<TSource, int, System.Collections.Generic.IEnumerable<TCollection>> collectionSelector, System.Func<TSource, int, TCollection, int, TResult> resultSelector) { throw null; }
        public static System.IObservable<TResult> FlatMap<TSource, TCollection, TResult>(this System.IObservable<TSource> source, System.Func<TSource, int, System.IObservable<TCollection>> collectionSelector, System.Func<TSource, int, TCollection, int, TResult> resultSelector) { throw null; }
        public static System.IObservable<TResult> FlatMap<TSource, TTaskResult, TResult>(this System.IObservable<TSource> source, System.Func<TSource, int, System.Threading.CancellationToken, System.Threading.Tasks.Task<TTaskResult>> taskSelector, System.Func<TSource, int, TTaskResult, TResult> resultSelector) { throw null; }
        public static System.IObservable<TResult> FlatMap<TSource, TTaskResult, TResult>(this System.IObservable<TSource> source, System.Func<TSource, int, System.Threading.Tasks.Task<TTaskResult>> taskSelector, System.Func<TSource, int, TTaskResult, TResult> resultSelector) { throw null; }
        public static System.IObservable<TResult> FlatMap<TSource, TCollection, TResult>(this System.IObservable<TSource> source, System.Func<TSource, System.IObservable<TCollection>> collectionSelector, System.Func<TSource, TCollection, TResult> resultSelector) { throw null; }
        public static System.IObservable<TResult> FlatMap<TSource, TTaskResult, TResult>(this System.IObservable<TSource> source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.Task<TTaskResult>> taskSelector, System.Func<TSource, TTaskResult, TResult> resultSelector) { throw null; }
        public static System.IObservable<TResult> FlatMap<TSource, TTaskResult, TResult>(this System.IObservable<TSource> source, System.Func<TSource, System.Threading.Tasks.Task<TTaskResult>> taskSelector, System.Func<TSource, TTaskResult, TResult> resultSelector) { throw null; }
        public static System.IObservable<TResult> Map<TSource, TResult>(this System.IObservable<TSource> source, System.Func<TSource, int, TResult> selector) { throw null; }
        public static System.IObservable<TResult> Map<TSource, TResult>(this System.IObservable<TSource> source, System.Func<TSource, TResult> selector) { throw null; }
    }
}
