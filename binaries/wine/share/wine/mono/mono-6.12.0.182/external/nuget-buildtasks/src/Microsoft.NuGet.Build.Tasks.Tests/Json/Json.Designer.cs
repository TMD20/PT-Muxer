//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.NuGet.Build.Tasks.Tests.Json {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Json {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Json() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Microsoft.NuGet.Build.Tasks.Tests.Json.Json", typeof(Json).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {
        ///  &quot;locked&quot;: false,
        ///  &quot;version&quot;: -9996,
        ///  &quot;targets&quot;: {
        ///    &quot;.NETCore,Version=v5.0&quot;: {
        ///      &quot;Microsoft.AnalyzerPowerPack/1.0.0&quot;: {
        ///        &quot;frameworkAssemblies&quot;: [
        ///          &quot;System&quot;
        ///        ]
        ///    },
        ///      &quot;Microsoft.CodeAnalysis.Analyzers/1.0.0&quot;: {
        ///        &quot;frameworkAssemblies&quot;: [
        ///          &quot;System&quot;
        ///        ]
        ///},
        ///      &quot;System.Runtime.Analyzers/1.0.0&quot;: {
        ///        &quot;frameworkAssemblies&quot;: [
        ///          &quot;System&quot;
        ///        ]
        ///      },
        ///      &quot;System.Runtime.InteropServices.Analyzers/1.0.0&quot;: {
        ///     [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string analyzers {
            get {
                return ResourceManager.GetString("analyzers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {
        ///  &quot;locked&quot;: false,
        ///  &quot;version&quot;: 1,
        ///  &quot;targets&quot;: {
        ///    &quot;.NETFramework,Version=v4.5.2&quot;: {
        ///      &quot;FluentAssertions/3.4.1&quot;: {
        ///        &quot;frameworkAssemblies&quot;: [
        ///          &quot;System.Xml&quot;,
        ///          &quot;System.Xml.Linq&quot;
        ///        ],
        ///        &quot;compile&quot;: {
        ///          &quot;lib/net45/FluentAssertions.Core.dll&quot;: {},
        ///          &quot;lib/net45/FluentAssertions.dll&quot;: {}
        ///        },
        ///        &quot;runtime&quot;: {
        ///          &quot;lib/net45/FluentAssertions.Core.dll&quot;: {},
        ///          &quot;lib/net45/FluentAssertions.dll&quot;: {}
        ///        }
        ///      }
        ///   [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string FluentAssertions {
            get {
                return ResourceManager.GetString("FluentAssertions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {
        ///  &quot;locked&quot;: false,
        ///  &quot;version&quot;: 1,
        ///  &quot;targets&quot;: {
        ///    &quot;UAP,Version=v10.0&quot;: {
        ///      &quot;FluentAssertions/3.4.1&quot;: {
        ///        &quot;frameworkAssemblies&quot;: [
        ///          &quot;System.Xml&quot;,
        ///          &quot;System.Xml.Linq&quot;
        ///        ],
        ///        &quot;compile&quot;: {
        ///          &quot;lib/win8/FluentAssertions.Core.dll&quot;: {},
        ///          &quot;lib/win8/FluentAssertions.dll&quot;: {}
        ///        },
        ///        &quot;runtime&quot;: {
        ///          &quot;lib/win8/FluentAssertions.Core.dll&quot;: {},
        ///          &quot;lib/win8/FluentAssertions.dll&quot;: {}
        ///        }
        ///      },
        ///      &quot;Microsoft [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string FluentAssertionsAndWin10 {
            get {
                return ResourceManager.GetString("FluentAssertionsAndWin10", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {
        ///  &quot;locked&quot;: false,
        ///  &quot;version&quot;: 2,
        ///  &quot;targets&quot;: {
        ///    &quot;.NETFramework,Version=v4.5&quot;: {
        ///      &quot;Newtonsoft.Json/9.0.1&quot;: {
        ///        &quot;type&quot;: &quot;package&quot;,
        ///        &quot;compile&quot;: {
        ///          &quot;lib/net45/Newtonsoft.Json.dll&quot;: {}
        ///        },
        ///        &quot;runtime&quot;: {
        ///          &quot;lib/net45/Newtonsoft.Json.dll&quot;: {}
        ///        }
        ///      }
        ///    }
        ///  },
        ///  &quot;libraries&quot;: {
        ///    &quot;Newtonsoft.Json/9.0.1&quot;: {
        ///      &quot;sha512&quot;: &quot;KGsYQdS2zLH+H8x2cZaSI7e+YZ4SFIbyy1YJQYl6GYBWjf5o4H1A68nxyq+WTyVSOJQ4GqS/DiPE+UseUizgMg==&quot;,
        ///      &quot;type&quot;: &quot; [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string LockFileWithWithSpecifiedPackageFolders {
            get {
                return ResourceManager.GetString("LockFileWithWithSpecifiedPackageFolders", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {
        ///  &quot;locked&quot;: false,
        ///  &quot;version&quot;: 2,
        ///  &quot;targets&quot;: {
        ///    &quot;.NETFramework,Version=v4.5&quot;: {
        ///      &quot;Newtonsoft.Json/9.0.1&quot;: {
        ///        &quot;type&quot;: &quot;package&quot;,
        ///        &quot;compile&quot;: {
        ///          &quot;lib/net45/Newtonsoft.Json.dll&quot;: {}
        ///        },
        ///        &quot;runtime&quot;: {
        ///          &quot;lib/net45/Newtonsoft.Json.dll&quot;: {}
        ///        }
        ///      }
        ///    },
        ///    &quot;.NETFramework,Version=v4.6&quot;: {
        ///      &quot;FluentAssertions/3.4.1&quot;: {
        ///        &quot;frameworkAssemblies&quot;: [
        ///          &quot;System.Xml&quot;,
        ///          &quot;System.Xml.Linq&quot;
        ///        ],
        ///        [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string MultipleProjectFileDependencyGroups {
            get {
                return ResourceManager.GetString("MultipleProjectFileDependencyGroups", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {
        ///  &quot;locked&quot;: false,
        ///  &quot;version&quot;: 2,
        ///  &quot;targets&quot;: {
        ///    &quot;.NETFramework,Version=v4.5&quot;: {
        ///      &quot;Newtonsoft.Json/9.0.1&quot;: {
        ///        &quot;type&quot;: &quot;package&quot;,
        ///        &quot;compile&quot;: {
        ///          &quot;lib/net45/Newtonsoft.Json.dll&quot;: {}
        ///        },
        ///        &quot;runtime&quot;: {
        ///          &quot;lib/net45/Newtonsoft.Json.dll&quot;: {}
        ///        }
        ///      }
        ///    },
        ///    &quot;.NETFramework,Version=v4.6&quot;: {
        ///      &quot;FluentAssertions/3.4.1&quot;: {
        ///        &quot;frameworkAssemblies&quot;: [
        ///          &quot;System.Xml&quot;,
        ///          &quot;System.Xml.Linq&quot;
        ///        ],
        ///        [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string MultipleProjectFileDependencyGroups_CaseMismatch {
            get {
                return ResourceManager.GetString("MultipleProjectFileDependencyGroups_CaseMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {
        ///  &quot;locked&quot;: false,
        ///  &quot;version&quot;: 1,
        ///  &quot;targets&quot;: {
        ///    &quot;.NETCore,Version=v5.0&quot;: {
        ///      &quot;Microsoft.NETCore.Platforms/1.0.0&quot;: {},
        ///      &quot;Win2D/0.0.23-local&quot;: {
        ///        &quot;compile&quot;: {
        ///          &quot;lib/netcore50/Microsoft.Graphics.Canvas.winmd&quot;: {}
        ///        },
        ///        &quot;runtime&quot;: {
        ///          &quot;lib/netcore50/Microsoft.Graphics.Canvas.winmd&quot;: {}
        ///        }
        ///      }
        ///    },
        ///    &quot;.NETCore,Version=v5.0/win10-arm&quot;: {
        ///      &quot;Microsoft.NETCore.Platforms/1.0.0&quot;: {},
        ///      &quot;Win2D/0.0.23-local&quot;: {
        ///        &quot;compi [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string nativeWinMD {
            get {
                return ResourceManager.GetString("nativeWinMD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {
        ///  &quot;version&quot;: 2,
        ///  &quot;targets&quot;: {
        ///    &quot;.NETFramework,Version=v4.5.2&quot;: {
        ///      &quot;log4net/2.0.7&quot;: {
        ///        &quot;type&quot;: &quot;package&quot;,
        ///        &quot;compile&quot;: {
        ///          &quot;lib/net45-full/log4net.dll&quot;: {}
        ///        },
        ///        &quot;runtime&quot;: {
        ///          &quot;lib/net45-full/log4net.dll&quot;: {}
        ///        }
        ///      },
        ///      &quot;Newtonsoft.Json/9.0.1&quot;: {
        ///        &quot;type&quot;: &quot;package&quot;,
        ///        &quot;compile&quot;: {
        ///          &quot;lib/net45/Newtonsoft.Json.dll&quot;: {}
        ///        },
        ///        &quot;runtime&quot;: {
        ///          &quot;lib/net45/Newtonsoft.Json.dll&quot;: {}
        ///       [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ProjectDependency {
            get {
                return ResourceManager.GetString("ProjectDependency", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {
        ///  &quot;locked&quot;: false,
        ///  &quot;version&quot;: -9996,
        ///  &quot;targets&quot;: {
        ///    &quot;.NETCore,Version=v5.0&quot;: {
        ///      &quot;Microsoft.ApplicationInsights/0.17.0&quot;: {
        ///        &quot;compile&quot;: {
        ///          &quot;lib/portable-win81+wpa81/Microsoft.ApplicationInsights.dll&quot;: {}
        ///        },
        ///        &quot;runtime&quot;: {
        ///          &quot;lib/portable-win81+wpa81/Microsoft.ApplicationInsights.dll&quot;: {}
        ///        }
        ///      },
        ///      &quot;Microsoft.ApplicationInsights.PersistenceChannel/0.17.0&quot;: {
        ///        &quot;dependencies&quot;: {
        ///          &quot;Microsoft.ApplicationInsights&quot;: &quot;0.1 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Win10 {
            get {
                return ResourceManager.GetString("Win10", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {
        ///  &quot;locked&quot;: false,
        ///  &quot;version&quot;: 1,
        ///  &quot;targets&quot;: {
        ///    &quot;.NETCore,Version=v5.0&quot;: {
        ///      &quot;Microsoft.ApplicationInsights/1.0.0&quot;: {
        ///        &quot;compile&quot;: {
        ///          &quot;lib/portable-win81+wpa81/Microsoft.ApplicationInsights.dll&quot;: {}
        ///        },
        ///        &quot;runtime&quot;: {
        ///          &quot;lib/portable-win81+wpa81/Microsoft.ApplicationInsights.dll&quot;: {}
        ///        }
        ///      },
        ///      &quot;Microsoft.ApplicationInsights.PersistenceChannel/1.0.0&quot;: {
        ///        &quot;dependencies&quot;: {
        ///          &quot;Microsoft.ApplicationInsights&quot;: &quot;[1.0.0, ) [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Win10_Edm {
            get {
                return ResourceManager.GetString("Win10_Edm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {
        ///  &quot;locked&quot;: false,
        ///  &quot;version&quot;: 1,
        ///  &quot;targets&quot;: {
        ///    &quot;.NETCore,Version=v5.0&quot;: {
        ///      &quot;Microsoft.CSharp/4.0.0-beta-23106&quot;: {
        ///        &quot;dependencies&quot;: {
        ///          &quot;System.Runtime&quot;: &quot;[4.0.20-beta-23106, )&quot;,
        ///          &quot;System.Runtime.InteropServices&quot;: &quot;[4.0.20-beta-23106, )&quot;,
        ///          &quot;System.Resources.ResourceManager&quot;: &quot;[4.0.0-beta-23106, )&quot;,
        ///          &quot;System.Dynamic.Runtime&quot;: &quot;[4.0.0-beta-23106, )&quot;,
        ///          &quot;System.Linq.Expressions&quot;: &quot;[4.0.0-beta-23106, )&quot;,
        ///          &quot;System.Linq&quot;: &quot;[4.0.0- [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Win10_xunit {
            get {
                return ResourceManager.GetString("Win10_xunit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] WithoutTargets_assets {
            get {
                object obj = ResourceManager.GetObject("WithoutTargets_assets", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] WithTargets_assets {
            get {
                object obj = ResourceManager.GetObject("WithTargets_assets", resourceCulture);
                return ((byte[])(obj));
            }
        }
    }
}
