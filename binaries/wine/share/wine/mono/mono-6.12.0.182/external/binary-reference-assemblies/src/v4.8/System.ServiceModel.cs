// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

[assembly:System.Reflection.AssemblyVersionAttribute("4.0.0.0")]
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
[assembly:System.Reflection.AssemblyCompanyAttribute("Mono development team")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("(c) Various Mono authors")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.ServiceModel.dll")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.ServiceModel.dll")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.8.3761.0")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.8.3761.0")]
[assembly:System.Reflection.AssemblyProductAttribute("Mono Common Language Infrastructure")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.ServiceModel.dll")]
[assembly:System.Resources.NeutralResourcesLanguageAttribute("en-US")]
[assembly:System.Resources.SatelliteContractVersionAttribute("4.0.0.0")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Runtime.InteropServices.ComCompatibleVersionAttribute(1, 0, 3300, 0)]
[assembly:System.Runtime.InteropServices.ComVisibleAttribute(false)]
[assembly:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute(System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory | System.Runtime.InteropServices.DllImportSearchPath.System32)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
[assembly:System.Security.SecurityCriticalAttribute]
[assembly:System.Security.SecurityRulesAttribute(System.Security.SecurityRuleSet.Level1)]
[assembly:System.Windows.Markup.XmlnsDefinitionAttribute("http://schemas.microsoft.com/netfx/2009/xaml/servicemodel", "System.ServiceModel")]
[assembly:System.Windows.Markup.XmlnsDefinitionAttribute("http://schemas.microsoft.com/netfx/2009/xaml/servicemodel", "System.ServiceModel.Channels")]
[assembly:System.Windows.Markup.XmlnsDefinitionAttribute("http://schemas.microsoft.com/netfx/2009/xaml/servicemodel", "System.ServiceModel.Description")]
[assembly:System.Windows.Markup.XmlnsDefinitionAttribute("http://schemas.microsoft.com/netfx/2009/xaml/servicemodel", "System.ServiceModel.Security")]
[assembly:System.Security.Permissions.SecurityPermissionAttribute(System.Security.Permissions.SecurityAction.RequestMinimum, SkipVerification=true)]
[assembly:System.Runtime.CompilerServices.TypeForwardedToAttribute(typeof(System.ServiceModel.Activation.HostedTransportConfiguration))]
[assembly:System.Runtime.CompilerServices.TypeForwardedToAttribute(typeof(System.ServiceModel.Activation.ServiceBuildProvider))]
[assembly:System.Runtime.CompilerServices.TypeForwardedToAttribute(typeof(System.ServiceModel.Activation.ServiceHostFactory))]
[assembly:System.Runtime.CompilerServices.TypeForwardedToAttribute(typeof(System.ServiceModel.Security.BinarySecretKeyIdentifierClause))]
[assembly:System.Runtime.CompilerServices.TypeForwardedToAttribute(typeof(System.ServiceModel.Security.EncryptedKey))]
[assembly:System.Runtime.CompilerServices.TypeForwardedToAttribute(typeof(System.ServiceModel.Security.EncryptedKeyHashIdentifierClause))]
[assembly:System.Runtime.CompilerServices.TypeForwardedToAttribute(typeof(System.ServiceModel.Security.EncryptedType))]
[assembly:System.Runtime.CompilerServices.TypeForwardedToAttribute(typeof(System.ServiceModel.Security.ISspiNegotiation))]
[assembly:System.Runtime.CompilerServices.TypeForwardedToAttribute(typeof(System.ServiceModel.Security.ISspiNegotiationInfo))]
[assembly:System.Runtime.CompilerServices.TypeForwardedToAttribute(typeof(System.ServiceModel.Security.KeyNameIdentifierClause))]
[assembly:System.Runtime.CompilerServices.TypeForwardedToAttribute(typeof(System.ServiceModel.Security.ReferenceList))]
[assembly:System.Runtime.CompilerServices.TypeForwardedToAttribute(typeof(System.ServiceModel.Security.RelAssertionDirectKeyIdentifierClause))]
[assembly:System.Runtime.CompilerServices.TypeForwardedToAttribute(typeof(System.ServiceModel.Security.SamlAssertionDirectKeyIdentifierClause))]
[assembly:System.Runtime.CompilerServices.TypeForwardedToAttribute(typeof(System.ServiceModel.Security.SecurityContextKeyIdentifierClause))]
[assembly:System.Runtime.CompilerServices.TypeForwardedToAttribute(typeof(System.ServiceModel.Security.Tokens.BinarySecretSecurityToken))]
[assembly:System.Runtime.CompilerServices.TypeForwardedToAttribute(typeof(System.ServiceModel.Security.Tokens.BufferedGenericXmlSecurityToken))]
[assembly:System.Runtime.CompilerServices.TypeForwardedToAttribute(typeof(System.ServiceModel.Security.Tokens.WrappedKeySecurityToken))]
[assembly:System.Runtime.CompilerServices.TypeForwardedToAttribute(typeof(System.ServiceModel.Security.X509CertificateValidationMode))]
[assembly:System.Runtime.CompilerServices.TypeForwardedToAttribute(typeof(System.ServiceModel.ServiceHostingEnvironment))]
namespace System
{
    [System.Runtime.CompilerServices.TypeForwardedFromAttribute("System.ServiceModel.Web, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
    public partial class UriTemplate
    {
        public UriTemplate(string template) { }
        public UriTemplate(string template, bool ignoreTrailingSlash) { }
        public UriTemplate(string template, bool ignoreTrailingSlash, System.Collections.Generic.IDictionary<string, string> additionalDefaults) { }
        public UriTemplate(string template, System.Collections.Generic.IDictionary<string, string> additionalDefaults) { }
        public System.Collections.Generic.IDictionary<string, string> Defaults { get { throw null; } }
        public bool IgnoreTrailingSlash { get { throw null; } }
        public System.Collections.ObjectModel.ReadOnlyCollection<string> PathSegmentVariableNames { get { throw null; } }
        public System.Collections.ObjectModel.ReadOnlyCollection<string> QueryValueVariableNames { get { throw null; } }
        public System.Uri BindByName(System.Uri baseAddress, System.Collections.Generic.IDictionary<string, string> parameters) { throw null; }
        public System.Uri BindByName(System.Uri baseAddress, System.Collections.Generic.IDictionary<string, string> parameters, bool omitDefaults) { throw null; }
        public System.Uri BindByName(System.Uri baseAddress, System.Collections.Specialized.NameValueCollection parameters) { throw null; }
        public System.Uri BindByName(System.Uri baseAddress, System.Collections.Specialized.NameValueCollection parameters, bool omitDefaults) { throw null; }
        public System.Uri BindByPosition(System.Uri baseAddress, params string[] values) { throw null; }
        public bool IsEquivalentTo(System.UriTemplate other) { throw null; }
        public System.UriTemplateMatch Match(System.Uri baseAddress, System.Uri candidate) { throw null; }
        public override string ToString() { throw null; }
    }
    [System.Runtime.CompilerServices.TypeForwardedFromAttribute("System.ServiceModel.Web, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
    public partial class UriTemplateEquivalenceComparer : System.Collections.Generic.IEqualityComparer<System.UriTemplate>
    {
        public UriTemplateEquivalenceComparer() { }
        public bool Equals(System.UriTemplate x, System.UriTemplate y) { throw null; }
        public int GetHashCode(System.UriTemplate obj) { throw null; }
    }
    [System.Runtime.CompilerServices.TypeForwardedFromAttribute("System.ServiceModel.Web, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
    public partial class UriTemplateMatch
    {
        public UriTemplateMatch() { }
        public System.Uri BaseUri { get { throw null; } set { } }
        public System.Collections.Specialized.NameValueCollection BoundVariables { get { throw null; } }
        public object Data { get { throw null; } set { } }
        public System.Collections.Specialized.NameValueCollection QueryParameters { get { throw null; } }
        public System.Collections.ObjectModel.Collection<string> RelativePathSegments { get { throw null; } }
        public System.Uri RequestUri { get { throw null; } set { } }
        public System.UriTemplate Template { get { throw null; } set { } }
        public System.Collections.ObjectModel.Collection<string> WildcardPathSegments { get { throw null; } }
    }
    [System.Runtime.CompilerServices.TypeForwardedFromAttribute("System.ServiceModel.Web, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
    [System.SerializableAttribute]
    public partial class UriTemplateMatchException : System.SystemException
    {
        public UriTemplateMatchException() { }
        protected UriTemplateMatchException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
        public UriTemplateMatchException(string message) { }
        public UriTemplateMatchException(string message, System.Exception innerException) { }
    }
    [System.Runtime.CompilerServices.TypeForwardedFromAttribute("System.ServiceModel.Web, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
    public partial class UriTemplateTable
    {
        public UriTemplateTable() { }
        public UriTemplateTable(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.UriTemplate, object>> keyValuePairs) { }
        public UriTemplateTable(System.Uri baseAddress) { }
        public UriTemplateTable(System.Uri baseAddress, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.UriTemplate, object>> keyValuePairs) { }
        public System.Uri BaseAddress { get { throw null; } set { } }
        public bool IsReadOnly { get { throw null; } }
        public System.Collections.Generic.IList<System.Collections.Generic.KeyValuePair<System.UriTemplate, object>> KeyValuePairs { get { throw null; } }
        public System.Uri OriginalBaseAddress { get { throw null; } }
        public void MakeReadOnly(bool allowDuplicateEquivalentUriTemplates) { }
        public System.Collections.ObjectModel.Collection<System.UriTemplateMatch> Match(System.Uri uri) { throw null; }
        public System.UriTemplateMatch MatchSingle(System.Uri uri) { throw null; }
    }
}
namespace System.Collections.Generic
{
    public partial class KeyedByTypeCollection<TItem> : System.Collections.ObjectModel.KeyedCollection<System.Type, TItem>
    {
        public KeyedByTypeCollection() { }
        public KeyedByTypeCollection(System.Collections.Generic.IEnumerable<TItem> items) { }
        public System.Collections.ObjectModel.Collection<T> FindAll<T>() { throw null; }
        public T Find<T>() { throw null; }
        protected override System.Type GetKeyForItem(TItem item) { throw null; }
        protected override void InsertItem(int index, TItem item) { }
        public System.Collections.ObjectModel.Collection<T> RemoveAll<T>() { throw null; }
        public T Remove<T>() { throw null; }
        protected override void SetItem(int index, TItem item) { }
    }
    [System.Runtime.InteropServices.ComVisibleAttribute(false)]
    public partial class SynchronizedCollection<T> : System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IList<T>, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList
    {
        public SynchronizedCollection() { }
        public SynchronizedCollection(object syncRoot) { }
        public SynchronizedCollection(object syncRoot, System.Collections.Generic.IEnumerable<T> list) { }
        public SynchronizedCollection(object syncRoot, params T[] list) { }
        public int Count { get { throw null; } }
        public T this[int index] { get { throw null; } set { } }
        protected System.Collections.Generic.List<T> Items { get { throw null; } }
        public object SyncRoot { get { throw null; } }
        bool System.Collections.Generic.ICollection<T>.IsReadOnly { get { throw null; } }
        bool System.Collections.ICollection.IsSynchronized { get { throw null; } }
        object System.Collections.ICollection.SyncRoot { get { throw null; } }
        bool System.Collections.IList.IsFixedSize { get { throw null; } }
        bool System.Collections.IList.IsReadOnly { get { throw null; } }
        object System.Collections.IList.this[int index] { get { throw null; } set { } }
        public void Add(T item) { }
        public void Clear() { }
        protected virtual void ClearItems() { }
        public bool Contains(T item) { throw null; }
        public void CopyTo(T[] array, int index) { }
        public System.Collections.Generic.IEnumerator<T> GetEnumerator() { throw null; }
        public int IndexOf(T item) { throw null; }
        public void Insert(int index, T item) { }
        protected virtual void InsertItem(int index, T item) { }
        public bool Remove(T item) { throw null; }
        public void RemoveAt(int index) { }
        protected virtual void RemoveItem(int index) { }
        protected virtual void SetItem(int index, T item) { }
        void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { throw null; }
        int System.Collections.IList.Add(object value) { throw null; }
        bool System.Collections.IList.Contains(object value) { throw null; }
        int System.Collections.IList.IndexOf(object value) { throw null; }
        void System.Collections.IList.Insert(int index, object value) { }
        void System.Collections.IList.Remove(object value) { }
    }
    [System.Runtime.InteropServices.ComVisibleAttribute(false)]
    public abstract partial class SynchronizedKeyedCollection<K, T> : System.Collections.Generic.SynchronizedCollection<T>
    {
        protected SynchronizedKeyedCollection() { }
        protected SynchronizedKeyedCollection(object syncRoot) { }
        protected SynchronizedKeyedCollection(object syncRoot, System.Collections.Generic.IEqualityComparer<K> comparer) { }
        protected SynchronizedKeyedCollection(object syncRoot, System.Collections.Generic.IEqualityComparer<K> comparer, int dictionaryCreationThreshold) { }
        protected System.Collections.Generic.IDictionary<K, T> Dictionary { get { throw null; } }
        public T this[K key] { get { throw null; } }
        protected void ChangeItemKey(T item, K newKey) { }
        protected override void ClearItems() { }
        public bool Contains(K key) { throw null; }
        protected abstract K GetKeyForItem(T item);
        protected override void InsertItem(int index, T item) { }
        public bool Remove(K key) { throw null; }
        protected override void RemoveItem(int index) { }
        protected override void SetItem(int index, T item) { }
    }
    [System.Runtime.InteropServices.ComVisibleAttribute(false)]
    public partial class SynchronizedReadOnlyCollection<T> : System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IList<T>, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList
    {
        public SynchronizedReadOnlyCollection() { }
        public SynchronizedReadOnlyCollection(object syncRoot) { }
        public SynchronizedReadOnlyCollection(object syncRoot, System.Collections.Generic.IEnumerable<T> list) { }
        public SynchronizedReadOnlyCollection(object syncRoot, params T[] list) { }
        public int Count { get { throw null; } }
        public T this[int index] { get { throw null; } }
        protected System.Collections.Generic.IList<T> Items { get { throw null; } }
        bool System.Collections.Generic.ICollection<T>.IsReadOnly { get { throw null; } }
        T System.Collections.Generic.IList<T>.this[int index] { get { throw null; } set { } }
        bool System.Collections.ICollection.IsSynchronized { get { throw null; } }
        object System.Collections.ICollection.SyncRoot { get { throw null; } }
        bool System.Collections.IList.IsFixedSize { get { throw null; } }
        bool System.Collections.IList.IsReadOnly { get { throw null; } }
        object System.Collections.IList.this[int index] { get { throw null; } set { } }
        public bool Contains(T value) { throw null; }
        public void CopyTo(T[] array, int index) { }
        public System.Collections.Generic.IEnumerator<T> GetEnumerator() { throw null; }
        public int IndexOf(T value) { throw null; }
        void System.Collections.Generic.ICollection<T>.Add(T value) { }
        void System.Collections.Generic.ICollection<T>.Clear() { }
        bool System.Collections.Generic.ICollection<T>.Remove(T value) { throw null; }
        void System.Collections.Generic.IList<T>.Insert(int index, T value) { }
        void System.Collections.Generic.IList<T>.RemoveAt(int index) { }
        void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { throw null; }
        int System.Collections.IList.Add(object value) { throw null; }
        void System.Collections.IList.Clear() { }
        bool System.Collections.IList.Contains(object value) { throw null; }
        int System.Collections.IList.IndexOf(object value) { throw null; }
        void System.Collections.IList.Insert(int index, object value) { }
        void System.Collections.IList.Remove(object value) { }
        void System.Collections.IList.RemoveAt(int index) { }
    }
}
namespace System.IO
{
    [System.SerializableAttribute]
    public partial class PipeException : System.IO.IOException
    {
        public PipeException() { }
        protected PipeException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
        public PipeException(string message) { }
        public PipeException(string message, System.Exception inner) { }
        public PipeException(string message, int errorCode) { }
        public virtual int ErrorCode { get { throw null; } }
    }
}
namespace System.ServiceModel
{
    [System.SerializableAttribute]
    public partial class ActionNotSupportedException : System.ServiceModel.CommunicationException
    {
        public ActionNotSupportedException() { }
        protected ActionNotSupportedException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
        public ActionNotSupportedException(string message) { }
        public ActionNotSupportedException(string message, System.Exception innerException) { }
    }
    [System.SerializableAttribute]
    public partial class AddressAccessDeniedException : System.ServiceModel.CommunicationException
    {
        public AddressAccessDeniedException() { }
        protected AddressAccessDeniedException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
        public AddressAccessDeniedException(string message) { }
        public AddressAccessDeniedException(string message, System.Exception innerException) { }
    }
    [System.SerializableAttribute]
    public partial class AddressAlreadyInUseException : System.ServiceModel.CommunicationException
    {
        public AddressAlreadyInUseException() { }
        protected AddressAlreadyInUseException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
        public AddressAlreadyInUseException(string message) { }
        public AddressAlreadyInUseException(string message, System.Exception innerException) { }
    }
    public enum AddressFilterMode
    {
        Any = 2,
        Exact = 0,
        Prefix = 1,
    }
    public enum AuditLevel
    {
        Failure = 2,
        None = 0,
        Success = 1,
        SuccessOrFailure = 3,
    }
    public enum AuditLogLocation
    {
        Application = 1,
        Default = 0,
        Security = 2,
    }
    public partial class BasicHttpBinding : System.ServiceModel.HttpBindingBase
    {
        public BasicHttpBinding() { }
        public BasicHttpBinding(System.ServiceModel.BasicHttpSecurityMode securityMode) { }
        public BasicHttpBinding(string configurationName) { }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.ObsoleteAttribute("This property is obsolete. To enable Http CookieContainer, use the AllowCookies property instead.", false)]
        public bool EnableHttpCookieContainer { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(System.ServiceModel.WSMessageEncoding.Text)]
        public System.ServiceModel.WSMessageEncoding MessageEncoding { get { throw null; } set { } }
        public System.ServiceModel.BasicHttpSecurity Security { get { throw null; } set { } }
        public override System.ServiceModel.Channels.IChannelFactory<TChannel> BuildChannelFactory<TChannel>(System.ServiceModel.Channels.BindingParameterCollection parameters) { throw null; }
        public override System.ServiceModel.Channels.BindingElementCollection CreateBindingElements() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeEnableHttpCookieContainer() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeSecurity() { throw null; }
    }
    [System.Runtime.CompilerServices.TypeForwardedFromAttribute("System.WorkflowServices, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
    public partial class BasicHttpContextBinding : System.ServiceModel.BasicHttpBinding
    {
        public BasicHttpContextBinding() { }
        public BasicHttpContextBinding(System.ServiceModel.BasicHttpSecurityMode securityMode) { }
        public BasicHttpContextBinding(string configName) { }
        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool ContextManagementEnabled { get { throw null; } set { } }
        public override System.ServiceModel.Channels.BindingElementCollection CreateBindingElements() { throw null; }
    }
    public enum BasicHttpMessageCredentialType
    {
        Certificate = 1,
        UserName = 0,
    }
    public sealed partial class BasicHttpMessageSecurity
    {
        public BasicHttpMessageSecurity() { }
        public System.ServiceModel.Security.SecurityAlgorithmSuite AlgorithmSuite { get { throw null; } set { } }
        public System.ServiceModel.BasicHttpMessageCredentialType ClientCredentialType { get { throw null; } set { } }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeAlgorithmSuite() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeClientCredentialType() { throw null; }
    }
    public partial class BasicHttpsBinding : System.ServiceModel.HttpBindingBase
    {
        public BasicHttpsBinding() { }
        public BasicHttpsBinding(System.ServiceModel.BasicHttpsSecurityMode securityMode) { }
        public BasicHttpsBinding(string configurationName) { }
        [System.ComponentModel.DefaultValueAttribute(System.ServiceModel.WSMessageEncoding.Text)]
        public System.ServiceModel.WSMessageEncoding MessageEncoding { get { throw null; } set { } }
        public System.ServiceModel.BasicHttpsSecurity Security { get { throw null; } set { } }
        public override System.ServiceModel.Channels.IChannelFactory<TChannel> BuildChannelFactory<TChannel>(System.ServiceModel.Channels.BindingParameterCollection parameters) { throw null; }
        public override System.ServiceModel.Channels.BindingElementCollection CreateBindingElements() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeSecurity() { throw null; }
    }
    public sealed partial class BasicHttpSecurity
    {
        public BasicHttpSecurity() { }
        public System.ServiceModel.BasicHttpMessageSecurity Message { get { throw null; } set { } }
        public System.ServiceModel.BasicHttpSecurityMode Mode { get { throw null; } set { } }
        public System.ServiceModel.HttpTransportSecurity Transport { get { throw null; } set { } }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeMessage() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeTransport() { throw null; }
    }
    public enum BasicHttpSecurityMode
    {
        Message = 2,
        None = 0,
        Transport = 1,
        TransportCredentialOnly = 4,
        TransportWithMessageCredential = 3,
    }
    public sealed partial class BasicHttpsSecurity
    {
        public BasicHttpsSecurity() { }
        public System.ServiceModel.BasicHttpMessageSecurity Message { get { throw null; } set { } }
        public System.ServiceModel.BasicHttpsSecurityMode Mode { get { throw null; } set { } }
        public System.ServiceModel.HttpTransportSecurity Transport { get { throw null; } set { } }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeMessage() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeTransport() { throw null; }
    }
    public enum BasicHttpsSecurityMode
    {
        Transport = 0,
        TransportWithMessageCredential = 1,
    }
    public enum CacheSetting
    {
        AlwaysOff = 2,
        AlwaysOn = 1,
        Default = 0,
    }
    [System.AttributeUsageAttribute(System.AttributeTargets.Class)]
    public sealed partial class CallbackBehaviorAttribute : System.Attribute, System.ServiceModel.Description.IEndpointBehavior
    {
        public CallbackBehaviorAttribute() { }
        public bool AutomaticSessionShutdown { get { throw null; } set { } }
        public System.ServiceModel.ConcurrencyMode ConcurrencyMode { get { throw null; } set { } }
        public bool IgnoreExtensionDataObject { get { throw null; } set { } }
        public bool IncludeExceptionDetailInFaults { get { throw null; } set { } }
        public int MaxItemsInObjectGraph { get { throw null; } set { } }
        public System.Transactions.IsolationLevel TransactionIsolationLevel { get { throw null; } set { } }
        public string TransactionTimeout { get { throw null; } set { } }
        public bool UseSynchronizationContext { get { throw null; } set { } }
        public bool ValidateMustUnderstand { get { throw null; } set { } }
        void System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Channels.BindingParameterCollection parameters) { }
        void System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Dispatcher.ClientRuntime clientRuntime) { }
        void System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Dispatcher.EndpointDispatcher endpointDispatcher) { }
        void System.ServiceModel.Description.IEndpointBehavior.Validate(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint) { }
    }
    public abstract partial class ChannelFactory : System.ServiceModel.Channels.CommunicationObject, System.IDisposable, System.ServiceModel.Channels.IChannelFactory, System.ServiceModel.ICommunicationObject
    {
        protected ChannelFactory() { }
        public System.ServiceModel.Description.ClientCredentials Credentials { get { throw null; } }
        protected override System.TimeSpan DefaultCloseTimeout { get { throw null; } }
        protected override System.TimeSpan DefaultOpenTimeout { get { throw null; } }
        public System.ServiceModel.Description.ServiceEndpoint Endpoint { get { throw null; } }
        protected virtual void ApplyConfiguration(string configurationName) { }
        protected abstract System.ServiceModel.Description.ServiceEndpoint CreateDescription();
        protected virtual System.ServiceModel.Channels.IChannelFactory CreateFactory() { throw null; }
        protected internal void EnsureOpened() { }
        public T GetProperty<T>() where T : class { throw null; }
        protected void InitializeEndpoint(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress address) { }
        protected void InitializeEndpoint(System.ServiceModel.Description.ServiceEndpoint endpoint) { }
        protected void InitializeEndpoint(string configurationName, System.ServiceModel.EndpointAddress address) { }
        protected override void OnAbort() { }
        protected override System.IAsyncResult OnBeginClose(System.TimeSpan timeout, System.AsyncCallback callback, object state) { throw null; }
        protected override System.IAsyncResult OnBeginOpen(System.TimeSpan timeout, System.AsyncCallback callback, object state) { throw null; }
        protected override void OnClose(System.TimeSpan timeout) { }
        protected override void OnEndClose(System.IAsyncResult result) { }
        protected override void OnEndOpen(System.IAsyncResult result) { }
        protected override void OnOpen(System.TimeSpan timeout) { }
        protected override void OnOpened() { }
        protected override void OnOpening() { }
        void System.IDisposable.Dispose() { }
    }
    public partial class ChannelFactory<TChannel> : System.ServiceModel.ChannelFactory, System.ServiceModel.Channels.IChannelFactory, System.ServiceModel.Channels.IChannelFactory<TChannel>, System.ServiceModel.ICommunicationObject
    {
        public ChannelFactory() { }
        public ChannelFactory(System.ServiceModel.Channels.Binding binding) { }
        public ChannelFactory(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) { }
        public ChannelFactory(System.ServiceModel.Channels.Binding binding, string remoteAddress) { }
        public ChannelFactory(System.ServiceModel.Description.ServiceEndpoint endpoint) { }
        public ChannelFactory(string endpointConfigurationName) { }
        public ChannelFactory(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) { }
        protected ChannelFactory(System.Type channelType) { }
        public TChannel CreateChannel() { throw null; }
        public static TChannel CreateChannel(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress endpointAddress) { throw null; }
        public static TChannel CreateChannel(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress endpointAddress, System.Uri via) { throw null; }
        public TChannel CreateChannel(System.ServiceModel.EndpointAddress address) { throw null; }
        public virtual TChannel CreateChannel(System.ServiceModel.EndpointAddress address, System.Uri via) { throw null; }
        protected static TChannel CreateChannel(string endpointConfigurationName) { throw null; }
        public TChannel CreateChannelWithActAsToken(System.IdentityModel.Tokens.SecurityToken actAsToken) { throw null; }
        public TChannel CreateChannelWithActAsToken(System.IdentityModel.Tokens.SecurityToken actAsToken, System.ServiceModel.EndpointAddress address) { throw null; }
        public TChannel CreateChannelWithActAsToken(System.IdentityModel.Tokens.SecurityToken actAsToken, System.ServiceModel.EndpointAddress address, System.Uri via) { throw null; }
        public TChannel CreateChannelWithIssuedToken(System.IdentityModel.Tokens.SecurityToken issuedToken) { throw null; }
        public TChannel CreateChannelWithIssuedToken(System.IdentityModel.Tokens.SecurityToken issuedToken, System.ServiceModel.EndpointAddress address) { throw null; }
        public TChannel CreateChannelWithIssuedToken(System.IdentityModel.Tokens.SecurityToken issuedToken, System.ServiceModel.EndpointAddress address, System.Uri via) { throw null; }
        public TChannel CreateChannelWithOnBehalfOfToken(System.IdentityModel.Tokens.SecurityToken onBehalfOf) { throw null; }
        public TChannel CreateChannelWithOnBehalfOfToken(System.IdentityModel.Tokens.SecurityToken onBehalfOf, System.ServiceModel.EndpointAddress address) { throw null; }
        public TChannel CreateChannelWithOnBehalfOfToken(System.IdentityModel.Tokens.SecurityToken onBehalfOf, System.ServiceModel.EndpointAddress address, System.Uri via) { throw null; }
        protected override System.ServiceModel.Description.ServiceEndpoint CreateDescription() { throw null; }
    }
    [System.SerializableAttribute]
    public partial class ChannelTerminatedException : System.ServiceModel.CommunicationException
    {
        public ChannelTerminatedException() { }
        protected ChannelTerminatedException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
        public ChannelTerminatedException(string message) { }
        public ChannelTerminatedException(string message, System.Exception innerException) { }
    }
    public abstract partial class ClientBase<TChannel> : System.IDisposable, System.ServiceModel.ICommunicationObject where TChannel : class
    {
        protected ClientBase() { }
        protected ClientBase(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) { }
        protected ClientBase(System.ServiceModel.Description.ServiceEndpoint endpoint) { }
        protected ClientBase(System.ServiceModel.InstanceContext callbackInstance) { }
        protected ClientBase(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) { }
        protected ClientBase(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Description.ServiceEndpoint endpoint) { }
        protected ClientBase(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) { }
        protected ClientBase(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) { }
        protected ClientBase(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) { }
        protected ClientBase(string endpointConfigurationName) { }
        protected ClientBase(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) { }
        protected ClientBase(string endpointConfigurationName, string remoteAddress) { }
        public static System.ServiceModel.CacheSetting CacheSetting { get { throw null; } set { } }
        protected TChannel Channel { get { throw null; } }
        public System.ServiceModel.ChannelFactory<TChannel> ChannelFactory { get { throw null; } }
        public System.ServiceModel.Description.ClientCredentials ClientCredentials { get { throw null; } }
        public System.ServiceModel.Description.ServiceEndpoint Endpoint { get { throw null; } }
        public System.ServiceModel.IClientChannel InnerChannel { get { throw null; } }
        public System.ServiceModel.CommunicationState State { get { throw null; } }
        event System.EventHandler System.ServiceModel.ICommunicationObject.Closed { add { } remove { } }
        event System.EventHandler System.ServiceModel.ICommunicationObject.Closing { add { } remove { } }
        event System.EventHandler System.ServiceModel.ICommunicationObject.Faulted { add { } remove { } }
        event System.EventHandler System.ServiceModel.ICommunicationObject.Opened { add { } remove { } }
        event System.EventHandler System.ServiceModel.ICommunicationObject.Opening { add { } remove { } }
        public void Abort() { }
        public void Close() { }
        protected virtual TChannel CreateChannel() { throw null; }
        public void DisplayInitializationUI() { }
        protected T GetDefaultValueForInitialization<T>() { throw null; }
        protected void InvokeAsync(System.ServiceModel.ClientBase<TChannel>.BeginOperationDelegate beginOperationDelegate, object[] inValues, System.ServiceModel.ClientBase<TChannel>.EndOperationDelegate endOperationDelegate, System.Threading.SendOrPostCallback operationCompletedCallback, object userState) { }
        public void Open() { }
        void System.IDisposable.Dispose() { }
        System.IAsyncResult System.ServiceModel.ICommunicationObject.BeginClose(System.AsyncCallback callback, object state) { throw null; }
        System.IAsyncResult System.ServiceModel.ICommunicationObject.BeginClose(System.TimeSpan timeout, System.AsyncCallback callback, object state) { throw null; }
        System.IAsyncResult System.ServiceModel.ICommunicationObject.BeginOpen(System.AsyncCallback callback, object state) { throw null; }
        System.IAsyncResult System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan timeout, System.AsyncCallback callback, object state) { throw null; }
        void System.ServiceModel.ICommunicationObject.Close(System.TimeSpan timeout) { }
        void System.ServiceModel.ICommunicationObject.EndClose(System.IAsyncResult result) { }
        void System.ServiceModel.ICommunicationObject.EndOpen(System.IAsyncResult result) { }
        void System.ServiceModel.ICommunicationObject.Open(System.TimeSpan timeout) { }
        protected delegate System.IAsyncResult BeginOperationDelegate(object[] inValues, System.AsyncCallback asyncCallback, object state);
        protected partial class ChannelBase<T> : System.IDisposable, System.ServiceModel.Channels.IChannel, System.ServiceModel.Channels.IOutputChannel, System.ServiceModel.Channels.IRequestChannel, System.ServiceModel.IClientChannel, System.ServiceModel.ICommunicationObject, System.ServiceModel.IContextChannel, System.ServiceModel.IExtensibleObject<System.ServiceModel.IContextChannel> where T : class
        {
            protected ChannelBase(System.ServiceModel.ClientBase<T> client) { }
            System.ServiceModel.EndpointAddress System.ServiceModel.Channels.IOutputChannel.RemoteAddress { get { throw null; } }
            System.Uri System.ServiceModel.Channels.IOutputChannel.Via { get { throw null; } }
            System.ServiceModel.EndpointAddress System.ServiceModel.Channels.IRequestChannel.RemoteAddress { get { throw null; } }
            System.Uri System.ServiceModel.Channels.IRequestChannel.Via { get { throw null; } }
            bool System.ServiceModel.IClientChannel.AllowInitializationUI { get { throw null; } set { } }
            bool System.ServiceModel.IClientChannel.DidInteractiveInitialization { get { throw null; } }
            System.Uri System.ServiceModel.IClientChannel.Via { get { throw null; } }
            System.ServiceModel.CommunicationState System.ServiceModel.ICommunicationObject.State { get { throw null; } }
            bool System.ServiceModel.IContextChannel.AllowOutputBatching { get { throw null; } set { } }
            System.ServiceModel.Channels.IInputSession System.ServiceModel.IContextChannel.InputSession { get { throw null; } }
            System.ServiceModel.EndpointAddress System.ServiceModel.IContextChannel.LocalAddress { get { throw null; } }
            System.TimeSpan System.ServiceModel.IContextChannel.OperationTimeout { get { throw null; } set { } }
            System.ServiceModel.Channels.IOutputSession System.ServiceModel.IContextChannel.OutputSession { get { throw null; } }
            System.ServiceModel.EndpointAddress System.ServiceModel.IContextChannel.RemoteAddress { get { throw null; } }
            string System.ServiceModel.IContextChannel.SessionId { get { throw null; } }
            System.ServiceModel.IExtensionCollection<System.ServiceModel.IContextChannel> System.ServiceModel.IExtensibleObject<System.ServiceModel.IContextChannel>.Extensions { get { throw null; } }
            event System.EventHandler<System.ServiceModel.UnknownMessageReceivedEventArgs> System.ServiceModel.IClientChannel.UnknownMessageReceived { add { } remove { } }
            event System.EventHandler System.ServiceModel.ICommunicationObject.Closed { add { } remove { } }
            event System.EventHandler System.ServiceModel.ICommunicationObject.Closing { add { } remove { } }
            event System.EventHandler System.ServiceModel.ICommunicationObject.Faulted { add { } remove { } }
            event System.EventHandler System.ServiceModel.ICommunicationObject.Opened { add { } remove { } }
            event System.EventHandler System.ServiceModel.ICommunicationObject.Opening { add { } remove { } }
            [System.Security.SecuritySafeCriticalAttribute]
            protected System.IAsyncResult BeginInvoke(string methodName, object[] args, System.AsyncCallback callback, object state) { throw null; }
            [System.Security.SecuritySafeCriticalAttribute]
            protected object EndInvoke(string methodName, object[] args, System.IAsyncResult result) { throw null; }
            void System.IDisposable.Dispose() { }
            TProperty System.ServiceModel.Channels.IChannel.GetProperty<TProperty>() { throw null; }
            System.IAsyncResult System.ServiceModel.Channels.IOutputChannel.BeginSend(System.ServiceModel.Channels.Message message, System.AsyncCallback callback, object state) { throw null; }
            System.IAsyncResult System.ServiceModel.Channels.IOutputChannel.BeginSend(System.ServiceModel.Channels.Message message, System.TimeSpan timeout, System.AsyncCallback callback, object state) { throw null; }
            void System.ServiceModel.Channels.IOutputChannel.EndSend(System.IAsyncResult result) { }
            void System.ServiceModel.Channels.IOutputChannel.Send(System.ServiceModel.Channels.Message message) { }
            void System.ServiceModel.Channels.IOutputChannel.Send(System.ServiceModel.Channels.Message message, System.TimeSpan timeout) { }
            System.IAsyncResult System.ServiceModel.Channels.IRequestChannel.BeginRequest(System.ServiceModel.Channels.Message message, System.AsyncCallback callback, object state) { throw null; }
            System.IAsyncResult System.ServiceModel.Channels.IRequestChannel.BeginRequest(System.ServiceModel.Channels.Message message, System.TimeSpan timeout, System.AsyncCallback callback, object state) { throw null; }
            System.ServiceModel.Channels.Message System.ServiceModel.Channels.IRequestChannel.EndRequest(System.IAsyncResult result) { throw null; }
            System.ServiceModel.Channels.Message System.ServiceModel.Channels.IRequestChannel.Request(System.ServiceModel.Channels.Message message) { throw null; }
            System.ServiceModel.Channels.Message System.ServiceModel.Channels.IRequestChannel.Request(System.ServiceModel.Channels.Message message, System.TimeSpan timeout) { throw null; }
            System.IAsyncResult System.ServiceModel.IClientChannel.BeginDisplayInitializationUI(System.AsyncCallback callback, object state) { throw null; }
            void System.ServiceModel.IClientChannel.DisplayInitializationUI() { }
            void System.ServiceModel.IClientChannel.EndDisplayInitializationUI(System.IAsyncResult result) { }
            void System.ServiceModel.ICommunicationObject.Abort() { }
            System.IAsyncResult System.ServiceModel.ICommunicationObject.BeginClose(System.AsyncCallback callback, object state) { throw null; }
            System.IAsyncResult System.ServiceModel.ICommunicationObject.BeginClose(System.TimeSpan timeout, System.AsyncCallback callback, object state) { throw null; }
            System.IAsyncResult System.ServiceModel.ICommunicationObject.BeginOpen(System.AsyncCallback callback, object state) { throw null; }
            System.IAsyncResult System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan timeout, System.AsyncCallback callback, object state) { throw null; }
            void System.ServiceModel.ICommunicationObject.Close() { }
            void System.ServiceModel.ICommunicationObject.Close(System.TimeSpan timeout) { }
            void System.ServiceModel.ICommunicationObject.EndClose(System.IAsyncResult result) { }
            void System.ServiceModel.ICommunicationObject.EndOpen(System.IAsyncResult result) { }
            void System.ServiceModel.ICommunicationObject.Open() { }
            void System.ServiceModel.ICommunicationObject.Open(System.TimeSpan timeout) { }
        }
        protected delegate object[] EndOperationDelegate(System.IAsyncResult result);
        protected partial class InvokeAsyncCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
        {
            internal InvokeAsyncCompletedEventArgs() : base (default(System.Exception), default(bool), default(object)) { }
            public object[] Results { get { throw null; } }
        }
    }
    public partial class ClientCredentialsSecurityTokenManager : System.IdentityModel.Selectors.SecurityTokenManager
    {
        public ClientCredentialsSecurityTokenManager(System.ServiceModel.Description.ClientCredentials clientCredentials) { }
        public System.ServiceModel.Description.ClientCredentials ClientCredentials { get { throw null; } }
        public override System.IdentityModel.Selectors.SecurityTokenAuthenticator CreateSecurityTokenAuthenticator(System.IdentityModel.Selectors.SecurityTokenRequirement tokenRequirement, out System.IdentityModel.Selectors.SecurityTokenResolver outOfBandTokenResolver) { throw null; }
        public override System.IdentityModel.Selectors.SecurityTokenProvider CreateSecurityTokenProvider(System.IdentityModel.Selectors.SecurityTokenRequirement tokenRequirement) { throw null; }
        public override System.IdentityModel.Selectors.SecurityTokenSerializer CreateSecurityTokenSerializer(System.IdentityModel.Selectors.SecurityTokenVersion version) { throw null; }
        protected System.IdentityModel.Selectors.SecurityTokenSerializer CreateSecurityTokenSerializer(System.ServiceModel.Security.SecurityVersion version) { throw null; }
        protected internal bool IsIssuedSecurityTokenRequirement(System.IdentityModel.Selectors.SecurityTokenRequirement requirement) { throw null; }
    }
    [System.SerializableAttribute]
    public partial class CommunicationException : System.SystemException
    {
        public CommunicationException() { }
        protected CommunicationException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
        public CommunicationException(string message) { }
        public CommunicationException(string message, System.Exception innerException) { }
    }
    [System.SerializableAttribute]
    public partial class CommunicationObjectAbortedException : System.ServiceModel.CommunicationException
    {
        public CommunicationObjectAbortedException() { }
        protected CommunicationObjectAbortedException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
        public CommunicationObjectAbortedException(string message) { }
        public CommunicationObjectAbortedException(string message, System.Exception innerException) { }
    }
    [System.SerializableAttribute]
    public partial class CommunicationObjectFaultedException : System.ServiceModel.CommunicationException
    {
        public CommunicationObjectFaultedException() { }
        protected CommunicationObjectFaultedException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
        public CommunicationObjectFaultedException(string message) { }
        public CommunicationObjectFaultedException(string message, System.Exception innerException) { }
    }
    public enum CommunicationState
    {
        Closed = 4,
        Closing = 3,
        Created = 0,
        Faulted = 5,
        Opened = 2,
        Opening = 1,
    }
    public enum ConcurrencyMode
    {
        Multiple = 2,
        Reentrant = 1,
        Single = 0,
    }
    [System.AttributeUsageAttribute(System.AttributeTargets.Class | System.AttributeTargets.Interface | System.AttributeTargets.Method, Inherited=false, AllowMultiple=false)]
    public sealed partial class DataContractFormatAttribute : System.Attribute
    {
        public DataContractFormatAttribute() { }
        public System.ServiceModel.OperationFormatStyle Style { get { throw null; } set { } }
    }
    public enum DeadLetterQueue
    {
        Custom = 2,
        None = 0,
        System = 1,
    }
    [System.AttributeUsageAttribute(System.AttributeTargets.Class | System.AttributeTargets.Interface, AllowMultiple=true)]
    public sealed partial class DeliveryRequirementsAttribute : System.Attribute, System.ServiceModel.Description.IContractBehavior, System.ServiceModel.Description.IContractBehaviorAttribute
    {
        public DeliveryRequirementsAttribute() { }
        public System.ServiceModel.QueuedDeliveryRequirementsMode QueuedDeliveryRequirements { get { throw null; } set { } }
        public bool RequireOrderedDelivery { get { throw null; } set { } }
        public System.Type TargetContract { get { throw null; } set { } }
        void System.ServiceModel.Description.IContractBehavior.AddBindingParameters(System.ServiceModel.Description.ContractDescription description, System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Channels.BindingParameterCollection parameters) { }
        void System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior(System.ServiceModel.Description.ContractDescription description, System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.ClientRuntime proxy) { }
        void System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ContractDescription description, System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.DispatchRuntime dispatch) { }
        void System.ServiceModel.Description.IContractBehavior.Validate(System.ServiceModel.Description.ContractDescription description, System.ServiceModel.Description.ServiceEndpoint endpoint) { }
    }
    public partial class DnsEndpointIdentity : System.ServiceModel.EndpointIdentity
    {
        public DnsEndpointIdentity(System.IdentityModel.Claims.Claim identity) { }
        public DnsEndpointIdentity(string dnsName) { }
    }
    public partial class DuplexChannelFactory<TChannel> : System.ServiceModel.ChannelFactory<TChannel>
    {
        public DuplexChannelFactory(object callbackObject) { }
        public DuplexChannelFactory(object callbackObject, System.ServiceModel.Channels.Binding binding) { }
        public DuplexChannelFactory(object callbackObject, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) { }
        public DuplexChannelFactory(object callbackObject, System.ServiceModel.Channels.Binding binding, string remoteAddress) { }
        public DuplexChannelFactory(object callbackObject, System.ServiceModel.Description.ServiceEndpoint endpoint) { }
        public DuplexChannelFactory(object callbackObject, string endpointConfigurationName) { }
        public DuplexChannelFactory(object callbackObject, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) { }
        public DuplexChannelFactory(System.ServiceModel.InstanceContext callbackInstance) { }
        public DuplexChannelFactory(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding) { }
        public DuplexChannelFactory(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) { }
        public DuplexChannelFactory(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, string remoteAddress) { }
        public DuplexChannelFactory(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Description.ServiceEndpoint endpoint) { }
        public DuplexChannelFactory(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) { }
        public DuplexChannelFactory(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) { }
        public DuplexChannelFactory(System.Type callbackInstanceType) { }
        public DuplexChannelFactory(System.Type callbackInstanceType, System.ServiceModel.Channels.Binding binding) { }
        public DuplexChannelFactory(System.Type callbackInstanceType, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) { }
        public DuplexChannelFactory(System.Type callbackInstanceType, System.ServiceModel.Channels.Binding binding, string remoteAddress) { }
        public DuplexChannelFactory(System.Type callbackInstanceType, System.ServiceModel.Description.ServiceEndpoint endpoint) { }
        public DuplexChannelFactory(System.Type callbackInstanceType, string endpointConfigurationName) { }
        public DuplexChannelFactory(System.Type callbackInstanceType, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) { }
        public static TChannel CreateChannel(object callbackObject, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress endpointAddress) { throw null; }
        public static TChannel CreateChannel(object callbackObject, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress endpointAddress, System.Uri via) { throw null; }
        public static TChannel CreateChannel(object callbackObject, string endpointConfigurationName) { throw null; }
        public override TChannel CreateChannel(System.ServiceModel.EndpointAddress address, System.Uri via) { throw null; }
        public TChannel CreateChannel(System.ServiceModel.InstanceContext callbackInstance) { throw null; }
        public static TChannel CreateChannel(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress endpointAddress) { throw null; }
        public static TChannel CreateChannel(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress endpointAddress, System.Uri via) { throw null; }
        public TChannel CreateChannel(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.EndpointAddress address) { throw null; }
        public virtual TChannel CreateChannel(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.EndpointAddress address, System.Uri via) { throw null; }
        public static TChannel CreateChannel(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) { throw null; }
    }
    public abstract partial class DuplexClientBase<TChannel> : System.ServiceModel.ClientBase<TChannel> where TChannel : class
    {
        protected DuplexClientBase(object callbackInstance) { }
        protected DuplexClientBase(object callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) { }
        protected DuplexClientBase(object callbackInstance, System.ServiceModel.Description.ServiceEndpoint endpoint) { }
        protected DuplexClientBase(object callbackInstance, string endpointConfigurationName) { }
        protected DuplexClientBase(object callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) { }
        protected DuplexClientBase(object callbackInstance, string endpointConfigurationName, string remoteAddress) { }
        protected DuplexClientBase(System.ServiceModel.InstanceContext callbackInstance) { }
        protected DuplexClientBase(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) { }
        protected DuplexClientBase(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Description.ServiceEndpoint endpoint) { }
        protected DuplexClientBase(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) { }
        protected DuplexClientBase(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) { }
        protected DuplexClientBase(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) { }
        public System.ServiceModel.IDuplexContextChannel InnerDuplexChannel { get { throw null; } }
    }
    public partial class EndpointAddress
    {
        public EndpointAddress(string uri) { }
        public EndpointAddress(System.Uri uri, params System.ServiceModel.Channels.AddressHeader[] addressHeaders) { }
        public EndpointAddress(System.Uri uri, System.ServiceModel.EndpointIdentity identity, System.ServiceModel.Channels.AddressHeaderCollection headers) { }
        public EndpointAddress(System.Uri uri, System.ServiceModel.EndpointIdentity identity, System.ServiceModel.Channels.AddressHeaderCollection headers, System.Xml.XmlDictionaryReader metadataReader, System.Xml.XmlDictionaryReader extensionReader) { }
        public EndpointAddress(System.Uri uri, System.ServiceModel.EndpointIdentity identity, params System.ServiceModel.Channels.AddressHeader[] addressHeaders) { }
        public static System.Uri AnonymousUri { get { throw null; } }
        public System.ServiceModel.Channels.AddressHeaderCollection Headers { get { throw null; } }
        public System.ServiceModel.EndpointIdentity Identity { get { throw null; } }
        public bool IsAnonymous { get { throw null; } }
        public bool IsNone { get { throw null; } }
        public static System.Uri NoneUri { get { throw null; } }
        [System.ComponentModel.TypeConverterAttribute(typeof(System.UriTypeConverter))]
        public System.Uri Uri { get { throw null; } }
        public void ApplyTo(System.ServiceModel.Channels.Message message) { }
        public override bool Equals(object obj) { throw null; }
        public override int GetHashCode() { throw null; }
        public System.Xml.XmlDictionaryReader GetReaderAtExtensions() { throw null; }
        public System.Xml.XmlDictionaryReader GetReaderAtMetadata() { throw null; }
        public static bool operator ==(System.ServiceModel.EndpointAddress address1, System.ServiceModel.EndpointAddress address2) { throw null; }
        public static bool operator !=(System.ServiceModel.EndpointAddress address1, System.ServiceModel.EndpointAddress address2) { throw null; }
        public static System.ServiceModel.EndpointAddress ReadFrom(System.ServiceModel.Channels.AddressingVersion addressingVersion, System.Xml.XmlDictionaryReader reader) { throw null; }
        public static System.ServiceModel.EndpointAddress ReadFrom(System.ServiceModel.Channels.AddressingVersion addressingVersion, System.Xml.XmlDictionaryReader reader, System.Xml.XmlDictionaryString localName, System.Xml.XmlDictionaryString ns) { throw null; }
        public static System.ServiceModel.EndpointAddress ReadFrom(System.ServiceModel.Channels.AddressingVersion addressingVersion, System.Xml.XmlReader reader) { throw null; }
        public static System.ServiceModel.EndpointAddress ReadFrom(System.ServiceModel.Channels.AddressingVersion addressingVersion, System.Xml.XmlReader reader, string localName, string ns) { throw null; }
        public static System.ServiceModel.EndpointAddress ReadFrom(System.Xml.XmlDictionaryReader reader) { throw null; }
        public static System.ServiceModel.EndpointAddress ReadFrom(System.Xml.XmlDictionaryReader reader, System.Xml.XmlDictionaryString localName, System.Xml.XmlDictionaryString ns) { throw null; }
        public override string ToString() { throw null; }
        public void WriteContentsTo(System.ServiceModel.Channels.AddressingVersion addressingVersion, System.Xml.XmlDictionaryWriter writer) { }
        public void WriteContentsTo(System.ServiceModel.Channels.AddressingVersion addressingVersion, System.Xml.XmlWriter writer) { }
        public void WriteTo(System.ServiceModel.Channels.AddressingVersion addressingVersion, System.Xml.XmlDictionaryWriter writer) { }
        public void WriteTo(System.ServiceModel.Channels.AddressingVersion addressingVersion, System.Xml.XmlDictionaryWriter writer, System.Xml.XmlDictionaryString localName, System.Xml.XmlDictionaryString ns) { }
        public void WriteTo(System.ServiceModel.Channels.AddressingVersion addressingVersion, System.Xml.XmlWriter writer) { }
        public void WriteTo(System.ServiceModel.Channels.AddressingVersion addressingVersion, System.Xml.XmlWriter writer, string localName, string ns) { }
    }
    [System.Xml.Serialization.XmlRootAttribute("EndpointReference", Namespace="http://www.w3.org/2005/08/addressing")]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetSchema")]
    public partial class EndpointAddress10 : System.Xml.Serialization.IXmlSerializable
    {
        internal EndpointAddress10() { }
        public static System.ServiceModel.EndpointAddress10 FromEndpointAddress(System.ServiceModel.EndpointAddress address) { throw null; }
        public static System.Xml.XmlQualifiedName GetSchema(System.Xml.Schema.XmlSchemaSet xmlSchemaSet) { throw null; }
        System.Xml.Schema.XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema() { throw null; }
        void System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader reader) { }
        void System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter writer) { }
        public System.ServiceModel.EndpointAddress ToEndpointAddress() { throw null; }
    }
    [System.Xml.Serialization.XmlRootAttribute("EndpointReference", Namespace="http://schemas.xmlsoap.org/ws/2004/08/addressing")]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetSchema")]
    public partial class EndpointAddressAugust2004 : System.Xml.Serialization.IXmlSerializable
    {
        internal EndpointAddressAugust2004() { }
        public static System.ServiceModel.EndpointAddressAugust2004 FromEndpointAddress(System.ServiceModel.EndpointAddress address) { throw null; }
        public static System.Xml.XmlQualifiedName GetSchema(System.Xml.Schema.XmlSchemaSet xmlSchemaSet) { throw null; }
        System.Xml.Schema.XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema() { throw null; }
        void System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader reader) { }
        void System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter writer) { }
        public System.ServiceModel.EndpointAddress ToEndpointAddress() { throw null; }
    }
    public partial class EndpointAddressBuilder
    {
        public EndpointAddressBuilder() { }
        public EndpointAddressBuilder(System.ServiceModel.EndpointAddress address) { }
        public System.Collections.ObjectModel.Collection<System.ServiceModel.Channels.AddressHeader> Headers { get { throw null; } }
        public System.ServiceModel.EndpointIdentity Identity { get { throw null; } set { } }
        public System.Uri Uri { get { throw null; } set { } }
        public System.Xml.XmlDictionaryReader GetReaderAtExtensions() { throw null; }
        public System.Xml.XmlDictionaryReader GetReaderAtMetadata() { throw null; }
        public void SetExtensionReader(System.Xml.XmlDictionaryReader reader) { }
        public void SetMetadataReader(System.Xml.XmlDictionaryReader reader) { }
        public System.ServiceModel.EndpointAddress ToEndpointAddress() { throw null; }
    }
    public abstract partial class EndpointIdentity
    {
        protected EndpointIdentity() { }
        public System.IdentityModel.Claims.Claim IdentityClaim { get { throw null; } }
        public static System.ServiceModel.EndpointIdentity CreateDnsIdentity(string dnsName) { throw null; }
        public static System.ServiceModel.EndpointIdentity CreateIdentity(System.IdentityModel.Claims.Claim identity) { throw null; }
        public static System.ServiceModel.EndpointIdentity CreateRsaIdentity(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate) { throw null; }
        public static System.ServiceModel.EndpointIdentity CreateRsaIdentity(string publicKey) { throw null; }
        public static System.ServiceModel.EndpointIdentity CreateSpnIdentity(string spnName) { throw null; }
        public static System.ServiceModel.EndpointIdentity CreateUpnIdentity(string upnName) { throw null; }
        public static System.ServiceModel.EndpointIdentity CreateX509CertificateIdentity(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate) { throw null; }
        public static System.ServiceModel.EndpointIdentity CreateX509CertificateIdentity(System.Security.Cryptography.X509Certificates.X509Certificate2 primaryCertificate, System.Security.Cryptography.X509Certificates.X509Certificate2Collection supportingCertificates) { throw null; }
        public override bool Equals(object obj) { throw null; }
        public override int GetHashCode() { throw null; }
        protected void Initialize(System.IdentityModel.Claims.Claim identityClaim) { }
        protected void Initialize(System.IdentityModel.Claims.Claim identityClaim, System.Collections.Generic.IEqualityComparer<System.IdentityModel.Claims.Claim> claimComparer) { }
        public override string ToString() { throw null; }
    }
    [System.SerializableAttribute]
    public partial class EndpointNotFoundException : System.ServiceModel.CommunicationException
    {
        public EndpointNotFoundException() { }
        protected EndpointNotFoundException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
        public EndpointNotFoundException(string message) { }
        public EndpointNotFoundException(string message, System.Exception innerException) { }
    }
    public sealed partial class EnvelopeVersion
    {
        internal EnvelopeVersion() { }
        public string NextDestinationActorValue { get { throw null; } }
        public static System.ServiceModel.EnvelopeVersion None { get { throw null; } }
        public static System.ServiceModel.EnvelopeVersion Soap11 { get { throw null; } }
        public static System.ServiceModel.EnvelopeVersion Soap12 { get { throw null; } }
        public string[] GetUltimateDestinationActorValues() { throw null; }
        public override string ToString() { throw null; }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class ExceptionDetail
    {
        public ExceptionDetail(System.Exception exception) { }
        [System.Runtime.Serialization.DataMemberAttribute]
        public string HelpLink { get { throw null; } set { } }
        [System.Runtime.Serialization.DataMemberAttribute]
        public System.ServiceModel.ExceptionDetail InnerException { get { throw null; } set { } }
        [System.Runtime.Serialization.DataMemberAttribute]
        public string Message { get { throw null; } set { } }
        [System.Runtime.Serialization.DataMemberAttribute]
        public string StackTrace { get { throw null; } set { } }
        [System.Runtime.Serialization.DataMemberAttribute]
        public string Type { get { throw null; } set { } }
        public override string ToString() { throw null; }
    }
    public partial class ExceptionMapper
    {
        public ExceptionMapper() { }
        public virtual System.ServiceModel.FaultException FromException(System.Exception ex) { throw null; }
        public virtual System.ServiceModel.FaultException FromException(System.Exception ex, string soapNamespace, string trustNamespace) { throw null; }
        public virtual bool HandleSecurityTokenProcessingException(System.Exception ex) { throw null; }
    }
    public sealed partial class ExtensionCollection<T> : System.Collections.Generic.SynchronizedCollection<System.ServiceModel.IExtension<T>>, System.Collections.Generic.ICollection<System.ServiceModel.IExtension<T>>, System.Collections.Generic.IEnumerable<System.ServiceModel.IExtension<T>>, System.Collections.IEnumerable, System.ServiceModel.IExtensionCollection<T> where T : System.ServiceModel.IExtensibleObject<T>
    {
        public ExtensionCollection(T owner) { }
        public ExtensionCollection(T owner, object syncRoot) { }
        bool System.Collections.Generic.ICollection<System.ServiceModel.IExtension<T>>.IsReadOnly { get { throw null; } }
        protected override void ClearItems() { }
        public System.Collections.ObjectModel.Collection<E> FindAll<E>() { throw null; }
        public E Find<E>() { throw null; }
        protected override void InsertItem(int index, System.ServiceModel.IExtension<T> item) { }
        protected override void RemoveItem(int index) { }
        protected override void SetItem(int index, System.ServiceModel.IExtension<T> item) { }
    }
    public partial class FaultCode
    {
        public FaultCode(string name) { }
        public FaultCode(string name, System.ServiceModel.FaultCode subCode) { }
        public FaultCode(string name, string ns) { }
        public FaultCode(string name, string ns, System.ServiceModel.FaultCode subCode) { }
        public bool IsPredefinedFault { get { throw null; } }
        public bool IsReceiverFault { get { throw null; } }
        public bool IsSenderFault { get { throw null; } }
        public string Name { get { throw null; } }
        public string Namespace { get { throw null; } }
        public System.ServiceModel.FaultCode SubCode { get { throw null; } }
        public static System.ServiceModel.FaultCode CreateReceiverFaultCode(System.ServiceModel.FaultCode subCode) { throw null; }
        public static System.ServiceModel.FaultCode CreateReceiverFaultCode(string name, string ns) { throw null; }
        public static System.ServiceModel.FaultCode CreateSenderFaultCode(System.ServiceModel.FaultCode subCode) { throw null; }
        public static System.ServiceModel.FaultCode CreateSenderFaultCode(string name, string ns) { throw null; }
    }
    [System.AttributeUsageAttribute(System.AttributeTargets.Method, AllowMultiple=true, Inherited=false)]
    public sealed partial class FaultContractAttribute : System.Attribute
    {
        public FaultContractAttribute(System.Type detailType) { }
        public string Action { get { throw null; } set { } }
        public System.Type DetailType { get { throw null; } }
        public bool HasProtectionLevel { get { throw null; } }
        public string Name { get { throw null; } set { } }
        public string Namespace { get { throw null; } set { } }
        public System.Net.Security.ProtectionLevel ProtectionLevel { get { throw null; } set { } }
    }
#if false
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.ServiceModel.FaultException.FaultCodeData[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.ServiceModel.FaultException.FaultReasonData[]))]
#endif
    [System.SerializableAttribute]
    public partial class FaultException : System.ServiceModel.CommunicationException
    {
        public FaultException() { }
        protected FaultException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
        public FaultException(System.ServiceModel.Channels.MessageFault fault) { }
        public FaultException(System.ServiceModel.Channels.MessageFault fault, string action) { }
        public FaultException(System.ServiceModel.FaultReason reason) { }
        public FaultException(System.ServiceModel.FaultReason reason, System.ServiceModel.FaultCode code) { }
        public FaultException(System.ServiceModel.FaultReason reason, System.ServiceModel.FaultCode code, string action) { }
        public FaultException(string reason) { }
        public FaultException(string reason, System.ServiceModel.FaultCode code) { }
        public FaultException(string reason, System.ServiceModel.FaultCode code, string action) { }
        public string Action { get { throw null; } }
        public System.ServiceModel.FaultCode Code { get { throw null; } }
        public override string Message { get { throw null; } }
        public System.ServiceModel.FaultReason Reason { get { throw null; } }
        public static System.ServiceModel.FaultException CreateFault(System.ServiceModel.Channels.MessageFault messageFault, string action, params System.Type[] faultDetailTypes) { throw null; }
        public static System.ServiceModel.FaultException CreateFault(System.ServiceModel.Channels.MessageFault messageFault, params System.Type[] faultDetailTypes) { throw null; }
        public virtual System.ServiceModel.Channels.MessageFault CreateMessageFault() { throw null; }
        [System.Security.SecurityCriticalAttribute]
        [System.Security.Permissions.SecurityPermissionAttribute(System.Security.Permissions.SecurityAction.LinkDemand, SerializationFormatter=true)]
        public override void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
    }
    [System.SerializableAttribute]
    public partial class FaultException<TDetail> : System.ServiceModel.FaultException
    {
        protected FaultException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
        public FaultException(TDetail detail) { }
        public FaultException(TDetail detail, System.ServiceModel.FaultReason reason) { }
        public FaultException(TDetail detail, System.ServiceModel.FaultReason reason, System.ServiceModel.FaultCode code) { }
        public FaultException(TDetail detail, System.ServiceModel.FaultReason reason, System.ServiceModel.FaultCode code, string action) { }
        public FaultException(TDetail detail, string reason) { }
        public FaultException(TDetail detail, string reason, System.ServiceModel.FaultCode code) { }
        public FaultException(TDetail detail, string reason, System.ServiceModel.FaultCode code, string action) { }
        public TDetail Detail { get { throw null; } }
        public override System.ServiceModel.Channels.MessageFault CreateMessageFault() { throw null; }
        [System.Security.SecurityCriticalAttribute]
        [System.Security.Permissions.SecurityPermissionAttribute(System.Security.Permissions.SecurityAction.LinkDemand, SerializationFormatter=true)]
        public override void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
        public override string ToString() { throw null; }
    }
    public partial class FaultImportOptions
    {
        public FaultImportOptions() { }
        public bool UseMessageFormat { get { throw null; } set { } }
    }
    public partial class FaultReason
    {
        public FaultReason(System.Collections.Generic.IEnumerable<System.ServiceModel.FaultReasonText> translations) { }
        public FaultReason(System.ServiceModel.FaultReasonText translation) { }
        public FaultReason(string text) { }
        public System.Collections.Generic.SynchronizedReadOnlyCollection<System.ServiceModel.FaultReasonText> Translations { get { throw null; } }
        public System.ServiceModel.FaultReasonText GetMatchingTranslation() { throw null; }
        public System.ServiceModel.FaultReasonText GetMatchingTranslation(System.Globalization.CultureInfo cultureInfo) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class FaultReasonText
    {
        public FaultReasonText(string text) { }
        public FaultReasonText(string text, System.Globalization.CultureInfo cultureInfo) { }
        public FaultReasonText(string text, string xmlLang) { }
        public string Text { get { throw null; } }
        public string XmlLang { get { throw null; } }
        public bool Matches(System.Globalization.CultureInfo cultureInfo) { throw null; }
    }
    public sealed partial class FederatedMessageSecurityOverHttp
    {
        public FederatedMessageSecurityOverHttp() { }
        public System.ServiceModel.Security.SecurityAlgorithmSuite AlgorithmSuite { get { throw null; } set { } }
        public System.Collections.ObjectModel.Collection<System.ServiceModel.Security.Tokens.ClaimTypeRequirement> ClaimTypeRequirements { get { throw null; } }
        public bool EstablishSecurityContext { get { throw null; } set { } }
        public System.IdentityModel.Tokens.SecurityKeyType IssuedKeyType { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(null)]
        public string IssuedTokenType { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(null)]
        public System.ServiceModel.EndpointAddress IssuerAddress { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(null)]
        public System.ServiceModel.Channels.Binding IssuerBinding { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(null)]
        public System.ServiceModel.EndpointAddress IssuerMetadataAddress { get { throw null; } set { } }
        public bool NegotiateServiceCredential { get { throw null; } set { } }
        public System.Collections.ObjectModel.Collection<System.Xml.XmlElement> TokenRequestParameters { get { throw null; } }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeAlgorithmSuite() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeClaimTypeRequirements() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeEstablishSecurityContext() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeIssuedKeyType() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeNegotiateServiceCredential() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeTokenRequestParameters() { throw null; }
    }
    public enum HostNameComparisonMode
    {
        Exact = 1,
        StrongWildcard = 0,
        WeakWildcard = 2,
    }
    public abstract partial class HttpBindingBase : System.ServiceModel.Channels.Binding, System.ServiceModel.Channels.IBindingRuntimePreferences
    {
        internal HttpBindingBase() { }
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool AllowCookies { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool BypassProxyOnLocal { get { throw null; } set { } }
        public System.ServiceModel.EnvelopeVersion EnvelopeVersion { get { throw null; } }
        [System.ComponentModel.DefaultValueAttribute(System.ServiceModel.HostNameComparisonMode.StrongWildcard)]
        public System.ServiceModel.HostNameComparisonMode HostNameComparisonMode { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute((long)524288)]
        public long MaxBufferPoolSize { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(65536)]
        public int MaxBufferSize { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute((long)65536)]
        public long MaxReceivedMessageSize { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(null)]
        [System.ComponentModel.TypeConverterAttribute(typeof(System.UriTypeConverter))]
        public System.Uri ProxyAddress { get { throw null; } set { } }
        public System.Xml.XmlDictionaryReaderQuotas ReaderQuotas { get { throw null; } set { } }
        public override string Scheme { get { throw null; } }
        bool System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously { get { throw null; } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.EncodingConverter")]
        public System.Text.Encoding TextEncoding { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(System.ServiceModel.TransferMode.Buffered)]
        public System.ServiceModel.TransferMode TransferMode { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool UseDefaultWebProxy { get { throw null; } set { } }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeReaderQuotas() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeTextEncoding() { throw null; }
    }
    public enum HttpClientCredentialType
    {
        Basic = 1,
        Certificate = 5,
        Digest = 2,
        InheritedFromHost = 6,
        None = 0,
        Ntlm = 3,
        Windows = 4,
    }
    public enum HttpProxyCredentialType
    {
        Basic = 1,
        Digest = 2,
        None = 0,
        Ntlm = 3,
        Windows = 4,
    }
    public sealed partial class HttpTransportSecurity
    {
        public HttpTransportSecurity() { }
        public System.ServiceModel.HttpClientCredentialType ClientCredentialType { get { throw null; } set { } }
        public System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy ExtendedProtectionPolicy { get { throw null; } set { } }
        public System.ServiceModel.HttpProxyCredentialType ProxyCredentialType { get { throw null; } set { } }
        public string Realm { get { throw null; } set { } }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeClientCredentialType() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeExtendedProtectionPolicy() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeProxyCredentialType() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeRealm() { throw null; }
    }
    public partial interface IClientChannel : System.IDisposable, System.ServiceModel.Channels.IChannel, System.ServiceModel.ICommunicationObject, System.ServiceModel.IContextChannel, System.ServiceModel.IExtensibleObject<System.ServiceModel.IContextChannel>
    {
        bool AllowInitializationUI { get; set; }
        bool DidInteractiveInitialization { get; }
        System.Uri Via { get; }
        event System.EventHandler<System.ServiceModel.UnknownMessageReceivedEventArgs> UnknownMessageReceived;
        System.IAsyncResult BeginDisplayInitializationUI(System.AsyncCallback callback, object state);
        void DisplayInitializationUI();
        void EndDisplayInitializationUI(System.IAsyncResult result);
    }
    public partial interface ICommunicationObject
    {
        System.ServiceModel.CommunicationState State { get; }
        event System.EventHandler Closed;
        event System.EventHandler Closing;
        event System.EventHandler Faulted;
        event System.EventHandler Opened;
        event System.EventHandler Opening;
        void Abort();
        System.IAsyncResult BeginClose(System.AsyncCallback callback, object state);
        System.IAsyncResult BeginClose(System.TimeSpan timeout, System.AsyncCallback callback, object state);
        System.IAsyncResult BeginOpen(System.AsyncCallback callback, object state);
        System.IAsyncResult BeginOpen(System.TimeSpan timeout, System.AsyncCallback callback, object state);
        void Close();
        void Close(System.TimeSpan timeout);
        void EndClose(System.IAsyncResult result);
        void EndOpen(System.IAsyncResult result);
        void Open();
        void Open(System.TimeSpan timeout);
    }
    public partial interface IContextChannel : System.ServiceModel.Channels.IChannel, System.ServiceModel.ICommunicationObject, System.ServiceModel.IExtensibleObject<System.ServiceModel.IContextChannel>
    {
        bool AllowOutputBatching { get; set; }
        System.ServiceModel.Channels.IInputSession InputSession { get; }
        System.ServiceModel.EndpointAddress LocalAddress { get; }
        System.TimeSpan OperationTimeout { get; set; }
        System.ServiceModel.Channels.IOutputSession OutputSession { get; }
        System.ServiceModel.EndpointAddress RemoteAddress { get; }
        string SessionId { get; }
    }
    public partial interface IDefaultCommunicationTimeouts
    {
        System.TimeSpan CloseTimeout { get; }
        System.TimeSpan OpenTimeout { get; }
        System.TimeSpan ReceiveTimeout { get; }
        System.TimeSpan SendTimeout { get; }
    }
    public partial interface IDuplexContextChannel : System.ServiceModel.Channels.IChannel, System.ServiceModel.ICommunicationObject, System.ServiceModel.IContextChannel, System.ServiceModel.IExtensibleObject<System.ServiceModel.IContextChannel>
    {
        bool AutomaticInputSessionShutdown { get; set; }
        System.ServiceModel.InstanceContext CallbackInstance { get; set; }
        System.IAsyncResult BeginCloseOutputSession(System.TimeSpan timeout, System.AsyncCallback callback, object state);
        void CloseOutputSession(System.TimeSpan timeout);
        void EndCloseOutputSession(System.IAsyncResult result);
    }
    public partial interface IExtensibleObject<T> where T : System.ServiceModel.IExtensibleObject<T>
    {
        System.ServiceModel.IExtensionCollection<T> Extensions { get; }
    }
    public partial interface IExtensionCollection<T> : System.Collections.Generic.ICollection<System.ServiceModel.IExtension<T>>, System.Collections.Generic.IEnumerable<System.ServiceModel.IExtension<T>>, System.Collections.IEnumerable where T : System.ServiceModel.IExtensibleObject<T>
    {
        System.Collections.ObjectModel.Collection<E> FindAll<E>();
        E Find<E>();
    }
    public partial interface IExtension<T> where T : System.ServiceModel.IExtensibleObject<T>
    {
        void Attach(T owner);
        void Detach(T owner);
    }
    public enum ImpersonationOption
    {
        Allowed = 1,
        NotAllowed = 0,
        Required = 2,
    }
    public sealed partial class InstanceContext : System.ServiceModel.Channels.CommunicationObject, System.ServiceModel.IExtensibleObject<System.ServiceModel.InstanceContext>
    {
        public InstanceContext(object implementation) { }
        public InstanceContext(System.ServiceModel.ServiceHostBase host) { }
        public InstanceContext(System.ServiceModel.ServiceHostBase host, object implementation) { }
        protected override System.TimeSpan DefaultCloseTimeout { get { throw null; } }
        protected override System.TimeSpan DefaultOpenTimeout { get { throw null; } }
        public System.ServiceModel.IExtensionCollection<System.ServiceModel.InstanceContext> Extensions { get { throw null; } }
        public System.ServiceModel.ServiceHostBase Host { get { throw null; } }
        public System.Collections.Generic.ICollection<System.ServiceModel.Channels.IChannel> IncomingChannels { get { throw null; } }
        public int ManualFlowControlLimit { get { throw null; } set { } }
        public System.Collections.Generic.ICollection<System.ServiceModel.Channels.IChannel> OutgoingChannels { get { throw null; } }
        public System.Threading.SynchronizationContext SynchronizationContext { get { throw null; } set { } }
        public object GetServiceInstance() { throw null; }
        public object GetServiceInstance(System.ServiceModel.Channels.Message message) { throw null; }
        public int IncrementManualFlowControlLimit(int incrementBy) { throw null; }
        protected override void OnAbort() { }
        protected override System.IAsyncResult OnBeginClose(System.TimeSpan timeout, System.AsyncCallback callback, object state) { throw null; }
        protected override System.IAsyncResult OnBeginOpen(System.TimeSpan timeout, System.AsyncCallback callback, object state) { throw null; }
        protected override void OnClose(System.TimeSpan timeout) { }
        protected override void OnClosed() { }
        protected override void OnEndClose(System.IAsyncResult result) { }
        protected override void OnEndOpen(System.IAsyncResult result) { }
        protected override void OnFaulted() { }
        protected override void OnOpen(System.TimeSpan timeout) { }
        protected override void OnOpened() { }
        protected override void OnOpening() { }
        public void ReleaseServiceInstance() { }
    }
    public enum InstanceContextMode
    {
        PerCall = 1,
        PerSession = 0,
        Single = 2,
    }
    [System.SerializableAttribute]
    public partial class InvalidMessageContractException : System.SystemException
    {
        public InvalidMessageContractException() { }
        protected InvalidMessageContractException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
        public InvalidMessageContractException(string message) { }
        public InvalidMessageContractException(string message, System.Exception innerException) { }
    }
    public partial interface IOnlineStatus
    {
        bool IsOnline { get; }
        event System.EventHandler Offline;
        event System.EventHandler Online;
    }
    public partial interface IServiceChannel : System.ServiceModel.Channels.IChannel, System.ServiceModel.ICommunicationObject, System.ServiceModel.IContextChannel, System.ServiceModel.IExtensibleObject<System.ServiceModel.IContextChannel>
    {
        System.Uri ListenUri { get; }
    }
    [System.AttributeUsageAttribute(System.AttributeTargets.Field | System.AttributeTargets.Property, Inherited=false)]
    public partial class MessageBodyMemberAttribute : System.ServiceModel.MessageContractMemberAttribute
    {
        public MessageBodyMemberAttribute() { }
        public int Order { get { throw null; } set { } }
    }
    [System.AttributeUsageAttribute(System.AttributeTargets.Class | System.AttributeTargets.Struct, AllowMultiple=false)]
    public sealed partial class MessageContractAttribute : System.Attribute
    {
        public MessageContractAttribute() { }
        public bool HasProtectionLevel { get { throw null; } }
        public bool IsWrapped { get { throw null; } set { } }
        public System.Net.Security.ProtectionLevel ProtectionLevel { get { throw null; } set { } }
        public string WrapperName { get { throw null; } set { } }
        public string WrapperNamespace { get { throw null; } set { } }
    }
    public abstract partial class MessageContractMemberAttribute : System.Attribute
    {
        protected MessageContractMemberAttribute() { }
        public bool HasProtectionLevel { get { throw null; } }
        public string Name { get { throw null; } set { } }
        public string Namespace { get { throw null; } set { } }
        public System.Net.Security.ProtectionLevel ProtectionLevel { get { throw null; } set { } }
    }
    public enum MessageCredentialType
    {
        Certificate = 3,
        IssuedToken = 4,
        None = 0,
        UserName = 2,
        Windows = 1,
    }
    [System.AttributeUsageAttribute(System.AttributeTargets.Field | System.AttributeTargets.Property, AllowMultiple=false, Inherited=false)]
    public sealed partial class MessageHeaderArrayAttribute : System.ServiceModel.MessageHeaderAttribute
    {
        public MessageHeaderArrayAttribute() { }
    }
    [System.AttributeUsageAttribute(System.AttributeTargets.Field | System.AttributeTargets.Property, AllowMultiple=false, Inherited=false)]
    public partial class MessageHeaderAttribute : System.ServiceModel.MessageContractMemberAttribute
    {
        public MessageHeaderAttribute() { }
        public string Actor { get { throw null; } set { } }
        public bool MustUnderstand { get { throw null; } set { } }
        public bool Relay { get { throw null; } set { } }
    }
    [System.SerializableAttribute]
    public partial class MessageHeaderException : System.ServiceModel.ProtocolException
    {
        public MessageHeaderException() { }
        protected MessageHeaderException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
        public MessageHeaderException(string message) { }
        public MessageHeaderException(string message, bool isDuplicate) { }
        public MessageHeaderException(string message, System.Exception innerException) { }
        public MessageHeaderException(string message, string headerName, string ns) { }
        public MessageHeaderException(string message, string headerName, string ns, bool isDuplicate) { }
        public MessageHeaderException(string message, string headerName, string ns, bool isDuplicate, System.Exception innerException) { }
        public MessageHeaderException(string message, string headerName, string ns, System.Exception innerException) { }
        public string HeaderName { get { throw null; } }
        public string HeaderNamespace { get { throw null; } }
        public bool IsDuplicate { get { throw null; } }
    }
    public partial class MessageHeader<T>
    {
        public MessageHeader() { }
        public MessageHeader(T content) { }
        public MessageHeader(T content, bool mustUnderstand, string actor, bool relay) { }
        public string Actor { get { throw null; } set { } }
        public T Content { get { throw null; } set { } }
        public bool MustUnderstand { get { throw null; } set { } }
        public bool Relay { get { throw null; } set { } }
        public System.ServiceModel.Channels.MessageHeader GetUntypedHeader(string name, string ns) { throw null; }
    }
    [System.AttributeUsageAttribute(System.AttributeTargets.Parameter | System.AttributeTargets.ReturnValue, Inherited=false)]
    public sealed partial class MessageParameterAttribute : System.Attribute
    {
        public MessageParameterAttribute() { }
        public string Name { get { throw null; } set { } }
    }
    [System.AttributeUsageAttribute(System.AttributeTargets.Field | System.AttributeTargets.Property, Inherited=false)]
    public sealed partial class MessagePropertyAttribute : System.Attribute
    {
        public MessagePropertyAttribute() { }
        public string Name { get { throw null; } set { } }
    }
    public partial class MessageSecurityOverHttp
    {
        public MessageSecurityOverHttp() { }
        public System.ServiceModel.Security.SecurityAlgorithmSuite AlgorithmSuite { get { throw null; } set { } }
        public System.ServiceModel.MessageCredentialType ClientCredentialType { get { throw null; } set { } }
        public bool NegotiateServiceCredential { get { throw null; } set { } }
        protected virtual bool IsSecureConversationEnabled() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeAlgorithmSuite() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeClientCredentialType() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeNegotiateServiceCredential() { throw null; }
    }
    public sealed partial class MessageSecurityOverMsmq
    {
        public MessageSecurityOverMsmq() { }
        [System.ComponentModel.DefaultValueAttribute(typeof(System.ServiceModel.Security.SecurityAlgorithmSuite), "Default")]
        public System.ServiceModel.Security.SecurityAlgorithmSuite AlgorithmSuite { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(System.ServiceModel.MessageCredentialType.Windows)]
        public System.ServiceModel.MessageCredentialType ClientCredentialType { get { throw null; } set { } }
    }
    public sealed partial class MessageSecurityOverTcp
    {
        public MessageSecurityOverTcp() { }
        [System.ComponentModel.DefaultValueAttribute(typeof(System.ServiceModel.Security.SecurityAlgorithmSuite), "Default")]
        public System.ServiceModel.Security.SecurityAlgorithmSuite AlgorithmSuite { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(System.ServiceModel.MessageCredentialType.Windows)]
        public System.ServiceModel.MessageCredentialType ClientCredentialType { get { throw null; } set { } }
    }
    public abstract partial class MessageSecurityVersion
    {
        internal MessageSecurityVersion() { }
        public abstract System.ServiceModel.Security.BasicSecurityProfileVersion BasicSecurityProfileVersion { get; }
        public static System.ServiceModel.MessageSecurityVersion Default { get { throw null; } }
        public System.ServiceModel.Security.SecureConversationVersion SecureConversationVersion { get { throw null; } }
        public abstract System.ServiceModel.Security.SecurityPolicyVersion SecurityPolicyVersion { get; }
        public System.IdentityModel.Selectors.SecurityTokenVersion SecurityTokenVersion { get { throw null; } }
        public System.ServiceModel.Security.SecurityVersion SecurityVersion { get { throw null; } }
        public System.ServiceModel.Security.TrustVersion TrustVersion { get { throw null; } }
        public static System.ServiceModel.MessageSecurityVersion WSSecurity10WSTrust13WSSecureConversation13WSSecurityPolicy12BasicSecurityProfile10 { get { throw null; } }
        public static System.ServiceModel.MessageSecurityVersion WSSecurity10WSTrustFebruary2005WSSecureConversationFebruary2005WSSecurityPolicy11BasicSecurityProfile10 { get { throw null; } }
        public static System.ServiceModel.MessageSecurityVersion WSSecurity11WSTrust13WSSecureConversation13WSSecurityPolicy12 { get { throw null; } }
        public static System.ServiceModel.MessageSecurityVersion WSSecurity11WSTrust13WSSecureConversation13WSSecurityPolicy12BasicSecurityProfile10 { get { throw null; } }
        public static System.ServiceModel.MessageSecurityVersion WSSecurity11WSTrustFebruary2005WSSecureConversationFebruary2005WSSecurityPolicy11 { get { throw null; } }
        public static System.ServiceModel.MessageSecurityVersion WSSecurity11WSTrustFebruary2005WSSecureConversationFebruary2005WSSecurityPolicy11BasicSecurityProfile10 { get { throw null; } }
    }
    public enum MsmqAuthenticationMode
    {
        Certificate = 2,
        None = 0,
        WindowsDomain = 1,
    }
    public abstract partial class MsmqBindingBase : System.ServiceModel.Channels.Binding, System.ServiceModel.Channels.IBindingRuntimePreferences
    {
        protected MsmqBindingBase() { }
        [System.ComponentModel.DefaultValueAttribute(null)]
        public System.Uri CustomDeadLetterQueue { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(System.ServiceModel.DeadLetterQueue.System)]
        public System.ServiceModel.DeadLetterQueue DeadLetterQueue { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool Durable { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool ExactlyOnce { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute((long)65536)]
        public long MaxReceivedMessageSize { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(2)]
        public int MaxRetryCycles { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool ReceiveContextEnabled { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(System.ServiceModel.ReceiveErrorHandling.Fault)]
        public System.ServiceModel.ReceiveErrorHandling ReceiveErrorHandling { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(5)]
        public int ReceiveRetryCount { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(typeof(System.TimeSpan), "00:30:00")]
        public System.TimeSpan RetryCycleDelay { get { throw null; } set { } }
        public override string Scheme { get { throw null; } }
        bool System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously { get { throw null; } }
        [System.ComponentModel.DefaultValueAttribute(typeof(System.TimeSpan), "1.00:00:00")]
        public System.TimeSpan TimeToLive { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool UseMsmqTracing { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool UseSourceJournal { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(typeof(System.TimeSpan), "00:05:00")]
        public System.TimeSpan ValidityDuration { get { throw null; } set { } }
    }
    public enum MsmqEncryptionAlgorithm
    {
        Aes = 1,
        RC4Stream = 0,
    }
    [System.SerializableAttribute]
    public partial class MsmqException : System.Runtime.InteropServices.ExternalException
    {
        public MsmqException() { }
        protected MsmqException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
        public MsmqException(string message) { }
        public MsmqException(string message, System.Exception inner) { }
        public MsmqException(string message, int error) { }
    }
    [System.SerializableAttribute]
    public partial class MsmqPoisonMessageException : System.ServiceModel.PoisonMessageException
    {
        public MsmqPoisonMessageException() { }
        public MsmqPoisonMessageException(long messageLookupId) { }
        public MsmqPoisonMessageException(long messageLookupId, System.Exception innerException) { }
        protected MsmqPoisonMessageException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
        public MsmqPoisonMessageException(string message) { }
        public MsmqPoisonMessageException(string message, System.Exception innerException) { }
        public long MessageLookupId { get { throw null; } }
        [System.Security.SecurityCriticalAttribute]
        [System.Security.Permissions.SecurityPermissionAttribute(System.Security.Permissions.SecurityAction.LinkDemand, SerializationFormatter=true)]
        public override void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
    }
    public enum MsmqSecureHashAlgorithm
    {
        MD5 = 0,
        Sha1 = 1,
        Sha256 = 2,
        Sha512 = 3,
    }
    public sealed partial class MsmqTransportSecurity
    {
        public MsmqTransportSecurity() { }
        public MsmqTransportSecurity(System.ServiceModel.MsmqTransportSecurity other) { }
        [System.ComponentModel.DefaultValueAttribute(System.ServiceModel.MsmqAuthenticationMode.WindowsDomain)]
        public System.ServiceModel.MsmqAuthenticationMode MsmqAuthenticationMode { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(System.ServiceModel.MsmqEncryptionAlgorithm.RC4Stream)]
        public System.ServiceModel.MsmqEncryptionAlgorithm MsmqEncryptionAlgorithm { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(System.Net.Security.ProtectionLevel.Sign)]
        public System.Net.Security.ProtectionLevel MsmqProtectionLevel { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(System.ServiceModel.MsmqSecureHashAlgorithm.Sha256)]
        public System.ServiceModel.MsmqSecureHashAlgorithm MsmqSecureHashAlgorithm { get { throw null; } set { } }
    }
    public sealed partial class NamedPipeTransportSecurity
    {
        public NamedPipeTransportSecurity() { }
        [System.ComponentModel.DefaultValueAttribute(System.Net.Security.ProtectionLevel.EncryptAndSign)]
        public System.Net.Security.ProtectionLevel ProtectionLevel { get { throw null; } set { } }
    }
    public partial class NetHttpBinding : System.ServiceModel.HttpBindingBase
    {
        public NetHttpBinding() { }
        public NetHttpBinding(System.ServiceModel.BasicHttpSecurityMode securityMode) { }
        public NetHttpBinding(System.ServiceModel.BasicHttpSecurityMode securityMode, bool reliableSessionEnabled) { }
        public NetHttpBinding(string configurationName) { }
        [System.ComponentModel.DefaultValueAttribute(System.ServiceModel.NetHttpMessageEncoding.Binary)]
        public System.ServiceModel.NetHttpMessageEncoding MessageEncoding { get { throw null; } set { } }
        public System.ServiceModel.OptionalReliableSession ReliableSession { get { throw null; } set { } }
        public System.ServiceModel.BasicHttpSecurity Security { get { throw null; } set { } }
        public System.ServiceModel.Channels.WebSocketTransportSettings WebSocketSettings { get { throw null; } }
        public override System.ServiceModel.Channels.IChannelFactory<TChannel> BuildChannelFactory<TChannel>(System.ServiceModel.Channels.BindingParameterCollection parameters) { throw null; }
        public override System.ServiceModel.Channels.BindingElementCollection CreateBindingElements() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeReliableSession() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeSecurity() { throw null; }
    }
    public enum NetHttpMessageEncoding
    {
        Binary = 0,
        Mtom = 2,
        Text = 1,
    }
    public partial class NetHttpsBinding : System.ServiceModel.HttpBindingBase
    {
        public NetHttpsBinding() { }
        public NetHttpsBinding(System.ServiceModel.BasicHttpsSecurityMode securityMode) { }
        public NetHttpsBinding(System.ServiceModel.BasicHttpsSecurityMode securityMode, bool reliableSessionEnabled) { }
        public NetHttpsBinding(string configurationName) { }
        [System.ComponentModel.DefaultValueAttribute(System.ServiceModel.NetHttpMessageEncoding.Binary)]
        public System.ServiceModel.NetHttpMessageEncoding MessageEncoding { get { throw null; } set { } }
        public System.ServiceModel.OptionalReliableSession ReliableSession { get { throw null; } set { } }
        public System.ServiceModel.BasicHttpsSecurity Security { get { throw null; } set { } }
        public System.ServiceModel.Channels.WebSocketTransportSettings WebSocketSettings { get { throw null; } }
        public override System.ServiceModel.Channels.IChannelFactory<TChannel> BuildChannelFactory<TChannel>(System.ServiceModel.Channels.BindingParameterCollection parameters) { throw null; }
        public override System.ServiceModel.Channels.BindingElementCollection CreateBindingElements() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeReliableSession() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeSecurity() { throw null; }
    }
    public partial class NetMsmqBinding : System.ServiceModel.MsmqBindingBase
    {
        public NetMsmqBinding() { }
        public NetMsmqBinding(System.ServiceModel.NetMsmqSecurityMode securityMode) { }
        public NetMsmqBinding(string configurationName) { }
        public System.ServiceModel.EnvelopeVersion EnvelopeVersion { get { throw null; } }
        [System.ComponentModel.DefaultValueAttribute((long)524288)]
        public long MaxBufferPoolSize { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(System.ServiceModel.QueueTransferProtocol.Native)]
        public System.ServiceModel.QueueTransferProtocol QueueTransferProtocol { get { throw null; } set { } }
        public System.Xml.XmlDictionaryReaderQuotas ReaderQuotas { get { throw null; } set { } }
        public System.ServiceModel.NetMsmqSecurity Security { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool UseActiveDirectory { get { throw null; } set { } }
        public override System.ServiceModel.Channels.BindingElementCollection CreateBindingElements() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeReaderQuotas() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeSecurity() { throw null; }
    }
    public sealed partial class NetMsmqSecurity
    {
        public NetMsmqSecurity() { }
        public System.ServiceModel.MessageSecurityOverMsmq Message { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(System.ServiceModel.NetMsmqSecurityMode.Transport)]
        public System.ServiceModel.NetMsmqSecurityMode Mode { get { throw null; } set { } }
        public System.ServiceModel.MsmqTransportSecurity Transport { get { throw null; } set { } }
    }
    public enum NetMsmqSecurityMode
    {
        Both = 3,
        Message = 2,
        None = 0,
        Transport = 1,
    }
    public partial class NetNamedPipeBinding : System.ServiceModel.Channels.Binding, System.ServiceModel.Channels.IBindingRuntimePreferences
    {
        public NetNamedPipeBinding() { }
        public NetNamedPipeBinding(System.ServiceModel.NetNamedPipeSecurityMode securityMode) { }
        public NetNamedPipeBinding(string configurationName) { }
        public System.ServiceModel.EnvelopeVersion EnvelopeVersion { get { throw null; } }
        [System.ComponentModel.DefaultValueAttribute(System.ServiceModel.HostNameComparisonMode.StrongWildcard)]
        public System.ServiceModel.HostNameComparisonMode HostNameComparisonMode { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute((long)524288)]
        public long MaxBufferPoolSize { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(65536)]
        public int MaxBufferSize { get { throw null; } set { } }
        public int MaxConnections { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute((long)65536)]
        public long MaxReceivedMessageSize { get { throw null; } set { } }
        public System.Xml.XmlDictionaryReaderQuotas ReaderQuotas { get { throw null; } set { } }
        public override string Scheme { get { throw null; } }
        public System.ServiceModel.NetNamedPipeSecurity Security { get { throw null; } set { } }
        bool System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously { get { throw null; } }
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool TransactionFlow { get { throw null; } set { } }
        public System.ServiceModel.TransactionProtocol TransactionProtocol { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(System.ServiceModel.TransferMode.Buffered)]
        public System.ServiceModel.TransferMode TransferMode { get { throw null; } set { } }
        public override System.ServiceModel.Channels.BindingElementCollection CreateBindingElements() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeMaxConnections() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeReaderQuotas() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeSecurity() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeTransactionProtocol() { throw null; }
    }
    public sealed partial class NetNamedPipeSecurity
    {
        public NetNamedPipeSecurity() { }
        [System.ComponentModel.DefaultValueAttribute(System.ServiceModel.NetNamedPipeSecurityMode.Transport)]
        public System.ServiceModel.NetNamedPipeSecurityMode Mode { get { throw null; } set { } }
        public System.ServiceModel.NamedPipeTransportSecurity Transport { get { throw null; } set { } }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeTransport() { throw null; }
    }
    public enum NetNamedPipeSecurityMode
    {
        None = 0,
        Transport = 1,
    }
    [System.ObsoleteAttribute("PeerChannel feature is obsolete and will be removed in the future.", false)]
    public partial class NetPeerTcpBinding : System.ServiceModel.Channels.Binding, System.ServiceModel.Channels.IBindingRuntimePreferences
    {
        public NetPeerTcpBinding() { }
        public NetPeerTcpBinding(string configurationName) { }
        public System.ServiceModel.EnvelopeVersion EnvelopeVersion { get { throw null; } }
        public static bool IsPnrpAvailable { get { throw null; } }
        [System.ComponentModel.DefaultValueAttribute(null)]
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.PeerTransportListenAddressConverter")]
        public System.Net.IPAddress ListenIPAddress { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute((long)524288)]
        public long MaxBufferPoolSize { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute((long)65536)]
        public long MaxReceivedMessageSize { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(0)]
        public int Port { get { throw null; } set { } }
        public System.Xml.XmlDictionaryReaderQuotas ReaderQuotas { get { throw null; } set { } }
        public System.ServiceModel.PeerResolvers.PeerResolverSettings Resolver { get { throw null; } }
        public override string Scheme { get { throw null; } }
        public System.ServiceModel.PeerSecuritySettings Security { get { throw null; } set { } }
        bool System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously { get { throw null; } }
        public override System.ServiceModel.Channels.BindingElementCollection CreateBindingElements() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeReaderQuotas() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeSecurity() { throw null; }
    }
    public partial class NetTcpBinding : System.ServiceModel.Channels.Binding, System.ServiceModel.Channels.IBindingRuntimePreferences
    {
        public NetTcpBinding() { }
        public NetTcpBinding(System.ServiceModel.SecurityMode securityMode) { }
        public NetTcpBinding(System.ServiceModel.SecurityMode securityMode, bool reliableSessionEnabled) { }
        public NetTcpBinding(string configurationName) { }
        public System.ServiceModel.EnvelopeVersion EnvelopeVersion { get { throw null; } }
        [System.ComponentModel.DefaultValueAttribute(System.ServiceModel.HostNameComparisonMode.StrongWildcard)]
        public System.ServiceModel.HostNameComparisonMode HostNameComparisonMode { get { throw null; } set { } }
        public int ListenBacklog { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute((long)524288)]
        public long MaxBufferPoolSize { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(65536)]
        public int MaxBufferSize { get { throw null; } set { } }
        public int MaxConnections { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute((long)65536)]
        public long MaxReceivedMessageSize { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool PortSharingEnabled { get { throw null; } set { } }
        public System.Xml.XmlDictionaryReaderQuotas ReaderQuotas { get { throw null; } set { } }
        public System.ServiceModel.OptionalReliableSession ReliableSession { get { throw null; } set { } }
        public override string Scheme { get { throw null; } }
        public System.ServiceModel.NetTcpSecurity Security { get { throw null; } set { } }
        bool System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously { get { throw null; } }
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool TransactionFlow { get { throw null; } set { } }
        public System.ServiceModel.TransactionProtocol TransactionProtocol { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(System.ServiceModel.TransferMode.Buffered)]
        public System.ServiceModel.TransferMode TransferMode { get { throw null; } set { } }
        public override System.ServiceModel.Channels.BindingElementCollection CreateBindingElements() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeListenBacklog() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeMaxConnections() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeReaderQuotas() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeReliableSession() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeSecurity() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeTransactionProtocol() { throw null; }
    }
    [System.Runtime.CompilerServices.TypeForwardedFromAttribute("System.WorkflowServices, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
    public partial class NetTcpContextBinding : System.ServiceModel.NetTcpBinding
    {
        public NetTcpContextBinding() { }
        public NetTcpContextBinding(System.ServiceModel.SecurityMode securityMode) { }
        public NetTcpContextBinding(System.ServiceModel.SecurityMode securityMode, bool reliableSessionEnabled) { }
        public NetTcpContextBinding(string configName) { }
        [System.ComponentModel.DefaultValueAttribute(null)]
        public System.Uri ClientCallbackAddress { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool ContextManagementEnabled { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(System.Net.Security.ProtectionLevel.Sign)]
        public System.Net.Security.ProtectionLevel ContextProtectionLevel { get { throw null; } set { } }
        public override System.ServiceModel.Channels.BindingElementCollection CreateBindingElements() { throw null; }
    }
    public sealed partial class NetTcpSecurity
    {
        public NetTcpSecurity() { }
        public System.ServiceModel.MessageSecurityOverTcp Message { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(System.ServiceModel.SecurityMode.Transport)]
        public System.ServiceModel.SecurityMode Mode { get { throw null; } set { } }
        public System.ServiceModel.TcpTransportSecurity Transport { get { throw null; } set { } }
    }
    public sealed partial class NonDualMessageSecurityOverHttp : System.ServiceModel.MessageSecurityOverHttp
    {
        public NonDualMessageSecurityOverHttp() { }
        public bool EstablishSecurityContext { get { throw null; } set { } }
        protected override bool IsSecureConversationEnabled() { throw null; }
    }
    [System.AttributeUsageAttribute(System.AttributeTargets.Method)]
    public sealed partial class OperationBehaviorAttribute : System.Attribute, System.ServiceModel.Description.IOperationBehavior
    {
        public OperationBehaviorAttribute() { }
        public bool AutoDisposeParameters { get { throw null; } set { } }
        public System.ServiceModel.ImpersonationOption Impersonation { get { throw null; } set { } }
        public System.ServiceModel.ReleaseInstanceMode ReleaseInstanceMode { get { throw null; } set { } }
        public bool TransactionAutoComplete { get { throw null; } set { } }
        public bool TransactionScopeRequired { get { throw null; } set { } }
        void System.ServiceModel.Description.IOperationBehavior.AddBindingParameters(System.ServiceModel.Description.OperationDescription description, System.ServiceModel.Channels.BindingParameterCollection parameters) { }
        void System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior(System.ServiceModel.Description.OperationDescription description, System.ServiceModel.Dispatcher.ClientOperation proxy) { }
        void System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.OperationDescription description, System.ServiceModel.Dispatcher.DispatchOperation dispatch) { }
        void System.ServiceModel.Description.IOperationBehavior.Validate(System.ServiceModel.Description.OperationDescription description) { }
    }
    public sealed partial class OperationContext : System.ServiceModel.IExtensibleObject<System.ServiceModel.OperationContext>
    {
        public OperationContext(System.ServiceModel.IContextChannel channel) { }
        public System.ServiceModel.IContextChannel Channel { get { throw null; } }
        public System.Security.Claims.ClaimsPrincipal ClaimsPrincipal { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        public static System.ServiceModel.OperationContext Current { get { throw null; } set { } }
        public System.ServiceModel.Dispatcher.EndpointDispatcher EndpointDispatcher { get { throw null; } set { } }
        public System.ServiceModel.IExtensionCollection<System.ServiceModel.OperationContext> Extensions { get { throw null; } }
        public bool HasSupportingTokens { get { throw null; } }
        public System.ServiceModel.ServiceHostBase Host { get { throw null; } }
        public System.ServiceModel.Channels.MessageHeaders IncomingMessageHeaders { get { throw null; } }
        public System.ServiceModel.Channels.MessageProperties IncomingMessageProperties { get { throw null; } }
        public System.ServiceModel.Channels.MessageVersion IncomingMessageVersion { get { throw null; } }
        public System.ServiceModel.InstanceContext InstanceContext { get { throw null; } }
        public bool IsUserContext { get { throw null; } }
        public System.ServiceModel.Channels.MessageHeaders OutgoingMessageHeaders { get { throw null; } }
        public System.ServiceModel.Channels.MessageProperties OutgoingMessageProperties { get { throw null; } }
        public System.ServiceModel.Channels.RequestContext RequestContext { get { throw null; } set { } }
        public System.ServiceModel.ServiceSecurityContext ServiceSecurityContext { get { throw null; } }
        public string SessionId { get { throw null; } }
        public System.Collections.Generic.ICollection<System.ServiceModel.Security.SupportingTokenSpecification> SupportingTokens { get { throw null; } }
        public event System.EventHandler OperationCompleted { add { } remove { } }
        public T GetCallbackChannel<T>() { throw null; }
        public void SetTransactionComplete() { }
    }
    public sealed partial class OperationContextScope : System.IDisposable
    {
        public OperationContextScope(System.ServiceModel.IContextChannel channel) { }
        public OperationContextScope(System.ServiceModel.OperationContext context) { }
        public void Dispose() { }
    }
    [System.AttributeUsageAttribute(System.AttributeTargets.Method)]
    public sealed partial class OperationContractAttribute : System.Attribute
    {
        public OperationContractAttribute() { }
        public string Action { get { throw null; } set { } }
        public bool AsyncPattern { get { throw null; } set { } }
        public bool HasProtectionLevel { get { throw null; } }
        public bool IsInitiating { get { throw null; } set { } }
        public bool IsOneWay { get { throw null; } set { } }
        public bool IsTerminating { get { throw null; } set { } }
        public string Name { get { throw null; } set { } }
        public System.Net.Security.ProtectionLevel ProtectionLevel { get { throw null; } set { } }
        public string ReplyAction { get { throw null; } set { } }
    }
    public enum OperationFormatStyle
    {
        Document = 0,
        Rpc = 1,
    }
    public enum OperationFormatUse
    {
        Encoded = 1,
        Literal = 0,
    }
    public partial class OptionalReliableSession : System.ServiceModel.ReliableSession
    {
        public OptionalReliableSession() { }
        public OptionalReliableSession(System.ServiceModel.Channels.ReliableSessionBindingElement reliableSessionBindingElement) { }
        public bool Enabled { get { throw null; } set { } }
    }
    [System.AttributeUsageAttribute(System.AttributeTargets.Field | System.AttributeTargets.Property, AllowMultiple=false, Inherited=false)]
    public sealed partial class PeerHopCountAttribute : System.ServiceModel.MessageHeaderAttribute
    {
        public PeerHopCountAttribute() { }
        public new string Actor { get { throw null; } }
        public new bool MustUnderstand { get { throw null; } }
        public new string Name { get { throw null; } }
        public new string Namespace { get { throw null; } }
        public new System.Net.Security.ProtectionLevel ProtectionLevel { get { throw null; } }
        public new bool Relay { get { throw null; } }
    }
    public enum PeerMessageOrigination
    {
        Local = 0,
        Remote = 1,
    }
    public enum PeerMessagePropagation
    {
        Local = 1,
        LocalAndRemote = 3,
        None = 0,
        Remote = 2,
    }
    public abstract partial class PeerMessagePropagationFilter
    {
        protected PeerMessagePropagationFilter() { }
        public abstract System.ServiceModel.PeerMessagePropagation ShouldMessagePropagate(System.ServiceModel.Channels.Message message, System.ServiceModel.PeerMessageOrigination origination);
    }
    public sealed partial class PeerNode : System.ServiceModel.IOnlineStatus
    {
        internal PeerNode() { }
        public bool IsOnline { get { throw null; } }
        public System.ServiceModel.PeerMessagePropagationFilter MessagePropagationFilter { get { throw null; } set { } }
        public int Port { get { throw null; } }
        public event System.EventHandler Offline { add { } remove { } }
        public event System.EventHandler Online { add { } remove { } }
        public void RefreshConnection() { }
        public override string ToString() { throw null; }
    }
    [System.Runtime.Serialization.DataContractAttribute(Name="PeerNodeAddress", Namespace="http://schemas.microsoft.com/net/2006/05/peer")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Net.IPAddress[]))]
    public sealed partial class PeerNodeAddress
    {
        public PeerNodeAddress(System.ServiceModel.EndpointAddress endpointAddress, System.Collections.ObjectModel.ReadOnlyCollection<System.Net.IPAddress> ipAddresses) { }
        public System.ServiceModel.EndpointAddress EndpointAddress { get { throw null; } }
        public System.Collections.ObjectModel.ReadOnlyCollection<System.Net.IPAddress> IPAddresses { get { throw null; } }
    }
    public abstract partial class PeerResolver
    {
        protected PeerResolver() { }
        public abstract bool CanShareReferrals { get; }
        public virtual void Initialize(System.ServiceModel.EndpointAddress address, System.ServiceModel.Channels.Binding binding, System.ServiceModel.Description.ClientCredentials credentials, System.ServiceModel.PeerResolvers.PeerReferralPolicy referralPolicy) { }
        public abstract object Register(string meshId, System.ServiceModel.PeerNodeAddress nodeAddress, System.TimeSpan timeout);
        public abstract System.Collections.ObjectModel.ReadOnlyCollection<System.ServiceModel.PeerNodeAddress> Resolve(string meshId, int maxAddresses, System.TimeSpan timeout);
        public abstract void Unregister(object registrationId, System.TimeSpan timeout);
        public abstract void Update(object registrationId, System.ServiceModel.PeerNodeAddress updatedNodeAddress, System.TimeSpan timeout);
    }
    public sealed partial class PeerSecuritySettings
    {
        public PeerSecuritySettings() { }
        public System.ServiceModel.SecurityMode Mode { get { throw null; } set { } }
        public System.ServiceModel.PeerTransportSecuritySettings Transport { get { throw null; } set { } }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeMode() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeTransport() { throw null; }
    }
    public enum PeerTransportCredentialType
    {
        Certificate = 1,
        Password = 0,
    }
    public sealed partial class PeerTransportSecuritySettings
    {
        public PeerTransportSecuritySettings() { }
        public System.ServiceModel.PeerTransportCredentialType CredentialType { get { throw null; } set { } }
    }
    [System.SerializableAttribute]
    public partial class PoisonMessageException : System.ServiceModel.CommunicationException
    {
        public PoisonMessageException() { }
        protected PoisonMessageException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
        public PoisonMessageException(string message) { }
        public PoisonMessageException(string message, System.Exception innerException) { }
    }
    [System.SerializableAttribute]
    public partial class ProtocolException : System.ServiceModel.CommunicationException
    {
        public ProtocolException() { }
        protected ProtocolException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
        public ProtocolException(string message) { }
        public ProtocolException(string message, System.Exception innerException) { }
    }
    public enum QueuedDeliveryRequirementsMode
    {
        Allowed = 0,
        NotAllowed = 2,
        Required = 1,
    }
    public enum QueueTransferProtocol
    {
        Native = 0,
        Srmp = 1,
        SrmpSecure = 2,
    }
    [System.SerializableAttribute]
    public partial class QuotaExceededException : System.SystemException
    {
        public QuotaExceededException() { }
        protected QuotaExceededException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
        public QuotaExceededException(string message) { }
        public QuotaExceededException(string message, System.Exception innerException) { }
    }
    [System.AttributeUsageAttribute(System.AttributeTargets.Method)]
    public sealed partial class ReceiveContextEnabledAttribute : System.Attribute, System.ServiceModel.Description.IOperationBehavior
    {
        public ReceiveContextEnabledAttribute() { }
        public bool ManualControl { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public void AddBindingParameters(System.ServiceModel.Description.OperationDescription operationDescription, System.ServiceModel.Channels.BindingParameterCollection bindingParameters) { }
        public void ApplyClientBehavior(System.ServiceModel.Description.OperationDescription operationDescription, System.ServiceModel.Dispatcher.ClientOperation clientOperation) { }
        public void ApplyDispatchBehavior(System.ServiceModel.Description.OperationDescription operationDescription, System.ServiceModel.Dispatcher.DispatchOperation dispatchOperation) { }
        public void Validate(System.ServiceModel.Description.OperationDescription operationDescription) { }
    }
    public enum ReceiveErrorHandling
    {
        Drop = 1,
        Fault = 0,
        Move = 3,
        Reject = 2,
    }
    public enum ReleaseInstanceMode
    {
        AfterCall = 2,
        BeforeAndAfterCall = 3,
        BeforeCall = 1,
        None = 0,
    }
    [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.ReliableMessagingVersionConverter")]
    public abstract partial class ReliableMessagingVersion
    {
        internal ReliableMessagingVersion() { }
        public static System.ServiceModel.ReliableMessagingVersion Default { get { throw null; } }
        public static System.ServiceModel.ReliableMessagingVersion WSReliableMessaging11 { get { throw null; } }
        public static System.ServiceModel.ReliableMessagingVersion WSReliableMessagingFebruary2005 { get { throw null; } }
    }
    public partial class ReliableSession
    {
        public ReliableSession() { }
        public ReliableSession(System.ServiceModel.Channels.ReliableSessionBindingElement reliableSessionBindingElement) { }
        public System.TimeSpan InactivityTimeout { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool Ordered { get { throw null; } set { } }
    }
    public partial class RsaEndpointIdentity : System.ServiceModel.EndpointIdentity
    {
        public RsaEndpointIdentity(System.IdentityModel.Claims.Claim identity) { }
        public RsaEndpointIdentity(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate) { }
        public RsaEndpointIdentity(string publicKey) { }
    }
    public enum SecurityMode
    {
        Message = 2,
        None = 0,
        Transport = 1,
        TransportWithMessageCredential = 3,
    }
    [System.SerializableAttribute]
    public partial class ServerTooBusyException : System.ServiceModel.CommunicationException
    {
        public ServerTooBusyException() { }
        protected ServerTooBusyException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
        public ServerTooBusyException(string message) { }
        public ServerTooBusyException(string message, System.Exception innerException) { }
    }
    [System.SerializableAttribute]
    public partial class ServiceActivationException : System.ServiceModel.CommunicationException
    {
        public ServiceActivationException() { }
        protected ServiceActivationException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
        public ServiceActivationException(string message) { }
        public ServiceActivationException(string message, System.Exception innerException) { }
    }
    public partial class ServiceAuthenticationManager
    {
        public ServiceAuthenticationManager() { }
        public virtual System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.Policy.IAuthorizationPolicy> Authenticate(System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.Policy.IAuthorizationPolicy> authPolicy, System.Uri listenUri, ref System.ServiceModel.Channels.Message message) { throw null; }
    }
    public partial class ServiceAuthorizationManager
    {
        public ServiceAuthorizationManager() { }
        public virtual bool CheckAccess(System.ServiceModel.OperationContext operationContext) { throw null; }
        public virtual bool CheckAccess(System.ServiceModel.OperationContext operationContext, ref System.ServiceModel.Channels.Message message) { throw null; }
        protected virtual bool CheckAccessCore(System.ServiceModel.OperationContext operationContext) { throw null; }
        protected virtual System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.Policy.IAuthorizationPolicy> GetAuthorizationPolicies(System.ServiceModel.OperationContext operationContext) { throw null; }
    }
    [System.AttributeUsageAttribute(System.AttributeTargets.Class)]
    public sealed partial class ServiceBehaviorAttribute : System.Attribute, System.ServiceModel.Description.IServiceBehavior
    {
        public ServiceBehaviorAttribute() { }
        [System.ComponentModel.DefaultValueAttribute(System.ServiceModel.AddressFilterMode.Exact)]
        public System.ServiceModel.AddressFilterMode AddressFilterMode { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool AutomaticSessionShutdown { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(System.ServiceModel.ConcurrencyMode.Single)]
        public System.ServiceModel.ConcurrencyMode ConcurrencyMode { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(null)]
        public string ConfigurationName { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool EnsureOrderedDispatch { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool IgnoreExtensionDataObject { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool IncludeExceptionDetailInFaults { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(System.ServiceModel.InstanceContextMode.PerSession)]
        public System.ServiceModel.InstanceContextMode InstanceContextMode { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(2147483647)]
        public int MaxItemsInObjectGraph { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(null)]
        public string Name { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(null)]
        public string Namespace { get { throw null; } set { } }
        public bool ReleaseServiceInstanceOnTransactionComplete { get { throw null; } set { } }
        public bool TransactionAutoCompleteOnSessionClose { get { throw null; } set { } }
        public System.Transactions.IsolationLevel TransactionIsolationLevel { get { throw null; } set { } }
        public string TransactionTimeout { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool UseSynchronizationContext { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool ValidateMustUnderstand { get { throw null; } set { } }
        public object GetWellKnownSingleton() { throw null; }
        public void SetWellKnownSingleton(object value) { }
        public bool ShouldSerializeConfigurationName() { throw null; }
        public bool ShouldSerializeReleaseServiceInstanceOnTransactionComplete() { throw null; }
        public bool ShouldSerializeTransactionAutoCompleteOnSessionClose() { throw null; }
        public bool ShouldSerializeTransactionIsolationLevel() { throw null; }
        public bool ShouldSerializeTransactionTimeout() { throw null; }
        void System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription description, System.ServiceModel.ServiceHostBase serviceHostBase, System.Collections.ObjectModel.Collection<System.ServiceModel.Description.ServiceEndpoint> endpoints, System.ServiceModel.Channels.BindingParameterCollection parameters) { }
        void System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription description, System.ServiceModel.ServiceHostBase serviceHostBase) { }
        void System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription description, System.ServiceModel.ServiceHostBase serviceHostBase) { }
    }
    public partial class ServiceConfiguration
    {
        internal ServiceConfiguration() { }
        public System.ServiceModel.Description.ServiceAuthenticationBehavior Authentication { get { throw null; } }
        public System.ServiceModel.Description.ServiceAuthorizationBehavior Authorization { get { throw null; } }
        public System.Collections.ObjectModel.ReadOnlyCollection<System.Uri> BaseAddresses { get { throw null; } }
        public System.TimeSpan CloseTimeout { get { throw null; } set { } }
        public System.ServiceModel.Description.ServiceCredentials Credentials { get { throw null; } }
        public System.ServiceModel.Description.ServiceDescription Description { get { throw null; } }
        public System.IdentityModel.Configuration.IdentityConfiguration IdentityConfiguration { get { throw null; } set { } }
        public System.TimeSpan OpenTimeout { get { throw null; } set { } }
        public bool UseIdentityConfiguration { get { throw null; } set { } }
        public void AddServiceEndpoint(System.ServiceModel.Description.ServiceEndpoint endpoint) { }
        public System.ServiceModel.Description.ServiceEndpoint AddServiceEndpoint(System.Type contractType, System.ServiceModel.Channels.Binding binding, string address) { throw null; }
        public System.ServiceModel.Description.ServiceEndpoint AddServiceEndpoint(System.Type contractType, System.ServiceModel.Channels.Binding binding, string address, System.Uri listenUri) { throw null; }
        public System.ServiceModel.Description.ServiceEndpoint AddServiceEndpoint(System.Type contractType, System.ServiceModel.Channels.Binding binding, System.Uri address) { throw null; }
        public System.ServiceModel.Description.ServiceEndpoint AddServiceEndpoint(System.Type contractType, System.ServiceModel.Channels.Binding binding, System.Uri address, System.Uri listenUri) { throw null; }
        public System.Collections.ObjectModel.Collection<System.ServiceModel.Description.ServiceEndpoint> EnableProtocol(System.ServiceModel.Channels.Binding protocol) { throw null; }
        public void LoadFromConfiguration() { }
        public void LoadFromConfiguration(System.Configuration.Configuration configuration) { }
        public void SetEndpointAddress(System.ServiceModel.Description.ServiceEndpoint endpoint, string relativeAddress) { }
    }
    [System.AttributeUsageAttribute(System.AttributeTargets.Class | System.AttributeTargets.Interface, Inherited=false, AllowMultiple=false)]
    public sealed partial class ServiceContractAttribute : System.Attribute
    {
        public ServiceContractAttribute() { }
        public System.Type CallbackContract { get { throw null; } set { } }
        public string ConfigurationName { get { throw null; } set { } }
        public bool HasProtectionLevel { get { throw null; } }
        public string Name { get { throw null; } set { } }
        public string Namespace { get { throw null; } set { } }
        public System.Net.Security.ProtectionLevel ProtectionLevel { get { throw null; } set { } }
        public System.ServiceModel.SessionMode SessionMode { get { throw null; } set { } }
    }
    public partial class ServiceHost : System.ServiceModel.ServiceHostBase
    {
        protected ServiceHost() { }
        public ServiceHost(object singletonInstance, params System.Uri[] baseAddresses) { }
        public ServiceHost(System.Type serviceType, params System.Uri[] baseAddresses) { }
        public object SingletonInstance { get { throw null; } }
        public System.ServiceModel.Description.ServiceEndpoint AddServiceEndpoint(System.Type implementedContract, System.ServiceModel.Channels.Binding binding, string address) { throw null; }
        public System.ServiceModel.Description.ServiceEndpoint AddServiceEndpoint(System.Type implementedContract, System.ServiceModel.Channels.Binding binding, string address, System.Uri listenUri) { throw null; }
        public System.ServiceModel.Description.ServiceEndpoint AddServiceEndpoint(System.Type implementedContract, System.ServiceModel.Channels.Binding binding, System.Uri address) { throw null; }
        public System.ServiceModel.Description.ServiceEndpoint AddServiceEndpoint(System.Type implementedContract, System.ServiceModel.Channels.Binding binding, System.Uri address, System.Uri listenUri) { throw null; }
        protected override void ApplyConfiguration() { }
        protected override System.ServiceModel.Description.ServiceDescription CreateDescription(out System.Collections.Generic.IDictionary<string, System.ServiceModel.Description.ContractDescription> implementedContracts) { throw null; }
        protected void InitializeDescription(object singletonInstance, System.ServiceModel.UriSchemeKeyedCollection baseAddresses) { }
        protected void InitializeDescription(System.Type serviceType, System.ServiceModel.UriSchemeKeyedCollection baseAddresses) { }
        protected override void OnClosed() { }
    }
    public abstract partial class ServiceHostBase : System.ServiceModel.Channels.CommunicationObject, System.IDisposable, System.ServiceModel.IExtensibleObject<System.ServiceModel.ServiceHostBase>
    {
        protected ServiceHostBase() { }
        public System.ServiceModel.Description.ServiceAuthenticationBehavior Authentication { get { throw null; } }
        public System.ServiceModel.Description.ServiceAuthorizationBehavior Authorization { get { throw null; } }
        public System.Collections.ObjectModel.ReadOnlyCollection<System.Uri> BaseAddresses { get { throw null; } }
        public System.ServiceModel.Dispatcher.ChannelDispatcherCollection ChannelDispatchers { get { throw null; } }
        public System.TimeSpan CloseTimeout { get { throw null; } set { } }
        public System.ServiceModel.Description.ServiceCredentials Credentials { get { throw null; } }
        protected override System.TimeSpan DefaultCloseTimeout { get { throw null; } }
        protected override System.TimeSpan DefaultOpenTimeout { get { throw null; } }
        public System.ServiceModel.Description.ServiceDescription Description { get { throw null; } }
        public System.ServiceModel.IExtensionCollection<System.ServiceModel.ServiceHostBase> Extensions { get { throw null; } }
        protected internal System.Collections.Generic.IDictionary<string, System.ServiceModel.Description.ContractDescription> ImplementedContracts { get { throw null; } }
        public int ManualFlowControlLimit { get { throw null; } set { } }
        public System.TimeSpan OpenTimeout { get { throw null; } set { } }
        public event System.EventHandler<System.ServiceModel.UnknownMessageReceivedEventArgs> UnknownMessageReceived { add { } remove { } }
        protected void AddBaseAddress(System.Uri baseAddress) { }
        public virtual System.Collections.ObjectModel.ReadOnlyCollection<System.ServiceModel.Description.ServiceEndpoint> AddDefaultEndpoints() { throw null; }
        public virtual void AddServiceEndpoint(System.ServiceModel.Description.ServiceEndpoint endpoint) { }
        public System.ServiceModel.Description.ServiceEndpoint AddServiceEndpoint(string implementedContract, System.ServiceModel.Channels.Binding binding, string address) { throw null; }
        public System.ServiceModel.Description.ServiceEndpoint AddServiceEndpoint(string implementedContract, System.ServiceModel.Channels.Binding binding, string address, System.Uri listenUri) { throw null; }
        public System.ServiceModel.Description.ServiceEndpoint AddServiceEndpoint(string implementedContract, System.ServiceModel.Channels.Binding binding, System.Uri address) { throw null; }
        public System.ServiceModel.Description.ServiceEndpoint AddServiceEndpoint(string implementedContract, System.ServiceModel.Channels.Binding binding, System.Uri address, System.Uri listenUri) { throw null; }
        protected virtual void ApplyConfiguration() { }
        protected abstract System.ServiceModel.Description.ServiceDescription CreateDescription(out System.Collections.Generic.IDictionary<string, System.ServiceModel.Description.ContractDescription> implementedContracts);
        public int IncrementManualFlowControlLimit(int incrementBy) { throw null; }
        protected void InitializeDescription(System.ServiceModel.UriSchemeKeyedCollection baseAddresses) { }
        protected virtual void InitializeRuntime() { }
        protected void LoadConfigurationSection(System.ServiceModel.Configuration.ServiceElement serviceSection) { }
        protected override void OnAbort() { }
        protected override System.IAsyncResult OnBeginClose(System.TimeSpan timeout, System.AsyncCallback callback, object state) { throw null; }
        protected override System.IAsyncResult OnBeginOpen(System.TimeSpan timeout, System.AsyncCallback callback, object state) { throw null; }
        protected override void OnClose(System.TimeSpan timeout) { }
        protected override void OnClosed() { }
        protected override void OnEndClose(System.IAsyncResult result) { }
        protected override void OnEndOpen(System.IAsyncResult result) { }
        protected override void OnOpen(System.TimeSpan timeout) { }
        protected override void OnOpened() { }
        protected void ReleasePerformanceCounters() { }
        public void SetEndpointAddress(System.ServiceModel.Description.ServiceEndpoint endpoint, string relativeAddress) { }
        void System.IDisposable.Dispose() { }
    }
    [System.AttributeUsageAttribute(System.AttributeTargets.Class | System.AttributeTargets.Interface | System.AttributeTargets.Method, Inherited=true, AllowMultiple=true)]
    public sealed partial class ServiceKnownTypeAttribute : System.Attribute
    {
        public ServiceKnownTypeAttribute(string methodName) { }
        public ServiceKnownTypeAttribute(string methodName, System.Type declaringType) { }
        public ServiceKnownTypeAttribute(System.Type type) { }
        public System.Type DeclaringType { get { throw null; } }
        public string MethodName { get { throw null; } }
        public System.Type Type { get { throw null; } }
    }
    public partial class ServiceSecurityContext
    {
        public ServiceSecurityContext(System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.Policy.IAuthorizationPolicy> authorizationPolicies) { }
        public ServiceSecurityContext(System.IdentityModel.Policy.AuthorizationContext authorizationContext) { }
        public ServiceSecurityContext(System.IdentityModel.Policy.AuthorizationContext authorizationContext, System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.Policy.IAuthorizationPolicy> authorizationPolicies) { }
        public static System.ServiceModel.ServiceSecurityContext Anonymous { get { throw null; } }
        public System.IdentityModel.Policy.AuthorizationContext AuthorizationContext { get { throw null; } }
        public System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.Policy.IAuthorizationPolicy> AuthorizationPolicies { get { throw null; } set { } }
        public static System.ServiceModel.ServiceSecurityContext Current { get { throw null; } }
        public bool IsAnonymous { get { throw null; } }
        public System.Security.Principal.IIdentity PrimaryIdentity { get { throw null; } }
        public System.Security.Principal.WindowsIdentity WindowsIdentity { get { throw null; } }
    }
    public enum SessionMode
    {
        Allowed = 0,
        NotAllowed = 2,
        Required = 1,
    }
    public partial class SpnEndpointIdentity : System.ServiceModel.EndpointIdentity
    {
        public SpnEndpointIdentity(System.IdentityModel.Claims.Claim identity) { }
        public SpnEndpointIdentity(string spnName) { }
        public static System.TimeSpan SpnLookupTime { get { throw null; } set { } }
    }
    public enum TcpClientCredentialType
    {
        Certificate = 2,
        None = 0,
        Windows = 1,
    }
    public sealed partial class TcpTransportSecurity
    {
        public TcpTransportSecurity() { }
        [System.ComponentModel.DefaultValueAttribute(System.ServiceModel.TcpClientCredentialType.Windows)]
        public System.ServiceModel.TcpClientCredentialType ClientCredentialType { get { throw null; } set { } }
        public System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy ExtendedProtectionPolicy { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(System.Net.Security.ProtectionLevel.EncryptAndSign)]
        public System.Net.Security.ProtectionLevel ProtectionLevel { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(System.Security.Authentication.SslProtocols.Tls | System.Security.Authentication.SslProtocols.Tls11 | System.Security.Authentication.SslProtocols.Tls12)]
        public System.Security.Authentication.SslProtocols SslProtocols { get { throw null; } set { } }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeExtendedProtectionPolicy() { throw null; }
    }
    [System.AttributeUsageAttribute(System.AttributeTargets.Method)]
    public sealed partial class TransactionFlowAttribute : System.Attribute, System.ServiceModel.Description.IOperationBehavior
    {
        public TransactionFlowAttribute(System.ServiceModel.TransactionFlowOption transactions) { }
        public System.ServiceModel.TransactionFlowOption Transactions { get { throw null; } }
        void System.ServiceModel.Description.IOperationBehavior.AddBindingParameters(System.ServiceModel.Description.OperationDescription description, System.ServiceModel.Channels.BindingParameterCollection parameters) { }
        void System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior(System.ServiceModel.Description.OperationDescription description, System.ServiceModel.Dispatcher.ClientOperation proxy) { }
        void System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.OperationDescription description, System.ServiceModel.Dispatcher.DispatchOperation dispatch) { }
        void System.ServiceModel.Description.IOperationBehavior.Validate(System.ServiceModel.Description.OperationDescription description) { }
    }
    public enum TransactionFlowOption
    {
        Allowed = 1,
        Mandatory = 2,
        NotAllowed = 0,
    }
    [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.TransactionProtocolConverter")]
    public abstract partial class TransactionProtocol
    {
        protected TransactionProtocol() { }
        public static System.ServiceModel.TransactionProtocol Default { get { throw null; } }
        public static System.ServiceModel.TransactionProtocol OleTransactions { get { throw null; } }
        public static System.ServiceModel.TransactionProtocol WSAtomicTransaction11 { get { throw null; } }
        public static System.ServiceModel.TransactionProtocol WSAtomicTransactionOctober2004 { get { throw null; } }
    }
    public enum TransferMode
    {
        Buffered = 0,
        Streamed = 1,
        StreamedRequest = 2,
        StreamedResponse = 3,
    }
    public sealed partial class UnknownMessageReceivedEventArgs : System.EventArgs
    {
        internal UnknownMessageReceivedEventArgs() { }
        public System.ServiceModel.Channels.Message Message { get { throw null; } }
    }
    public partial class UpnEndpointIdentity : System.ServiceModel.EndpointIdentity
    {
        public UpnEndpointIdentity(System.IdentityModel.Claims.Claim identity) { }
        public UpnEndpointIdentity(string upnName) { }
    }
    public partial class UriSchemeKeyedCollection : System.Collections.Generic.SynchronizedKeyedCollection<string, System.Uri>
    {
        public UriSchemeKeyedCollection(params System.Uri[] addresses) { }
        protected override string GetKeyForItem(System.Uri item) { throw null; }
        protected override void InsertItem(int index, System.Uri item) { }
        protected override void SetItem(int index, System.Uri item) { }
    }
    public partial class WS2007FederationHttpBinding : System.ServiceModel.WSFederationHttpBinding
    {
        public WS2007FederationHttpBinding() { }
        public WS2007FederationHttpBinding(System.ServiceModel.WSFederationHttpSecurityMode securityMode) { }
        public WS2007FederationHttpBinding(System.ServiceModel.WSFederationHttpSecurityMode securityMode, bool reliableSessionEnabled) { }
        public WS2007FederationHttpBinding(string configName) { }
        protected override System.ServiceModel.Channels.SecurityBindingElement CreateMessageSecurity() { throw null; }
    }
    public partial class WS2007HttpBinding : System.ServiceModel.WSHttpBinding
    {
        public WS2007HttpBinding() { }
        public WS2007HttpBinding(System.ServiceModel.SecurityMode securityMode) { }
        public WS2007HttpBinding(System.ServiceModel.SecurityMode securityMode, bool reliableSessionEnabled) { }
        public WS2007HttpBinding(string configName) { }
        protected override System.ServiceModel.Channels.SecurityBindingElement CreateMessageSecurity() { throw null; }
    }
    public partial class WSDualHttpBinding : System.ServiceModel.Channels.Binding, System.ServiceModel.Channels.IBindingRuntimePreferences
    {
        public WSDualHttpBinding() { }
        public WSDualHttpBinding(System.ServiceModel.WSDualHttpSecurityMode securityMode) { }
        public WSDualHttpBinding(string configName) { }
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool BypassProxyOnLocal { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(null)]
        public System.Uri ClientBaseAddress { get { throw null; } set { } }
        public System.ServiceModel.EnvelopeVersion EnvelopeVersion { get { throw null; } }
        [System.ComponentModel.DefaultValueAttribute(System.ServiceModel.HostNameComparisonMode.StrongWildcard)]
        public System.ServiceModel.HostNameComparisonMode HostNameComparisonMode { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute((long)524288)]
        public long MaxBufferPoolSize { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute((long)65536)]
        public long MaxReceivedMessageSize { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(System.ServiceModel.WSMessageEncoding.Text)]
        public System.ServiceModel.WSMessageEncoding MessageEncoding { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(null)]
        public System.Uri ProxyAddress { get { throw null; } set { } }
        public System.Xml.XmlDictionaryReaderQuotas ReaderQuotas { get { throw null; } set { } }
        public System.ServiceModel.ReliableSession ReliableSession { get { throw null; } set { } }
        public override string Scheme { get { throw null; } }
        public System.ServiceModel.WSDualHttpSecurity Security { get { throw null; } set { } }
        bool System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously { get { throw null; } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.EncodingConverter")]
        public System.Text.Encoding TextEncoding { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool TransactionFlow { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool UseDefaultWebProxy { get { throw null; } set { } }
        public override System.ServiceModel.Channels.BindingElementCollection CreateBindingElements() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeReaderQuotas() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeReliableSession() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeSecurity() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeTextEncoding() { throw null; }
    }
    public sealed partial class WSDualHttpSecurity
    {
        public WSDualHttpSecurity() { }
        public System.ServiceModel.MessageSecurityOverHttp Message { get { throw null; } set { } }
        public System.ServiceModel.WSDualHttpSecurityMode Mode { get { throw null; } set { } }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeMessage() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeMode() { throw null; }
    }
    public enum WSDualHttpSecurityMode
    {
        Message = 1,
        None = 0,
    }
    public partial class WSFederationHttpBinding : System.ServiceModel.WSHttpBindingBase
    {
        public WSFederationHttpBinding() { }
        public WSFederationHttpBinding(System.ServiceModel.WSFederationHttpSecurityMode securityMode) { }
        public WSFederationHttpBinding(System.ServiceModel.WSFederationHttpSecurityMode securityMode, bool reliableSessionEnabled) { }
        public WSFederationHttpBinding(string configName) { }
        [System.ComponentModel.DefaultValueAttribute(null)]
        public System.Uri PrivacyNoticeAt { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(0)]
        public int PrivacyNoticeVersion { get { throw null; } set { } }
        public System.ServiceModel.WSFederationHttpSecurity Security { get { throw null; } set { } }
        public override System.ServiceModel.Channels.BindingElementCollection CreateBindingElements() { throw null; }
        protected override System.ServiceModel.Channels.SecurityBindingElement CreateMessageSecurity() { throw null; }
        protected override System.ServiceModel.Channels.TransportBindingElement GetTransport() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeSecurity() { throw null; }
    }
    public sealed partial class WSFederationHttpSecurity
    {
        public WSFederationHttpSecurity() { }
        public System.ServiceModel.FederatedMessageSecurityOverHttp Message { get { throw null; } set { } }
        public System.ServiceModel.WSFederationHttpSecurityMode Mode { get { throw null; } set { } }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeMessage() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeMode() { throw null; }
    }
    public enum WSFederationHttpSecurityMode
    {
        Message = 1,
        None = 0,
        TransportWithMessageCredential = 2,
    }
    public partial class WSHttpBinding : System.ServiceModel.WSHttpBindingBase
    {
        public WSHttpBinding() { }
        public WSHttpBinding(System.ServiceModel.SecurityMode securityMode) { }
        public WSHttpBinding(System.ServiceModel.SecurityMode securityMode, bool reliableSessionEnabled) { }
        public WSHttpBinding(string configName) { }
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool AllowCookies { get { throw null; } set { } }
        public System.ServiceModel.WSHttpSecurity Security { get { throw null; } set { } }
        public override System.ServiceModel.Channels.IChannelFactory<TChannel> BuildChannelFactory<TChannel>(System.ServiceModel.Channels.BindingParameterCollection parameters) { throw null; }
        public override System.ServiceModel.Channels.BindingElementCollection CreateBindingElements() { throw null; }
        protected override System.ServiceModel.Channels.SecurityBindingElement CreateMessageSecurity() { throw null; }
        protected override System.ServiceModel.Channels.TransportBindingElement GetTransport() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeSecurity() { throw null; }
    }
    public abstract partial class WSHttpBindingBase : System.ServiceModel.Channels.Binding, System.ServiceModel.Channels.IBindingRuntimePreferences
    {
        protected WSHttpBindingBase() { }
        protected WSHttpBindingBase(bool reliableSessionEnabled) { }
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool BypassProxyOnLocal { get { throw null; } set { } }
        public System.ServiceModel.EnvelopeVersion EnvelopeVersion { get { throw null; } }
        [System.ComponentModel.DefaultValueAttribute(System.ServiceModel.HostNameComparisonMode.StrongWildcard)]
        public System.ServiceModel.HostNameComparisonMode HostNameComparisonMode { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute((long)524288)]
        public long MaxBufferPoolSize { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute((long)65536)]
        public long MaxReceivedMessageSize { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(System.ServiceModel.WSMessageEncoding.Text)]
        public System.ServiceModel.WSMessageEncoding MessageEncoding { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(null)]
        [System.ComponentModel.TypeConverterAttribute(typeof(System.UriTypeConverter))]
        public System.Uri ProxyAddress { get { throw null; } set { } }
        public System.Xml.XmlDictionaryReaderQuotas ReaderQuotas { get { throw null; } set { } }
        public System.ServiceModel.OptionalReliableSession ReliableSession { get { throw null; } set { } }
        public override string Scheme { get { throw null; } }
        bool System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously { get { throw null; } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.EncodingConverter")]
        public System.Text.Encoding TextEncoding { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool TransactionFlow { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool UseDefaultWebProxy { get { throw null; } set { } }
        public override System.ServiceModel.Channels.BindingElementCollection CreateBindingElements() { throw null; }
        protected abstract System.ServiceModel.Channels.SecurityBindingElement CreateMessageSecurity();
        protected abstract System.ServiceModel.Channels.TransportBindingElement GetTransport();
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeReaderQuotas() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeReliableSession() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeTextEncoding() { throw null; }
    }
    [System.Runtime.CompilerServices.TypeForwardedFromAttribute("System.WorkflowServices, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
    public partial class WSHttpContextBinding : System.ServiceModel.WSHttpBinding
    {
        public WSHttpContextBinding() { }
        public WSHttpContextBinding(System.ServiceModel.SecurityMode securityMode) { }
        public WSHttpContextBinding(System.ServiceModel.SecurityMode securityMode, bool reliableSessionEnabled) { }
        public WSHttpContextBinding(string configName) { }
        [System.ComponentModel.DefaultValueAttribute(null)]
        public System.Uri ClientCallbackAddress { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool ContextManagementEnabled { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(System.Net.Security.ProtectionLevel.Sign)]
        public System.Net.Security.ProtectionLevel ContextProtectionLevel { get { throw null; } set { } }
        public override System.ServiceModel.Channels.BindingElementCollection CreateBindingElements() { throw null; }
    }
    public sealed partial class WSHttpSecurity
    {
        public WSHttpSecurity() { }
        public System.ServiceModel.NonDualMessageSecurityOverHttp Message { get { throw null; } set { } }
        public System.ServiceModel.SecurityMode Mode { get { throw null; } set { } }
        public System.ServiceModel.HttpTransportSecurity Transport { get { throw null; } set { } }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeMessage() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeMode() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeTransport() { throw null; }
    }
    public enum WSMessageEncoding
    {
        Mtom = 1,
        Text = 0,
    }
    public partial class X509CertificateEndpointIdentity : System.ServiceModel.EndpointIdentity
    {
        public X509CertificateEndpointIdentity(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate) { }
        public X509CertificateEndpointIdentity(System.Security.Cryptography.X509Certificates.X509Certificate2 primaryCertificate, System.Security.Cryptography.X509Certificates.X509Certificate2Collection supportingCertificates) { }
        public System.Security.Cryptography.X509Certificates.X509Certificate2Collection Certificates { get { throw null; } }
    }
    [System.AttributeUsageAttribute(System.AttributeTargets.Class | System.AttributeTargets.Interface | System.AttributeTargets.Method, Inherited=false, AllowMultiple=false)]
    public sealed partial class XmlSerializerFormatAttribute : System.Attribute
    {
        public XmlSerializerFormatAttribute() { }
        public System.ServiceModel.OperationFormatStyle Style { get { throw null; } set { } }
        public bool SupportFaults { get { throw null; } set { } }
        public System.ServiceModel.OperationFormatUse Use { get { throw null; } set { } }
    }
    [System.Windows.Markup.ContentPropertyAttribute("Expression")]
    public partial class XPathMessageQuery : System.ServiceModel.Dispatcher.MessageQuery
    {
        public XPathMessageQuery() { }
        public XPathMessageQuery(string expression) { }
        public XPathMessageQuery(string expression, System.Xml.XmlNamespaceManager namespaces) { }
        public XPathMessageQuery(string expression, System.Xml.Xsl.XsltContext context) { }
        [System.ComponentModel.DefaultValueAttribute("")]
        public string Expression { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(null)]
        public System.Xml.XmlNamespaceManager Namespaces { get { throw null; } set { } }
        public override System.ServiceModel.Dispatcher.MessageQueryCollection CreateMessageQueryCollection() { throw null; }
        public override TResult Evaluate<TResult>(System.ServiceModel.Channels.Message message) { throw null; }
        public override TResult Evaluate<TResult>(System.ServiceModel.Channels.MessageBuffer buffer) { throw null; }
    }
}
namespace System.ServiceModel.Activation
{
    [System.AttributeUsageAttribute(System.AttributeTargets.Class)]
    public sealed partial class AspNetCompatibilityRequirementsAttribute : System.Attribute, System.ServiceModel.Description.IServiceBehavior
    {
        public AspNetCompatibilityRequirementsAttribute() { }
        public System.ServiceModel.Activation.AspNetCompatibilityRequirementsMode RequirementsMode { get { throw null; } set { } }
        void System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription description, System.ServiceModel.ServiceHostBase serviceHostBase, System.Collections.ObjectModel.Collection<System.ServiceModel.Description.ServiceEndpoint> endpoints, System.ServiceModel.Channels.BindingParameterCollection parameters) { }
        void System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription description, System.ServiceModel.ServiceHostBase serviceHostBase) { }
        void System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription description, System.ServiceModel.ServiceHostBase serviceHostBase) { }
    }
    public enum AspNetCompatibilityRequirementsMode
    {
        Allowed = 1,
        NotAllowed = 0,
        Required = 2,
    }
    public abstract partial class ServiceHostFactoryBase
    {
        protected ServiceHostFactoryBase() { }
        public abstract System.ServiceModel.ServiceHostBase CreateServiceHost(string constructorString, System.Uri[] baseAddresses);
    }
    public sealed partial class VirtualPathExtension : System.ServiceModel.IExtension<System.ServiceModel.ServiceHostBase>
    {
        internal VirtualPathExtension() { }
        public string ApplicationVirtualPath { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        public string SiteName { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        public string VirtualPath { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        public void Attach(System.ServiceModel.ServiceHostBase owner) { }
        public void Detach(System.ServiceModel.ServiceHostBase owner) { }
    }
}
namespace System.ServiceModel.Activation.Configuration
{
    public sealed partial class DiagnosticSection : System.Configuration.ConfigurationSection
    {
        public DiagnosticSection() { }
        [System.Configuration.ConfigurationPropertyAttribute("performanceCountersEnabled", DefaultValue=true)]
        public bool PerformanceCountersEnabled { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
    }
    public sealed partial class NetPipeSection : System.Configuration.ConfigurationSection
    {
        public NetPipeSection() { }
        [System.Configuration.ConfigurationPropertyAttribute("allowAccounts")]
        public System.ServiceModel.Activation.Configuration.SecurityIdentifierElementCollection AllowAccounts { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("maxPendingAccepts", DefaultValue=0)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=0)]
        public int MaxPendingAccepts { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("maxPendingConnections", DefaultValue=100)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=0)]
        public int MaxPendingConnections { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("receiveTimeout", DefaultValue="00:00:30")]
        public System.TimeSpan ReceiveTimeout { get { throw null; } set { } }
        protected override void InitializeDefault() { }
    }
    public sealed partial class NetTcpSection : System.Configuration.ConfigurationSection
    {
        public NetTcpSection() { }
        [System.Configuration.ConfigurationPropertyAttribute("allowAccounts")]
        public System.ServiceModel.Activation.Configuration.SecurityIdentifierElementCollection AllowAccounts { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("listenBacklog", DefaultValue=0)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=0)]
        public int ListenBacklog { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("maxPendingAccepts", DefaultValue=0)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=0)]
        public int MaxPendingAccepts { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("maxPendingConnections", DefaultValue=100)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=0)]
        public int MaxPendingConnections { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("receiveTimeout", DefaultValue="00:00:30")]
        public System.TimeSpan ReceiveTimeout { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("teredoEnabled", DefaultValue=false)]
        public bool TeredoEnabled { get { throw null; } set { } }
        protected override void InitializeDefault() { }
    }
    public sealed partial class SecurityIdentifierElement : System.Configuration.ConfigurationElement
    {
        public SecurityIdentifierElement() { }
        public SecurityIdentifierElement(System.Security.Principal.SecurityIdentifier sid) { }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Activation.Configuration.SecurityIdentifierConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("securityIdentifier", DefaultValue=null, Options=System.Configuration.ConfigurationPropertyOptions.IsKey)]
        public System.Security.Principal.SecurityIdentifier SecurityIdentifier { get { throw null; } set { } }
    }
    [System.Configuration.ConfigurationCollectionAttribute(typeof(System.ServiceModel.Activation.Configuration.SecurityIdentifierElement))]
    public sealed partial class SecurityIdentifierElementCollection : System.ServiceModel.Configuration.ServiceModelConfigurationElementCollection<System.ServiceModel.Activation.Configuration.SecurityIdentifierElement>
    {
        public SecurityIdentifierElementCollection() { }
        protected override object GetElementKey(System.Configuration.ConfigurationElement element) { throw null; }
    }
    public sealed partial class ServiceModelActivationSectionGroup : System.Configuration.ConfigurationSectionGroup
    {
        public ServiceModelActivationSectionGroup() { }
        public System.ServiceModel.Activation.Configuration.DiagnosticSection Diagnostics { get { throw null; } }
        public System.ServiceModel.Activation.Configuration.NetPipeSection NetPipe { get { throw null; } }
        public System.ServiceModel.Activation.Configuration.NetTcpSection NetTcp { get { throw null; } }
        public static System.ServiceModel.Activation.Configuration.ServiceModelActivationSectionGroup GetSectionGroup(System.Configuration.Configuration config) { throw null; }
    }
}
namespace System.ServiceModel.Channels
{
    public abstract partial class AddressHeader
    {
        protected AddressHeader() { }
        public abstract string Name { get; }
        public abstract string Namespace { get; }
        public static System.ServiceModel.Channels.AddressHeader CreateAddressHeader(object value) { throw null; }
        public static System.ServiceModel.Channels.AddressHeader CreateAddressHeader(object value, System.Runtime.Serialization.XmlObjectSerializer serializer) { throw null; }
        public static System.ServiceModel.Channels.AddressHeader CreateAddressHeader(string name, string ns, object value) { throw null; }
        public static System.ServiceModel.Channels.AddressHeader CreateAddressHeader(string name, string ns, object value, System.Runtime.Serialization.XmlObjectSerializer serializer) { throw null; }
        public override bool Equals(object obj) { throw null; }
        public virtual System.Xml.XmlDictionaryReader GetAddressHeaderReader() { throw null; }
        public override int GetHashCode() { throw null; }
        public T GetValue<T>() { throw null; }
        public T GetValue<T>(System.Runtime.Serialization.XmlObjectSerializer serializer) { throw null; }
        protected abstract void OnWriteAddressHeaderContents(System.Xml.XmlDictionaryWriter writer);
        protected virtual void OnWriteStartAddressHeader(System.Xml.XmlDictionaryWriter writer) { }
        public System.ServiceModel.Channels.MessageHeader ToMessageHeader() { throw null; }
        public void WriteAddressHeader(System.Xml.XmlDictionaryWriter writer) { }
        public void WriteAddressHeader(System.Xml.XmlWriter writer) { }
        public void WriteAddressHeaderContents(System.Xml.XmlDictionaryWriter writer) { }
        public void WriteStartAddressHeader(System.Xml.XmlDictionaryWriter writer) { }
    }
    public sealed partial class AddressHeaderCollection : System.Collections.ObjectModel.ReadOnlyCollection<System.ServiceModel.Channels.AddressHeader>
    {
        public AddressHeaderCollection() : base (default(System.Collections.Generic.IList<System.ServiceModel.Channels.AddressHeader>)) { }
        public AddressHeaderCollection(System.Collections.Generic.IEnumerable<System.ServiceModel.Channels.AddressHeader> addressHeaders) : base (default(System.Collections.Generic.IList<System.ServiceModel.Channels.AddressHeader>)) { }
        public void AddHeadersTo(System.ServiceModel.Channels.Message message) { }
        public System.ServiceModel.Channels.AddressHeader[] FindAll(string name, string ns) { throw null; }
        public System.ServiceModel.Channels.AddressHeader FindHeader(string name, string ns) { throw null; }
    }
    public sealed partial class AddressingVersion
    {
        internal AddressingVersion() { }
        public static System.ServiceModel.Channels.AddressingVersion None { get { throw null; } }
        public static System.ServiceModel.Channels.AddressingVersion WSAddressing10 { get { throw null; } }
        public static System.ServiceModel.Channels.AddressingVersion WSAddressingAugust2004 { get { throw null; } }
        public override string ToString() { throw null; }
    }
    public sealed partial class ApplicationContainerSettings
    {
        internal ApplicationContainerSettings() { }
        public const int CurrentSession = -1;
        public const int ServiceSession = 0;
        public string PackageFullName { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public int SessionId { get { throw null; } set { } }
    }
    public sealed partial class AsymmetricSecurityBindingElement : System.ServiceModel.Channels.SecurityBindingElement, System.ServiceModel.Description.IPolicyExportExtension
    {
        public AsymmetricSecurityBindingElement() { }
        public AsymmetricSecurityBindingElement(System.ServiceModel.Security.Tokens.SecurityTokenParameters recipientTokenParameters) { }
        public AsymmetricSecurityBindingElement(System.ServiceModel.Security.Tokens.SecurityTokenParameters recipientTokenParameters, System.ServiceModel.Security.Tokens.SecurityTokenParameters initiatorTokenParameters) { }
        public bool AllowSerializedSigningTokenOnReply { get { throw null; } set { } }
        public System.ServiceModel.Security.Tokens.SecurityTokenParameters InitiatorTokenParameters { get { throw null; } set { } }
        public System.ServiceModel.Security.MessageProtectionOrder MessageProtectionOrder { get { throw null; } set { } }
        public System.ServiceModel.Security.Tokens.SecurityTokenParameters RecipientTokenParameters { get { throw null; } set { } }
        public bool RequireSignatureConfirmation { get { throw null; } set { } }
        protected override System.ServiceModel.Channels.IChannelFactory<TChannel> BuildChannelFactoryCore<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        protected override System.ServiceModel.Channels.IChannelListener<TChannel> BuildChannelListenerCore<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override System.ServiceModel.Channels.BindingElement Clone() { throw null; }
        public override T GetProperty<T>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override void SetKeyDerivation(bool requireDerivedKeys) { }
        void System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy(System.ServiceModel.Description.MetadataExporter exporter, System.ServiceModel.Description.PolicyConversionContext context) { }
        public override string ToString() { throw null; }
    }
    public sealed partial class BinaryMessageEncodingBindingElement : System.ServiceModel.Channels.MessageEncodingBindingElement, System.ServiceModel.Description.IPolicyExportExtension, System.ServiceModel.Description.IWsdlExportExtension
    {
        public BinaryMessageEncodingBindingElement() { }
        [System.ComponentModel.DefaultValueAttribute(System.ServiceModel.Channels.CompressionFormat.None)]
        public System.ServiceModel.Channels.CompressionFormat CompressionFormat { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(64)]
        public int MaxReadPoolSize { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(2048)]
        public int MaxSessionSize { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(16)]
        public int MaxWritePoolSize { get { throw null; } set { } }
        public override System.ServiceModel.Channels.MessageVersion MessageVersion { get { throw null; } set { } }
        public System.Xml.XmlDictionaryReaderQuotas ReaderQuotas { get { throw null; } set { } }
        public override System.ServiceModel.Channels.IChannelFactory<TChannel> BuildChannelFactory<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override System.ServiceModel.Channels.IChannelListener<TChannel> BuildChannelListener<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override bool CanBuildChannelListener<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override System.ServiceModel.Channels.BindingElement Clone() { throw null; }
        public override System.ServiceModel.Channels.MessageEncoderFactory CreateMessageEncoderFactory() { throw null; }
        public override T GetProperty<T>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeMessageVersion() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeReaderQuotas() { throw null; }
        void System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy(System.ServiceModel.Description.MetadataExporter exporter, System.ServiceModel.Description.PolicyConversionContext policyContext) { }
        void System.ServiceModel.Description.IWsdlExportExtension.ExportContract(System.ServiceModel.Description.WsdlExporter exporter, System.ServiceModel.Description.WsdlContractConversionContext context) { }
        void System.ServiceModel.Description.IWsdlExportExtension.ExportEndpoint(System.ServiceModel.Description.WsdlExporter exporter, System.ServiceModel.Description.WsdlEndpointConversionContext context) { }
    }
    public abstract partial class Binding : System.ServiceModel.IDefaultCommunicationTimeouts
    {
        protected Binding() { }
        protected Binding(string name, string ns) { }
        [System.ComponentModel.DefaultValueAttribute(typeof(System.TimeSpan), "00:01:00")]
        public System.TimeSpan CloseTimeout { get { throw null; } set { } }
        public System.ServiceModel.Channels.MessageVersion MessageVersion { get { throw null; } }
        public string Name { get { throw null; } set { } }
        public string Namespace { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(typeof(System.TimeSpan), "00:01:00")]
        public System.TimeSpan OpenTimeout { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(typeof(System.TimeSpan), "00:10:00")]
        public System.TimeSpan ReceiveTimeout { get { throw null; } set { } }
        public abstract string Scheme { get; }
        [System.ComponentModel.DefaultValueAttribute(typeof(System.TimeSpan), "00:01:00")]
        public System.TimeSpan SendTimeout { get { throw null; } set { } }
        public System.ServiceModel.Channels.IChannelFactory<TChannel> BuildChannelFactory<TChannel>(params object[] parameters) { throw null; }
        public virtual System.ServiceModel.Channels.IChannelFactory<TChannel> BuildChannelFactory<TChannel>(System.ServiceModel.Channels.BindingParameterCollection parameters) { throw null; }
        public virtual System.ServiceModel.Channels.IChannelListener<TChannel> BuildChannelListener<TChannel>(params object[] parameters) where TChannel : class, System.ServiceModel.Channels.IChannel { throw null; }
        public virtual System.ServiceModel.Channels.IChannelListener<TChannel> BuildChannelListener<TChannel>(System.ServiceModel.Channels.BindingParameterCollection parameters) where TChannel : class, System.ServiceModel.Channels.IChannel { throw null; }
        public virtual System.ServiceModel.Channels.IChannelListener<TChannel> BuildChannelListener<TChannel>(System.Uri listenUriBaseAddress, params object[] parameters) where TChannel : class, System.ServiceModel.Channels.IChannel { throw null; }
        public virtual System.ServiceModel.Channels.IChannelListener<TChannel> BuildChannelListener<TChannel>(System.Uri listenUriBaseAddress, System.ServiceModel.Channels.BindingParameterCollection parameters) where TChannel : class, System.ServiceModel.Channels.IChannel { throw null; }
        public virtual System.ServiceModel.Channels.IChannelListener<TChannel> BuildChannelListener<TChannel>(System.Uri listenUriBaseAddress, string listenUriRelativeAddress, params object[] parameters) where TChannel : class, System.ServiceModel.Channels.IChannel { throw null; }
        public virtual System.ServiceModel.Channels.IChannelListener<TChannel> BuildChannelListener<TChannel>(System.Uri listenUriBaseAddress, string listenUriRelativeAddress, System.ServiceModel.Channels.BindingParameterCollection parameters) where TChannel : class, System.ServiceModel.Channels.IChannel { throw null; }
        public virtual System.ServiceModel.Channels.IChannelListener<TChannel> BuildChannelListener<TChannel>(System.Uri listenUriBaseAddress, string listenUriRelativeAddress, System.ServiceModel.Description.ListenUriMode listenUriMode, params object[] parameters) where TChannel : class, System.ServiceModel.Channels.IChannel { throw null; }
        public virtual System.ServiceModel.Channels.IChannelListener<TChannel> BuildChannelListener<TChannel>(System.Uri listenUriBaseAddress, string listenUriRelativeAddress, System.ServiceModel.Description.ListenUriMode listenUriMode, System.ServiceModel.Channels.BindingParameterCollection parameters) where TChannel : class, System.ServiceModel.Channels.IChannel { throw null; }
        public bool CanBuildChannelFactory<TChannel>(params object[] parameters) { throw null; }
        public virtual bool CanBuildChannelFactory<TChannel>(System.ServiceModel.Channels.BindingParameterCollection parameters) { throw null; }
        public bool CanBuildChannelListener<TChannel>(params object[] parameters) where TChannel : class, System.ServiceModel.Channels.IChannel { throw null; }
        public virtual bool CanBuildChannelListener<TChannel>(System.ServiceModel.Channels.BindingParameterCollection parameters) where TChannel : class, System.ServiceModel.Channels.IChannel { throw null; }
        public abstract System.ServiceModel.Channels.BindingElementCollection CreateBindingElements();
        public T GetProperty<T>(System.ServiceModel.Channels.BindingParameterCollection parameters) where T : class { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeName() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeNamespace() { throw null; }
    }
    public partial class BindingContext
    {
        public BindingContext(System.ServiceModel.Channels.CustomBinding binding, System.ServiceModel.Channels.BindingParameterCollection parameters) { }
        public BindingContext(System.ServiceModel.Channels.CustomBinding binding, System.ServiceModel.Channels.BindingParameterCollection parameters, System.Uri listenUriBaseAddress, string listenUriRelativeAddress, System.ServiceModel.Description.ListenUriMode listenUriMode) { }
        public System.ServiceModel.Channels.CustomBinding Binding { get { throw null; } }
        public System.ServiceModel.Channels.BindingParameterCollection BindingParameters { get { throw null; } }
        public System.Uri ListenUriBaseAddress { get { throw null; } set { } }
        public System.ServiceModel.Description.ListenUriMode ListenUriMode { get { throw null; } set { } }
        public string ListenUriRelativeAddress { get { throw null; } set { } }
        public System.ServiceModel.Channels.BindingElementCollection RemainingBindingElements { get { throw null; } }
        public System.ServiceModel.Channels.IChannelFactory<TChannel> BuildInnerChannelFactory<TChannel>() { throw null; }
        public System.ServiceModel.Channels.IChannelListener<TChannel> BuildInnerChannelListener<TChannel>() where TChannel : class, System.ServiceModel.Channels.IChannel { throw null; }
        public bool CanBuildInnerChannelFactory<TChannel>() { throw null; }
        public bool CanBuildInnerChannelListener<TChannel>() where TChannel : class, System.ServiceModel.Channels.IChannel { throw null; }
        public System.ServiceModel.Channels.BindingContext Clone() { throw null; }
        public T GetInnerProperty<T>() where T : class { throw null; }
    }
    public abstract partial class BindingElement
    {
        protected BindingElement() { }
        protected BindingElement(System.ServiceModel.Channels.BindingElement elementToBeCloned) { }
        public virtual System.ServiceModel.Channels.IChannelFactory<TChannel> BuildChannelFactory<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public virtual System.ServiceModel.Channels.IChannelListener<TChannel> BuildChannelListener<TChannel>(System.ServiceModel.Channels.BindingContext context) where TChannel : class, System.ServiceModel.Channels.IChannel { throw null; }
        public virtual bool CanBuildChannelFactory<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public virtual bool CanBuildChannelListener<TChannel>(System.ServiceModel.Channels.BindingContext context) where TChannel : class, System.ServiceModel.Channels.IChannel { throw null; }
        public abstract System.ServiceModel.Channels.BindingElement Clone();
        public abstract T GetProperty<T>(System.ServiceModel.Channels.BindingContext context) where T : class;
    }
    public partial class BindingElementCollection : System.Collections.ObjectModel.Collection<System.ServiceModel.Channels.BindingElement>
    {
        public BindingElementCollection() { }
        public BindingElementCollection(System.Collections.Generic.IEnumerable<System.ServiceModel.Channels.BindingElement> elements) { }
        public BindingElementCollection(System.ServiceModel.Channels.BindingElement[] elements) { }
        public void AddRange(params System.ServiceModel.Channels.BindingElement[] elements) { }
        public System.ServiceModel.Channels.BindingElementCollection Clone() { throw null; }
        public bool Contains(System.Type bindingElementType) { throw null; }
        public System.Collections.ObjectModel.Collection<T> FindAll<T>() { throw null; }
        public T Find<T>() { throw null; }
        protected override void InsertItem(int index, System.ServiceModel.Channels.BindingElement item) { }
        public System.Collections.ObjectModel.Collection<T> RemoveAll<T>() { throw null; }
        public T Remove<T>() { throw null; }
        protected override void SetItem(int index, System.ServiceModel.Channels.BindingElement item) { }
    }
    public partial class BindingParameterCollection : System.Collections.Generic.KeyedByTypeCollection<object>
    {
        public BindingParameterCollection() { }
    }
    public abstract partial class BodyWriter
    {
        protected BodyWriter(bool isBuffered) { }
        public bool IsBuffered { get { throw null; } }
        public System.IAsyncResult BeginWriteBodyContents(System.Xml.XmlDictionaryWriter writer, System.AsyncCallback callback, object state) { throw null; }
        public System.ServiceModel.Channels.BodyWriter CreateBufferedCopy(int maxBufferSize) { throw null; }
        public void EndWriteBodyContents(System.IAsyncResult result) { }
        protected virtual System.IAsyncResult OnBeginWriteBodyContents(System.Xml.XmlDictionaryWriter writer, System.AsyncCallback callback, object state) { throw null; }
        protected virtual System.ServiceModel.Channels.BodyWriter OnCreateBufferedCopy(int maxBufferSize) { throw null; }
        protected virtual void OnEndWriteBodyContents(System.IAsyncResult result) { }
        protected abstract void OnWriteBodyContents(System.Xml.XmlDictionaryWriter writer);
        public void WriteBodyContents(System.Xml.XmlDictionaryWriter writer) { }
    }
    public abstract partial class BufferManager
    {
        protected BufferManager() { }
        public abstract void Clear();
        public static System.ServiceModel.Channels.BufferManager CreateBufferManager(long maxBufferPoolSize, int maxBufferSize) { throw null; }
        public abstract void ReturnBuffer(byte[] buffer);
        public abstract byte[] TakeBuffer(int bufferSize);
    }
    [System.SerializableAttribute]
    public partial class CallbackContextMessageProperty : System.ServiceModel.Channels.IMessageProperty
    {
        public CallbackContextMessageProperty(System.Collections.Generic.IDictionary<string, string> context) { }
        public CallbackContextMessageProperty(System.ServiceModel.EndpointAddress callbackAddress) { }
        public CallbackContextMessageProperty(System.ServiceModel.EndpointAddress listenAddress, System.Collections.Generic.IDictionary<string, string> context) { }
        public CallbackContextMessageProperty(string listenAddress, System.Collections.Generic.IDictionary<string, string> context) { }
        public CallbackContextMessageProperty(System.Uri listenAddress, System.Collections.Generic.IDictionary<string, string> context) { }
        public System.ServiceModel.EndpointAddress CallbackAddress { get { throw null; } }
        public System.Collections.Generic.IDictionary<string, string> Context { get { throw null; } }
        public static string Name { get { throw null; } }
        public void AddOrReplaceInMessage(System.ServiceModel.Channels.Message message) { }
        public void AddOrReplaceInMessageProperties(System.ServiceModel.Channels.MessageProperties properties) { }
        public System.ServiceModel.EndpointAddress CreateCallbackAddress(System.Uri listenAddress) { throw null; }
        public System.ServiceModel.Channels.IMessageProperty CreateCopy() { throw null; }
        public void GetListenAddressAndContext(out System.ServiceModel.EndpointAddress listenAddress, out System.Collections.Generic.IDictionary<string, string> context) { throw null; }
        public static bool TryGet(System.ServiceModel.Channels.Message message, out System.ServiceModel.Channels.CallbackContextMessageProperty contextMessageProperty) { throw null; }
        public static bool TryGet(System.ServiceModel.Channels.MessageProperties properties, out System.ServiceModel.Channels.CallbackContextMessageProperty contextMessageProperty) { throw null; }
    }
    public abstract partial class ChannelBase : System.ServiceModel.Channels.CommunicationObject, System.ServiceModel.Channels.IChannel, System.ServiceModel.ICommunicationObject, System.ServiceModel.IDefaultCommunicationTimeouts
    {
        protected ChannelBase(System.ServiceModel.Channels.ChannelManagerBase channelManager) { }
        protected override System.TimeSpan DefaultCloseTimeout { get { throw null; } }
        protected override System.TimeSpan DefaultOpenTimeout { get { throw null; } }
        protected System.TimeSpan DefaultReceiveTimeout { get { throw null; } }
        protected System.TimeSpan DefaultSendTimeout { get { throw null; } }
        protected System.ServiceModel.Channels.ChannelManagerBase Manager { get { throw null; } }
        System.TimeSpan System.ServiceModel.IDefaultCommunicationTimeouts.CloseTimeout { get { throw null; } }
        System.TimeSpan System.ServiceModel.IDefaultCommunicationTimeouts.OpenTimeout { get { throw null; } }
        System.TimeSpan System.ServiceModel.IDefaultCommunicationTimeouts.ReceiveTimeout { get { throw null; } }
        System.TimeSpan System.ServiceModel.IDefaultCommunicationTimeouts.SendTimeout { get { throw null; } }
        public virtual T GetProperty<T>() where T : class { throw null; }
        protected override void OnClosed() { }
    }
    public abstract partial class ChannelFactoryBase : System.ServiceModel.Channels.ChannelManagerBase, System.ServiceModel.Channels.IChannelFactory, System.ServiceModel.ICommunicationObject
    {
        protected ChannelFactoryBase() { }
        protected ChannelFactoryBase(System.ServiceModel.IDefaultCommunicationTimeouts timeouts) { }
        protected override System.TimeSpan DefaultCloseTimeout { get { throw null; } }
        protected override System.TimeSpan DefaultOpenTimeout { get { throw null; } }
        protected override System.TimeSpan DefaultReceiveTimeout { get { throw null; } }
        protected override System.TimeSpan DefaultSendTimeout { get { throw null; } }
        public virtual T GetProperty<T>() where T : class { throw null; }
        protected override void OnAbort() { }
        protected override System.IAsyncResult OnBeginClose(System.TimeSpan timeout, System.AsyncCallback callback, object state) { throw null; }
        protected override void OnClose(System.TimeSpan timeout) { }
        protected override void OnEndClose(System.IAsyncResult result) { }
    }
    public abstract partial class ChannelFactoryBase<TChannel> : System.ServiceModel.Channels.ChannelFactoryBase, System.ServiceModel.Channels.IChannelFactory, System.ServiceModel.Channels.IChannelFactory<TChannel>, System.ServiceModel.ICommunicationObject
    {
        protected ChannelFactoryBase() { }
        protected ChannelFactoryBase(System.ServiceModel.IDefaultCommunicationTimeouts timeouts) { }
        public TChannel CreateChannel(System.ServiceModel.EndpointAddress address) { throw null; }
        public TChannel CreateChannel(System.ServiceModel.EndpointAddress address, System.Uri via) { throw null; }
        protected override void OnAbort() { }
        protected override System.IAsyncResult OnBeginClose(System.TimeSpan timeout, System.AsyncCallback callback, object state) { throw null; }
        protected override void OnClose(System.TimeSpan timeout) { }
        protected abstract TChannel OnCreateChannel(System.ServiceModel.EndpointAddress address, System.Uri via);
        protected override void OnEndClose(System.IAsyncResult result) { }
        protected void ValidateCreateChannel() { }
    }
    public abstract partial class ChannelListenerBase : System.ServiceModel.Channels.ChannelManagerBase, System.ServiceModel.Channels.IChannelListener, System.ServiceModel.ICommunicationObject
    {
        protected ChannelListenerBase() { }
        protected ChannelListenerBase(System.ServiceModel.IDefaultCommunicationTimeouts timeouts) { }
        protected override System.TimeSpan DefaultCloseTimeout { get { throw null; } }
        protected override System.TimeSpan DefaultOpenTimeout { get { throw null; } }
        protected override System.TimeSpan DefaultReceiveTimeout { get { throw null; } }
        protected override System.TimeSpan DefaultSendTimeout { get { throw null; } }
        public abstract System.Uri Uri { get; }
        public System.IAsyncResult BeginWaitForChannel(System.TimeSpan timeout, System.AsyncCallback callback, object state) { throw null; }
        public bool EndWaitForChannel(System.IAsyncResult result) { throw null; }
        public virtual T GetProperty<T>() where T : class { throw null; }
        protected abstract System.IAsyncResult OnBeginWaitForChannel(System.TimeSpan timeout, System.AsyncCallback callback, object state);
        protected abstract bool OnEndWaitForChannel(System.IAsyncResult result);
        protected abstract bool OnWaitForChannel(System.TimeSpan timeout);
        public bool WaitForChannel(System.TimeSpan timeout) { throw null; }
    }
    public abstract partial class ChannelListenerBase<TChannel> : System.ServiceModel.Channels.ChannelListenerBase, System.ServiceModel.Channels.IChannelListener, System.ServiceModel.Channels.IChannelListener<TChannel>, System.ServiceModel.ICommunicationObject where TChannel : class, System.ServiceModel.Channels.IChannel
    {
        protected ChannelListenerBase() { }
        protected ChannelListenerBase(System.ServiceModel.IDefaultCommunicationTimeouts timeouts) { }
        public TChannel AcceptChannel() { throw null; }
        public TChannel AcceptChannel(System.TimeSpan timeout) { throw null; }
        public System.IAsyncResult BeginAcceptChannel(System.AsyncCallback callback, object state) { throw null; }
        public System.IAsyncResult BeginAcceptChannel(System.TimeSpan timeout, System.AsyncCallback callback, object state) { throw null; }
        public TChannel EndAcceptChannel(System.IAsyncResult result) { throw null; }
        protected abstract TChannel OnAcceptChannel(System.TimeSpan timeout);
        protected abstract System.IAsyncResult OnBeginAcceptChannel(System.TimeSpan timeout, System.AsyncCallback callback, object state);
        protected abstract TChannel OnEndAcceptChannel(System.IAsyncResult result);
    }
    public abstract partial class ChannelManagerBase : System.ServiceModel.Channels.CommunicationObject, System.ServiceModel.IDefaultCommunicationTimeouts
    {
        protected ChannelManagerBase() { }
        protected abstract System.TimeSpan DefaultReceiveTimeout { get; }
        protected abstract System.TimeSpan DefaultSendTimeout { get; }
        System.TimeSpan System.ServiceModel.IDefaultCommunicationTimeouts.CloseTimeout { get { throw null; } }
        System.TimeSpan System.ServiceModel.IDefaultCommunicationTimeouts.OpenTimeout { get { throw null; } }
        System.TimeSpan System.ServiceModel.IDefaultCommunicationTimeouts.ReceiveTimeout { get { throw null; } }
        System.TimeSpan System.ServiceModel.IDefaultCommunicationTimeouts.SendTimeout { get { throw null; } }
    }
    public partial class ChannelParameterCollection : System.Collections.ObjectModel.Collection<object>
    {
        public ChannelParameterCollection() { }
        public ChannelParameterCollection(System.ServiceModel.Channels.IChannel channel) { }
        protected virtual System.ServiceModel.Channels.IChannel Channel { get { throw null; } }
        protected override void ClearItems() { }
        protected override void InsertItem(int index, object item) { }
        public void PropagateChannelParameters(System.ServiceModel.Channels.IChannel innerChannel) { }
        protected override void RemoveItem(int index) { }
        protected override void SetItem(int index, object item) { }
    }
    public partial class ChannelPoolSettings
    {
        public ChannelPoolSettings() { }
        [System.ComponentModel.DefaultValueAttribute(typeof(System.TimeSpan), "00:02:00")]
        public System.TimeSpan IdleTimeout { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(typeof(System.TimeSpan), "00:10:00")]
        public System.TimeSpan LeaseTimeout { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(10)]
        public int MaxOutboundChannelsPerEndpoint { get { throw null; } set { } }
    }
    public abstract partial class ClientWebSocketFactory
    {
        protected ClientWebSocketFactory() { }
        public abstract string WebSocketVersion { get; }
        public abstract System.Net.WebSockets.WebSocket CreateWebSocket(System.IO.Stream connection, System.ServiceModel.Channels.WebSocketTransportSettings settings);
    }
    public abstract partial class CommunicationObject : System.ServiceModel.ICommunicationObject
    {
        protected CommunicationObject() { }
        protected CommunicationObject(object mutex) { }
        protected abstract System.TimeSpan DefaultCloseTimeout { get; }
        protected abstract System.TimeSpan DefaultOpenTimeout { get; }
        protected bool IsDisposed { get { throw null; } }
        public System.ServiceModel.CommunicationState State { get { throw null; } }
        protected object ThisLock { get { throw null; } }
        public event System.EventHandler Closed { add { } remove { } }
        public event System.EventHandler Closing { add { } remove { } }
        public event System.EventHandler Faulted { add { } remove { } }
        public event System.EventHandler Opened { add { } remove { } }
        public event System.EventHandler Opening { add { } remove { } }
        public void Abort() { }
        public System.IAsyncResult BeginClose(System.AsyncCallback callback, object state) { throw null; }
        public System.IAsyncResult BeginClose(System.TimeSpan timeout, System.AsyncCallback callback, object state) { throw null; }
        public System.IAsyncResult BeginOpen(System.AsyncCallback callback, object state) { throw null; }
        public System.IAsyncResult BeginOpen(System.TimeSpan timeout, System.AsyncCallback callback, object state) { throw null; }
        public void Close() { }
        public void Close(System.TimeSpan timeout) { }
        public void EndClose(System.IAsyncResult result) { }
        public void EndOpen(System.IAsyncResult result) { }
        protected void Fault() { }
        protected virtual System.Type GetCommunicationObjectType() { throw null; }
        protected abstract void OnAbort();
        protected abstract System.IAsyncResult OnBeginClose(System.TimeSpan timeout, System.AsyncCallback callback, object state);
        protected abstract System.IAsyncResult OnBeginOpen(System.TimeSpan timeout, System.AsyncCallback callback, object state);
        protected abstract void OnClose(System.TimeSpan timeout);
        protected virtual void OnClosed() { }
        protected virtual void OnClosing() { }
        protected abstract void OnEndClose(System.IAsyncResult result);
        protected abstract void OnEndOpen(System.IAsyncResult result);
        protected virtual void OnFaulted() { }
        protected abstract void OnOpen(System.TimeSpan timeout);
        protected virtual void OnOpened() { }
        protected virtual void OnOpening() { }
        public void Open() { }
        public void Open(System.TimeSpan timeout) { }
        protected internal void ThrowIfDisposed() { }
        protected internal void ThrowIfDisposedOrImmutable() { }
        protected internal void ThrowIfDisposedOrNotOpen() { }
    }
    public sealed partial class CompositeDuplexBindingElement : System.ServiceModel.Channels.BindingElement, System.ServiceModel.Description.IPolicyExportExtension
    {
        public CompositeDuplexBindingElement() { }
        [System.ComponentModel.DefaultValueAttribute(null)]
        public System.Uri ClientBaseAddress { get { throw null; } set { } }
        public override System.ServiceModel.Channels.IChannelFactory<TChannel> BuildChannelFactory<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override System.ServiceModel.Channels.IChannelListener<TChannel> BuildChannelListener<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override bool CanBuildChannelFactory<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override bool CanBuildChannelListener<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override System.ServiceModel.Channels.BindingElement Clone() { throw null; }
        public override T GetProperty<T>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        void System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy(System.ServiceModel.Description.MetadataExporter exporter, System.ServiceModel.Description.PolicyConversionContext context) { }
    }
    public partial class CompositeDuplexBindingElementImporter : System.ServiceModel.Description.IPolicyImportExtension
    {
        public CompositeDuplexBindingElementImporter() { }
        void System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy(System.ServiceModel.Description.MetadataImporter importer, System.ServiceModel.Description.PolicyConversionContext context) { }
    }
    public enum CompressionFormat
    {
        Deflate = 2,
        GZip = 1,
        None = 0,
    }
    public abstract partial class ConnectionOrientedTransportBindingElement : System.ServiceModel.Channels.TransportBindingElement, System.ServiceModel.Description.IPolicyExportExtension, System.ServiceModel.Description.IWsdlExportExtension
    {
        internal ConnectionOrientedTransportBindingElement() { }
        [System.ComponentModel.DefaultValueAttribute(typeof(System.TimeSpan), "00:00:30")]
        public System.TimeSpan ChannelInitializationTimeout { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(8192)]
        public int ConnectionBufferSize { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(System.ServiceModel.HostNameComparisonMode.StrongWildcard)]
        public System.ServiceModel.HostNameComparisonMode HostNameComparisonMode { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(65536)]
        public int MaxBufferSize { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(typeof(System.TimeSpan), "00:00:00.2")]
        public System.TimeSpan MaxOutputDelay { get { throw null; } set { } }
        public int MaxPendingAccepts { get { throw null; } set { } }
        public int MaxPendingConnections { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(System.ServiceModel.TransferMode.Buffered)]
        public System.ServiceModel.TransferMode TransferMode { get { throw null; } set { } }
        public override bool CanBuildChannelFactory<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override bool CanBuildChannelListener<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override T GetProperty<T>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeMaxPendingAccepts() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeMaxPendingConnections() { throw null; }
        void System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy(System.ServiceModel.Description.MetadataExporter exporter, System.ServiceModel.Description.PolicyConversionContext context) { }
        void System.ServiceModel.Description.IWsdlExportExtension.ExportContract(System.ServiceModel.Description.WsdlExporter exporter, System.ServiceModel.Description.WsdlContractConversionContext context) { }
        void System.ServiceModel.Description.IWsdlExportExtension.ExportEndpoint(System.ServiceModel.Description.WsdlExporter exporter, System.ServiceModel.Description.WsdlEndpointConversionContext endpointContext) { }
    }
    [System.Runtime.CompilerServices.TypeForwardedFromAttribute("System.WorkflowServices, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
    public partial class ContextBindingElement : System.ServiceModel.Channels.BindingElement, System.ServiceModel.Channels.IContextBindingElement, System.ServiceModel.Description.IPolicyExportExtension
    {
        public ContextBindingElement() { }
        public ContextBindingElement(System.Net.Security.ProtectionLevel protectionLevel) { }
        public ContextBindingElement(System.Net.Security.ProtectionLevel protectionLevel, System.ServiceModel.Channels.ContextExchangeMechanism contextExchangeMechanism) { }
        public ContextBindingElement(System.Net.Security.ProtectionLevel protectionLevel, System.ServiceModel.Channels.ContextExchangeMechanism contextExchangeMechanism, System.Uri clientCallbackAddress) { }
        public ContextBindingElement(System.Net.Security.ProtectionLevel protectionLevel, System.ServiceModel.Channels.ContextExchangeMechanism contextExchangeMechanism, System.Uri clientCallbackAddress, bool contextManagementEnabled) { }
        [System.ComponentModel.DefaultValueAttribute(null)]
        public System.Uri ClientCallbackAddress { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        [System.ComponentModel.DefaultValueAttribute(System.ServiceModel.Channels.ContextExchangeMechanism.ContextSoapHeader)]
        public System.ServiceModel.Channels.ContextExchangeMechanism ContextExchangeMechanism { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool ContextManagementEnabled { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(System.Net.Security.ProtectionLevel.Sign)]
        public System.Net.Security.ProtectionLevel ProtectionLevel { get { throw null; } set { } }
        public override System.ServiceModel.Channels.IChannelFactory<TChannel> BuildChannelFactory<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override System.ServiceModel.Channels.IChannelListener<TChannel> BuildChannelListener<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override bool CanBuildChannelFactory<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override bool CanBuildChannelListener<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override System.ServiceModel.Channels.BindingElement Clone() { throw null; }
        public virtual void ExportPolicy(System.ServiceModel.Description.MetadataExporter exporter, System.ServiceModel.Description.PolicyConversionContext context) { }
        public override T GetProperty<T>(System.ServiceModel.Channels.BindingContext context) { throw null; }
    }
    [System.Runtime.CompilerServices.TypeForwardedFromAttribute("System.WorkflowServices, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
    public partial class ContextBindingElementImporter : System.ServiceModel.Description.IPolicyImportExtension, System.ServiceModel.Description.IWsdlImportExtension
    {
        public ContextBindingElementImporter() { }
        public void BeforeImport(System.Web.Services.Description.ServiceDescriptionCollection wsdlDocuments, System.Xml.Schema.XmlSchemaSet xmlSchemas, System.Collections.Generic.ICollection<System.Xml.XmlElement> policy) { }
        public void ImportContract(System.ServiceModel.Description.WsdlImporter importer, System.ServiceModel.Description.WsdlContractConversionContext context) { }
        public void ImportEndpoint(System.ServiceModel.Description.WsdlImporter importer, System.ServiceModel.Description.WsdlEndpointConversionContext context) { }
        public virtual void ImportPolicy(System.ServiceModel.Description.MetadataImporter importer, System.ServiceModel.Description.PolicyConversionContext context) { }
    }
    [System.Runtime.CompilerServices.TypeForwardedFromAttribute("System.WorkflowServices, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
    public enum ContextExchangeMechanism
    {
        ContextSoapHeader = 0,
        HttpCookie = 1,
    }
    [System.Runtime.CompilerServices.TypeForwardedFromAttribute("System.WorkflowServices, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
    [System.SerializableAttribute]
    public partial class ContextMessageProperty : System.ServiceModel.Channels.IMessageProperty
    {
        public ContextMessageProperty() { }
        public ContextMessageProperty(System.Collections.Generic.IDictionary<string, string> context) { }
        public System.Collections.Generic.IDictionary<string, string> Context { get { throw null; } }
        public static string Name { get { throw null; } }
        public void AddOrReplaceInMessage(System.ServiceModel.Channels.Message message) { }
        public void AddOrReplaceInMessageProperties(System.ServiceModel.Channels.MessageProperties properties) { }
        public System.ServiceModel.Channels.IMessageProperty CreateCopy() { throw null; }
        public static bool TryCreateFromHttpCookieHeader(string httpCookieHeader, out System.ServiceModel.Channels.ContextMessageProperty context) { throw null; }
        public static bool TryGet(System.ServiceModel.Channels.Message message, out System.ServiceModel.Channels.ContextMessageProperty contextMessageProperty) { throw null; }
        public static bool TryGet(System.ServiceModel.Channels.MessageProperties properties, out System.ServiceModel.Channels.ContextMessageProperty contextMessageProperty) { throw null; }
    }
    public abstract partial class CorrelationCallbackMessageProperty : System.ServiceModel.Channels.IMessageProperty
    {
        protected CorrelationCallbackMessageProperty(System.Collections.Generic.ICollection<string> neededData) { }
        protected CorrelationCallbackMessageProperty(System.ServiceModel.Channels.CorrelationCallbackMessageProperty callback) { }
        public bool IsFullyDefined { get { throw null; } }
        public static string Name { get { throw null; } }
        public System.Collections.Generic.IEnumerable<string> NeededData { get { throw null; } }
        public void AddData(string name, System.Func<string> value) { }
        public System.IAsyncResult BeginFinalizeCorrelation(System.ServiceModel.Channels.Message message, System.TimeSpan timeout, System.AsyncCallback callback, object state) { throw null; }
        public abstract System.ServiceModel.Channels.IMessageProperty CreateCopy();
        public System.ServiceModel.Channels.Message EndFinalizeCorrelation(System.IAsyncResult result) { throw null; }
        public System.ServiceModel.Channels.Message FinalizeCorrelation(System.ServiceModel.Channels.Message message, System.TimeSpan timeout) { throw null; }
        protected abstract System.IAsyncResult OnBeginFinalizeCorrelation(System.ServiceModel.Channels.Message message, System.TimeSpan timeout, System.AsyncCallback callback, object state);
        protected abstract System.ServiceModel.Channels.Message OnEndFinalizeCorrelation(System.IAsyncResult result);
        protected abstract System.ServiceModel.Channels.Message OnFinalizeCorrelation(System.ServiceModel.Channels.Message message, System.TimeSpan timeout);
        public static bool TryGet(System.ServiceModel.Channels.Message message, out System.ServiceModel.Channels.CorrelationCallbackMessageProperty property) { throw null; }
        public static bool TryGet(System.ServiceModel.Channels.MessageProperties properties, out System.ServiceModel.Channels.CorrelationCallbackMessageProperty property) { throw null; }
    }
    public abstract partial class CorrelationDataDescription
    {
        protected CorrelationDataDescription() { }
        public abstract bool IsDefault { get; }
        public abstract bool IsOptional { get; }
        public abstract bool KnownBeforeSend { get; }
        public abstract string Name { get; }
        public abstract bool ReceiveValue { get; }
        public abstract bool SendValue { get; }
    }
    public partial class CorrelationDataMessageProperty : System.ServiceModel.Channels.IMessageProperty
    {
        public CorrelationDataMessageProperty() { }
        public static string Name { get { throw null; } }
        public void Add(string name, System.Func<string> dataProvider) { }
        public static void AddData(System.ServiceModel.Channels.Message message, string name, System.Func<string> dataProvider) { }
        public System.ServiceModel.Channels.IMessageProperty CreateCopy() { throw null; }
        public bool Remove(string name) { throw null; }
        public static bool TryGet(System.ServiceModel.Channels.Message message, out System.ServiceModel.Channels.CorrelationDataMessageProperty property) { throw null; }
        public static bool TryGet(System.ServiceModel.Channels.MessageProperties properties, out System.ServiceModel.Channels.CorrelationDataMessageProperty property) { throw null; }
        public bool TryGetValue(string name, out string value) { throw null; }
    }
    public sealed partial class CorrelationKey : System.Runtime.DurableInstancing.InstanceKey
    {
        public CorrelationKey(System.Collections.Generic.IDictionary<string, string> keyData, System.Xml.Linq.XName scopeName, System.Xml.Linq.XNamespace provider) : base (default(System.Guid)) { }
        public System.Collections.Generic.IDictionary<string, string> KeyData { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        public string KeyString { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        public string Name { get { throw null; } set { } }
        public System.Xml.Linq.XNamespace Provider { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        public System.Xml.Linq.XName ScopeName { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class CorrelationMessageProperty
    {
        public CorrelationMessageProperty(System.Runtime.DurableInstancing.InstanceKey correlationKey, System.Collections.Generic.IEnumerable<System.Runtime.DurableInstancing.InstanceKey> additionalKeys) { }
        public CorrelationMessageProperty(System.Runtime.DurableInstancing.InstanceKey correlationKey, System.Collections.Generic.IEnumerable<System.Runtime.DurableInstancing.InstanceKey> additionalKeys, System.Collections.Generic.IEnumerable<System.Runtime.DurableInstancing.InstanceKey> transientCorrelations) { }
        public System.Collections.ObjectModel.ReadOnlyCollection<System.Runtime.DurableInstancing.InstanceKey> AdditionalKeys { get { throw null; } }
        public System.Runtime.DurableInstancing.InstanceKey CorrelationKey { get { throw null; } }
        public static string Name { get { throw null; } }
        public System.Collections.ObjectModel.ReadOnlyCollection<System.Runtime.DurableInstancing.InstanceKey> TransientCorrelations { get { throw null; } }
        public static bool TryGet(System.ServiceModel.Channels.Message message, out System.ServiceModel.Channels.CorrelationMessageProperty property) { throw null; }
        public static bool TryGet(System.ServiceModel.Channels.MessageProperties properties, out System.ServiceModel.Channels.CorrelationMessageProperty property) { throw null; }
    }
    [System.Windows.Markup.ContentPropertyAttribute("Elements")]
    public partial class CustomBinding : System.ServiceModel.Channels.Binding
    {
        public CustomBinding() { }
        public CustomBinding(System.Collections.Generic.IEnumerable<System.ServiceModel.Channels.BindingElement> bindingElementsInTopDownChannelStackOrder) { }
        public CustomBinding(System.ServiceModel.Channels.Binding binding) { }
        public CustomBinding(params System.ServiceModel.Channels.BindingElement[] bindingElementsInTopDownChannelStackOrder) { }
        public CustomBinding(string configurationName) { }
        public CustomBinding(string name, string ns, params System.ServiceModel.Channels.BindingElement[] bindingElementsInTopDownChannelStackOrder) { }
        public System.ServiceModel.Channels.BindingElementCollection Elements { get { throw null; } }
        public override string Scheme { get { throw null; } }
        public override System.ServiceModel.Channels.BindingElementCollection CreateBindingElements() { throw null; }
    }
    public enum DeliveryFailure
    {
        AccessDenied = 32772,
        BadDestinationQueue = 32768,
        BadEncryption = 32775,
        BadSignature = 32774,
        CouldNotEncrypt = 32776,
        HopCountExceeded = 32773,
        NotTransactionalMessage = 32778,
        NotTransactionalQueue = 32777,
        Purged = 32769,
        QueueDeleted = 49152,
        QueueExceedMaximumSize = 32771,
        QueuePurged = 49153,
        ReachQueueTimeout = 32770,
        ReceiveTimeout = 49154,
        Unknown = 0,
    }
    public enum DeliveryStatus
    {
        InDoubt = 0,
        NotDelivered = 1,
    }
    public abstract partial class FaultConverter
    {
        protected FaultConverter() { }
        public static System.ServiceModel.Channels.FaultConverter GetDefaultFaultConverter(System.ServiceModel.Channels.MessageVersion version) { throw null; }
        protected abstract bool OnTryCreateException(System.ServiceModel.Channels.Message message, System.ServiceModel.Channels.MessageFault fault, out System.Exception exception);
        protected abstract bool OnTryCreateFaultMessage(System.Exception exception, out System.ServiceModel.Channels.Message message);
        public bool TryCreateException(System.ServiceModel.Channels.Message message, System.ServiceModel.Channels.MessageFault fault, out System.Exception exception) { throw null; }
        public bool TryCreateFaultMessage(System.Exception exception, out System.ServiceModel.Channels.Message message) { throw null; }
    }
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
    [System.ObsoleteAttribute("This type is obsolete. To enable the Http CookieContainer, use the AllowCookies property on the http binding or on the HttpTransportBindingElement.", false)]
    public partial class HttpCookieContainerBindingElement : System.ServiceModel.Channels.BindingElement
    {
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.ObsoleteAttribute("This type is obsolete. To enable the Http CookieContainer, use the AllowCookies property on the http binding or on the HttpTransportBindingElement.", false)]
        public HttpCookieContainerBindingElement() { }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.ObsoleteAttribute("This type is obsolete. To enable the Http CookieContainer, use the AllowCookies property on the http binding or on the HttpTransportBindingElement.", false)]
        protected HttpCookieContainerBindingElement(System.ServiceModel.Channels.HttpCookieContainerBindingElement elementToBeCloned) { }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override System.ServiceModel.Channels.IChannelFactory<TChannel> BuildChannelFactory<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override System.ServiceModel.Channels.BindingElement Clone() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override T GetProperty<T>(System.ServiceModel.Channels.BindingContext context) { throw null; }
    }
    public partial class HttpMessageHandlerFactory
    {
        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)][System.Security.SecuritySafeCriticalAttribute]
        [System.Security.Permissions.PermissionSetAttribute(System.Security.Permissions.SecurityAction.Demand, Unrestricted=true)]
        protected HttpMessageHandlerFactory() { }
        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)][System.Security.SecuritySafeCriticalAttribute]
        [System.Security.Permissions.PermissionSetAttribute(System.Security.Permissions.SecurityAction.Demand, Unrestricted=true)]
        public HttpMessageHandlerFactory(System.Func<System.Collections.Generic.IEnumerable<System.Net.Http.DelegatingHandler>> handlers) { }
        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)][System.Security.SecuritySafeCriticalAttribute]
        [System.Security.Permissions.PermissionSetAttribute(System.Security.Permissions.SecurityAction.Demand, Unrestricted=true)]
        public HttpMessageHandlerFactory(params System.Type[] handlers) { }
        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)][System.Security.SecuritySafeCriticalAttribute]
        [System.Security.Permissions.PermissionSetAttribute(System.Security.Permissions.SecurityAction.Demand, Unrestricted=true)]
        public System.Net.Http.HttpMessageHandler Create(System.Net.Http.HttpMessageHandler innerChannel) { throw null; }
        protected virtual System.Net.Http.HttpMessageHandler OnCreate(System.Net.Http.HttpMessageHandler innerChannel) { throw null; }
    }
    public sealed partial class HttpMessageSettings : System.IEquatable<System.ServiceModel.Channels.HttpMessageSettings>
    {
        public HttpMessageSettings() { }
        public bool HttpMessagesSupported { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public bool Equals(System.ServiceModel.Channels.HttpMessageSettings other) { throw null; }
    }
    public static partial class HttpRequestMessageExtensionMethods
    {
        public static System.Security.Principal.IPrincipal GetUserPrincipal(this System.Net.Http.HttpRequestMessage httpRequestMessage) { throw null; }
        public static void SetUserPrincipal(this System.Net.Http.HttpRequestMessage httpRequestMessage, System.Security.Principal.IPrincipal user) { }
    }
    public sealed partial class HttpRequestMessageProperty : System.ServiceModel.Channels.IMessageProperty
    {
        public HttpRequestMessageProperty() { }
        public System.Net.WebHeaderCollection Headers { get { throw null; } }
        public string Method { get { throw null; } set { } }
        public static string Name { get { throw null; } }
        public string QueryString { get { throw null; } set { } }
        public bool SuppressEntityBody { get { throw null; } set { } }
        System.ServiceModel.Channels.IMessageProperty System.ServiceModel.Channels.IMessageProperty.CreateCopy() { throw null; }
    }
    public sealed partial class HttpResponseMessageProperty : System.ServiceModel.Channels.IMessageProperty
    {
        public HttpResponseMessageProperty() { }
        public System.Net.WebHeaderCollection Headers { get { throw null; } }
        public static string Name { get { throw null; } }
        public System.Net.HttpStatusCode StatusCode { get { throw null; } set { } }
        public string StatusDescription { get { throw null; } set { } }
        public bool SuppressEntityBody { get { throw null; } set { } }
        public bool SuppressPreamble { get { throw null; } set { } }
        System.ServiceModel.Channels.IMessageProperty System.ServiceModel.Channels.IMessageProperty.CreateCopy() { throw null; }
    }
    public partial class HttpsTransportBindingElement : System.ServiceModel.Channels.HttpTransportBindingElement, System.ServiceModel.Channels.ITransportTokenAssertionProvider
    {
        public HttpsTransportBindingElement() { }
        protected HttpsTransportBindingElement(System.ServiceModel.Channels.HttpsTransportBindingElement elementToBeCloned) { }
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool RequireClientCertificate { get { throw null; } set { } }
        public override string Scheme { get { throw null; } }
        public override System.ServiceModel.Channels.IChannelFactory<TChannel> BuildChannelFactory<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override System.ServiceModel.Channels.IChannelListener<TChannel> BuildChannelListener<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override System.ServiceModel.Channels.BindingElement Clone() { throw null; }
        public override T GetProperty<T>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public System.Xml.XmlElement GetTransportTokenAssertion() { throw null; }
    }
    public partial class HttpTransportBindingElement : System.ServiceModel.Channels.TransportBindingElement, System.ServiceModel.Description.IPolicyExportExtension, System.ServiceModel.Description.IWsdlExportExtension
    {
        public HttpTransportBindingElement() { }
        protected HttpTransportBindingElement(System.ServiceModel.Channels.HttpTransportBindingElement elementToBeCloned) { }
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool AllowCookies { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(System.Net.AuthenticationSchemes.Anonymous)]
        public System.Net.AuthenticationSchemes AuthenticationScheme { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool BypassProxyOnLocal { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool DecompressionEnabled { get { throw null; } set { } }
        public System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy ExtendedProtectionPolicy { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(System.ServiceModel.HostNameComparisonMode.StrongWildcard)]
        public System.ServiceModel.HostNameComparisonMode HostNameComparisonMode { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool KeepAliveEnabled { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(65536)]
        public int MaxBufferSize { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(0)]
        public int MaxPendingAccepts { get { throw null; } set { } }
        public System.ServiceModel.Channels.HttpMessageHandlerFactory MessageHandlerFactory { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(null)]
        [System.ComponentModel.TypeConverterAttribute(typeof(System.UriTypeConverter))]
        public System.Uri ProxyAddress { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(System.Net.AuthenticationSchemes.Anonymous)]
        public System.Net.AuthenticationSchemes ProxyAuthenticationScheme { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute("")]
        public string Realm { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(typeof(System.TimeSpan), "00:00:00")]
        public System.TimeSpan RequestInitializationTimeout { get { throw null; } set { } }
        public override string Scheme { get { throw null; } }
        [System.ComponentModel.DefaultValueAttribute(System.ServiceModel.TransferMode.Buffered)]
        public System.ServiceModel.TransferMode TransferMode { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool UnsafeConnectionNtlmAuthentication { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool UseDefaultWebProxy { get { throw null; } set { } }
        public System.ServiceModel.Channels.WebSocketTransportSettings WebSocketSettings { get { throw null; } set { } }
        public override System.ServiceModel.Channels.IChannelFactory<TChannel> BuildChannelFactory<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override System.ServiceModel.Channels.IChannelListener<TChannel> BuildChannelListener<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override bool CanBuildChannelFactory<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override bool CanBuildChannelListener<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override System.ServiceModel.Channels.BindingElement Clone() { throw null; }
        public override T GetProperty<T>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeExtendedProtectionPolicy() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeMessageHandlerFactory() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeWebSocketSettings() { throw null; }
        void System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy(System.ServiceModel.Description.MetadataExporter exporter, System.ServiceModel.Description.PolicyConversionContext context) { }
        void System.ServiceModel.Description.IWsdlExportExtension.ExportContract(System.ServiceModel.Description.WsdlExporter exporter, System.ServiceModel.Description.WsdlContractConversionContext context) { }
        void System.ServiceModel.Description.IWsdlExportExtension.ExportEndpoint(System.ServiceModel.Description.WsdlExporter exporter, System.ServiceModel.Description.WsdlEndpointConversionContext endpointContext) { }
        protected void UpdateAuthenticationSchemes(System.ServiceModel.Channels.BindingContext context) { }
    }
    public partial interface IAnonymousUriPrefixMatcher
    {
        void Register(System.Uri anonymousUriPrefix);
    }
    public partial interface IBindingDeliveryCapabilities
    {
        bool AssuresOrderedDelivery { get; }
        bool QueuedDelivery { get; }
    }
    public partial interface IBindingMulticastCapabilities
    {
        bool IsMulticast { get; }
    }
    public partial interface IBindingRuntimePreferences
    {
        bool ReceiveSynchronously { get; }
    }
    public partial interface IChannel : System.ServiceModel.ICommunicationObject
    {
        T GetProperty<T>() where T : class;
    }
    public partial interface IChannelFactory : System.ServiceModel.ICommunicationObject
    {
        T GetProperty<T>() where T : class;
    }
    public partial interface IChannelFactory<TChannel> : System.ServiceModel.Channels.IChannelFactory, System.ServiceModel.ICommunicationObject
    {
        TChannel CreateChannel(System.ServiceModel.EndpointAddress to);
        TChannel CreateChannel(System.ServiceModel.EndpointAddress to, System.Uri via);
    }
    public partial interface IChannelListener : System.ServiceModel.ICommunicationObject
    {
        System.Uri Uri { get; }
        System.IAsyncResult BeginWaitForChannel(System.TimeSpan timeout, System.AsyncCallback callback, object state);
        bool EndWaitForChannel(System.IAsyncResult result);
        T GetProperty<T>() where T : class;
        bool WaitForChannel(System.TimeSpan timeout);
    }
    public partial interface IChannelListener<TChannel> : System.ServiceModel.Channels.IChannelListener, System.ServiceModel.ICommunicationObject where TChannel : class, System.ServiceModel.Channels.IChannel
    {
        TChannel AcceptChannel();
        TChannel AcceptChannel(System.TimeSpan timeout);
        System.IAsyncResult BeginAcceptChannel(System.AsyncCallback callback, object state);
        System.IAsyncResult BeginAcceptChannel(System.TimeSpan timeout, System.AsyncCallback callback, object state);
        TChannel EndAcceptChannel(System.IAsyncResult result);
    }
    [System.Runtime.CompilerServices.TypeForwardedFromAttribute("System.WorkflowServices, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
    public partial interface IContextBindingElement
    {
    }
    [System.Runtime.CompilerServices.TypeForwardedFromAttribute("System.WorkflowServices, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
    public partial interface IContextManager
    {
        bool Enabled { get; set; }
        System.Collections.Generic.IDictionary<string, string> GetContext();
        void SetContext(System.Collections.Generic.IDictionary<string, string> context);
    }
    public partial interface ICorrelationDataSource
    {
        System.Collections.Generic.ICollection<System.ServiceModel.Channels.CorrelationDataDescription> DataSources { get; }
    }
    public partial interface IDuplexChannel : System.ServiceModel.Channels.IChannel, System.ServiceModel.Channels.IInputChannel, System.ServiceModel.Channels.IOutputChannel, System.ServiceModel.ICommunicationObject
    {
    }
    public partial interface IDuplexSession : System.ServiceModel.Channels.IInputSession, System.ServiceModel.Channels.IOutputSession, System.ServiceModel.Channels.ISession
    {
        System.IAsyncResult BeginCloseOutputSession(System.AsyncCallback callback, object state);
        System.IAsyncResult BeginCloseOutputSession(System.TimeSpan timeout, System.AsyncCallback callback, object state);
        void CloseOutputSession();
        void CloseOutputSession(System.TimeSpan timeout);
        void EndCloseOutputSession(System.IAsyncResult result);
    }
    public partial interface IDuplexSessionChannel : System.ServiceModel.Channels.IChannel, System.ServiceModel.Channels.IDuplexChannel, System.ServiceModel.Channels.IInputChannel, System.ServiceModel.Channels.IOutputChannel, System.ServiceModel.Channels.ISessionChannel<System.ServiceModel.Channels.IDuplexSession>, System.ServiceModel.ICommunicationObject
    {
    }
    public partial interface IHttpCookieContainerManager
    {
        System.Net.CookieContainer CookieContainer { get; set; }
    }
    public partial interface IInputChannel : System.ServiceModel.Channels.IChannel, System.ServiceModel.ICommunicationObject
    {
        System.ServiceModel.EndpointAddress LocalAddress { get; }
        System.IAsyncResult BeginReceive(System.AsyncCallback callback, object state);
        System.IAsyncResult BeginReceive(System.TimeSpan timeout, System.AsyncCallback callback, object state);
        System.IAsyncResult BeginTryReceive(System.TimeSpan timeout, System.AsyncCallback callback, object state);
        System.IAsyncResult BeginWaitForMessage(System.TimeSpan timeout, System.AsyncCallback callback, object state);
        System.ServiceModel.Channels.Message EndReceive(System.IAsyncResult result);
        bool EndTryReceive(System.IAsyncResult result, out System.ServiceModel.Channels.Message message);
        bool EndWaitForMessage(System.IAsyncResult result);
        System.ServiceModel.Channels.Message Receive();
        System.ServiceModel.Channels.Message Receive(System.TimeSpan timeout);
        bool TryReceive(System.TimeSpan timeout, out System.ServiceModel.Channels.Message message);
        bool WaitForMessage(System.TimeSpan timeout);
    }
    public partial interface IInputSession : System.ServiceModel.Channels.ISession
    {
    }
    public partial interface IInputSessionChannel : System.ServiceModel.Channels.IChannel, System.ServiceModel.Channels.IInputChannel, System.ServiceModel.Channels.ISessionChannel<System.ServiceModel.Channels.IInputSession>, System.ServiceModel.ICommunicationObject
    {
    }
    public partial interface IMessageProperty
    {
        System.ServiceModel.Channels.IMessageProperty CreateCopy();
    }
    [System.SerializableAttribute]
    public partial class InvalidChannelBindingException : System.Exception
    {
        public InvalidChannelBindingException() { }
        protected InvalidChannelBindingException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
        public InvalidChannelBindingException(string message) { }
        public InvalidChannelBindingException(string message, System.Exception innerException) { }
    }
    public partial interface IOutputChannel : System.ServiceModel.Channels.IChannel, System.ServiceModel.ICommunicationObject
    {
        System.ServiceModel.EndpointAddress RemoteAddress { get; }
        System.Uri Via { get; }
        System.IAsyncResult BeginSend(System.ServiceModel.Channels.Message message, System.AsyncCallback callback, object state);
        System.IAsyncResult BeginSend(System.ServiceModel.Channels.Message message, System.TimeSpan timeout, System.AsyncCallback callback, object state);
        void EndSend(System.IAsyncResult result);
        void Send(System.ServiceModel.Channels.Message message);
        void Send(System.ServiceModel.Channels.Message message, System.TimeSpan timeout);
    }
    public partial interface IOutputSession : System.ServiceModel.Channels.ISession
    {
    }
    public partial interface IOutputSessionChannel : System.ServiceModel.Channels.IChannel, System.ServiceModel.Channels.IOutputChannel, System.ServiceModel.Channels.ISessionChannel<System.ServiceModel.Channels.IOutputSession>, System.ServiceModel.ICommunicationObject
    {
    }
    public partial interface IReceiveContextSettings
    {
        bool Enabled { get; set; }
        System.TimeSpan ValidityDuration { get; }
    }
    public partial interface IReplyChannel : System.ServiceModel.Channels.IChannel, System.ServiceModel.ICommunicationObject
    {
        System.ServiceModel.EndpointAddress LocalAddress { get; }
        System.IAsyncResult BeginReceiveRequest(System.AsyncCallback callback, object state);
        System.IAsyncResult BeginReceiveRequest(System.TimeSpan timeout, System.AsyncCallback callback, object state);
        System.IAsyncResult BeginTryReceiveRequest(System.TimeSpan timeout, System.AsyncCallback callback, object state);
        System.IAsyncResult BeginWaitForRequest(System.TimeSpan timeout, System.AsyncCallback callback, object state);
        System.ServiceModel.Channels.RequestContext EndReceiveRequest(System.IAsyncResult result);
        bool EndTryReceiveRequest(System.IAsyncResult result, out System.ServiceModel.Channels.RequestContext context);
        bool EndWaitForRequest(System.IAsyncResult result);
        System.ServiceModel.Channels.RequestContext ReceiveRequest();
        System.ServiceModel.Channels.RequestContext ReceiveRequest(System.TimeSpan timeout);
        bool TryReceiveRequest(System.TimeSpan timeout, out System.ServiceModel.Channels.RequestContext context);
        bool WaitForRequest(System.TimeSpan timeout);
    }
    public partial interface IReplySessionChannel : System.ServiceModel.Channels.IChannel, System.ServiceModel.Channels.IReplyChannel, System.ServiceModel.Channels.ISessionChannel<System.ServiceModel.Channels.IInputSession>, System.ServiceModel.ICommunicationObject
    {
    }
    public partial interface IRequestChannel : System.ServiceModel.Channels.IChannel, System.ServiceModel.ICommunicationObject
    {
        System.ServiceModel.EndpointAddress RemoteAddress { get; }
        System.Uri Via { get; }
        System.IAsyncResult BeginRequest(System.ServiceModel.Channels.Message message, System.AsyncCallback callback, object state);
        System.IAsyncResult BeginRequest(System.ServiceModel.Channels.Message message, System.TimeSpan timeout, System.AsyncCallback callback, object state);
        System.ServiceModel.Channels.Message EndRequest(System.IAsyncResult result);
        System.ServiceModel.Channels.Message Request(System.ServiceModel.Channels.Message message);
        System.ServiceModel.Channels.Message Request(System.ServiceModel.Channels.Message message, System.TimeSpan timeout);
    }
    public partial interface IRequestSessionChannel : System.ServiceModel.Channels.IChannel, System.ServiceModel.Channels.IRequestChannel, System.ServiceModel.Channels.ISessionChannel<System.ServiceModel.Channels.IOutputSession>, System.ServiceModel.ICommunicationObject
    {
    }
    public partial interface ISecurityCapabilities
    {
        System.Net.Security.ProtectionLevel SupportedRequestProtectionLevel { get; }
        System.Net.Security.ProtectionLevel SupportedResponseProtectionLevel { get; }
        bool SupportsClientAuthentication { get; }
        bool SupportsClientWindowsIdentity { get; }
        bool SupportsServerAuthentication { get; }
    }
    public partial interface ISession
    {
        string Id { get; }
    }
    public partial interface ISessionChannel<TSession> where TSession : System.ServiceModel.Channels.ISession
    {
        TSession Session { get; }
    }
    public partial interface ITransactedBindingElement
    {
        bool TransactedReceiveEnabled { get; }
    }
    public partial interface ITransportTokenAssertionProvider
    {
        System.Xml.XmlElement GetTransportTokenAssertion();
    }
    public partial interface IWebSocketCloseDetails
    {
        System.Nullable<System.Net.WebSockets.WebSocketCloseStatus> InputCloseStatus { get; }
        string InputCloseStatusDescription { get; }
        void SetOutputCloseStatus(System.Net.WebSockets.WebSocketCloseStatus closeStatus, string closeStatusDescription);
    }
    public sealed partial class LocalClientSecuritySettings
    {
        public LocalClientSecuritySettings() { }
        public bool CacheCookies { get { throw null; } set { } }
        public int CookieRenewalThresholdPercentage { get { throw null; } set { } }
        public bool DetectReplays { get { throw null; } set { } }
        public System.ServiceModel.Security.IdentityVerifier IdentityVerifier { get { throw null; } set { } }
        public System.TimeSpan MaxClockSkew { get { throw null; } set { } }
        public System.TimeSpan MaxCookieCachingTime { get { throw null; } set { } }
        public System.ServiceModel.Security.NonceCache NonceCache { get { throw null; } set { } }
        public bool ReconnectTransportOnFailure { get { throw null; } set { } }
        public int ReplayCacheSize { get { throw null; } set { } }
        public System.TimeSpan ReplayWindow { get { throw null; } set { } }
        public System.TimeSpan SessionKeyRenewalInterval { get { throw null; } set { } }
        public System.TimeSpan SessionKeyRolloverInterval { get { throw null; } set { } }
        public System.TimeSpan TimestampValidityDuration { get { throw null; } set { } }
        public System.ServiceModel.Channels.LocalClientSecuritySettings Clone() { throw null; }
    }
    public sealed partial class LocalServiceSecuritySettings
    {
        public LocalServiceSecuritySettings() { }
        public bool DetectReplays { get { throw null; } set { } }
        public System.TimeSpan InactivityTimeout { get { throw null; } set { } }
        public System.TimeSpan IssuedCookieLifetime { get { throw null; } set { } }
        public int MaxCachedCookies { get { throw null; } set { } }
        public System.TimeSpan MaxClockSkew { get { throw null; } set { } }
        public int MaxPendingSessions { get { throw null; } set { } }
        public int MaxStatefulNegotiations { get { throw null; } set { } }
        public System.TimeSpan NegotiationTimeout { get { throw null; } set { } }
        public System.ServiceModel.Security.NonceCache NonceCache { get { throw null; } set { } }
        public bool ReconnectTransportOnFailure { get { throw null; } set { } }
        public int ReplayCacheSize { get { throw null; } set { } }
        public System.TimeSpan ReplayWindow { get { throw null; } set { } }
        public System.TimeSpan SessionKeyRenewalInterval { get { throw null; } set { } }
        public System.TimeSpan SessionKeyRolloverInterval { get { throw null; } set { } }
        public System.TimeSpan TimestampValidityDuration { get { throw null; } set { } }
        public System.ServiceModel.Channels.LocalServiceSecuritySettings Clone() { throw null; }
    }
    public abstract partial class Message : System.IDisposable
    {
        protected Message() { }
        public abstract System.ServiceModel.Channels.MessageHeaders Headers { get; }
        protected bool IsDisposed { get { throw null; } }
        public virtual bool IsEmpty { get { throw null; } }
        public virtual bool IsFault { get { throw null; } }
        public abstract System.ServiceModel.Channels.MessageProperties Properties { get; }
        public System.ServiceModel.Channels.MessageState State { get { throw null; } }
        public abstract System.ServiceModel.Channels.MessageVersion Version { get; }
        public System.IAsyncResult BeginWriteBodyContents(System.Xml.XmlDictionaryWriter writer, System.AsyncCallback callback, object state) { throw null; }
        public System.IAsyncResult BeginWriteMessage(System.Xml.XmlDictionaryWriter writer, System.AsyncCallback callback, object state) { throw null; }
        public void Close() { }
        public System.ServiceModel.Channels.MessageBuffer CreateBufferedCopy(int maxBufferSize) { throw null; }
        public static System.ServiceModel.Channels.Message CreateMessage(System.ServiceModel.Channels.MessageVersion version, System.ServiceModel.Channels.MessageFault fault, string action) { throw null; }
        public static System.ServiceModel.Channels.Message CreateMessage(System.ServiceModel.Channels.MessageVersion version, System.ServiceModel.FaultCode faultCode, string reason, object detail, string action) { throw null; }
        public static System.ServiceModel.Channels.Message CreateMessage(System.ServiceModel.Channels.MessageVersion version, System.ServiceModel.FaultCode faultCode, string reason, string action) { throw null; }
        public static System.ServiceModel.Channels.Message CreateMessage(System.ServiceModel.Channels.MessageVersion version, string action) { throw null; }
        public static System.ServiceModel.Channels.Message CreateMessage(System.ServiceModel.Channels.MessageVersion version, string action, object body) { throw null; }
        public static System.ServiceModel.Channels.Message CreateMessage(System.ServiceModel.Channels.MessageVersion version, string action, object body, System.Runtime.Serialization.XmlObjectSerializer serializer) { throw null; }
        public static System.ServiceModel.Channels.Message CreateMessage(System.ServiceModel.Channels.MessageVersion version, string action, System.ServiceModel.Channels.BodyWriter body) { throw null; }
        public static System.ServiceModel.Channels.Message CreateMessage(System.ServiceModel.Channels.MessageVersion version, string action, System.Xml.XmlDictionaryReader body) { throw null; }
        public static System.ServiceModel.Channels.Message CreateMessage(System.ServiceModel.Channels.MessageVersion version, string action, System.Xml.XmlReader body) { throw null; }
        public static System.ServiceModel.Channels.Message CreateMessage(System.Xml.XmlDictionaryReader envelopeReader, int maxSizeOfHeaders, System.ServiceModel.Channels.MessageVersion version) { throw null; }
        public static System.ServiceModel.Channels.Message CreateMessage(System.Xml.XmlReader envelopeReader, int maxSizeOfHeaders, System.ServiceModel.Channels.MessageVersion version) { throw null; }
        public void EndWriteBodyContents(System.IAsyncResult result) { }
        public void EndWriteMessage(System.IAsyncResult result) { }
        public string GetBodyAttribute(string localName, string ns) { throw null; }
        public T GetBody<T>() { throw null; }
        public T GetBody<T>(System.Runtime.Serialization.XmlObjectSerializer serializer) { throw null; }
        public System.Xml.XmlDictionaryReader GetReaderAtBodyContents() { throw null; }
        protected virtual System.IAsyncResult OnBeginWriteBodyContents(System.Xml.XmlDictionaryWriter writer, System.AsyncCallback callback, object state) { throw null; }
        protected virtual System.IAsyncResult OnBeginWriteMessage(System.Xml.XmlDictionaryWriter writer, System.AsyncCallback callback, object state) { throw null; }
        protected virtual void OnBodyToString(System.Xml.XmlDictionaryWriter writer) { }
        protected virtual void OnClose() { }
        protected virtual System.ServiceModel.Channels.MessageBuffer OnCreateBufferedCopy(int maxBufferSize) { throw null; }
        protected virtual void OnEndWriteBodyContents(System.IAsyncResult result) { }
        protected virtual void OnEndWriteMessage(System.IAsyncResult result) { }
        protected virtual string OnGetBodyAttribute(string localName, string ns) { throw null; }
        protected virtual T OnGetBody<T>(System.Xml.XmlDictionaryReader reader) { throw null; }
        protected virtual System.Xml.XmlDictionaryReader OnGetReaderAtBodyContents() { throw null; }
        protected abstract void OnWriteBodyContents(System.Xml.XmlDictionaryWriter writer);
        protected virtual void OnWriteMessage(System.Xml.XmlDictionaryWriter writer) { }
        protected virtual void OnWriteStartBody(System.Xml.XmlDictionaryWriter writer) { }
        protected virtual void OnWriteStartEnvelope(System.Xml.XmlDictionaryWriter writer) { }
        protected virtual void OnWriteStartHeaders(System.Xml.XmlDictionaryWriter writer) { }
        void System.IDisposable.Dispose() { }
        public override string ToString() { throw null; }
        public void WriteBody(System.Xml.XmlDictionaryWriter writer) { }
        public void WriteBody(System.Xml.XmlWriter writer) { }
        public void WriteBodyContents(System.Xml.XmlDictionaryWriter writer) { }
        public void WriteMessage(System.Xml.XmlDictionaryWriter writer) { }
        public void WriteMessage(System.Xml.XmlWriter writer) { }
        public void WriteStartBody(System.Xml.XmlDictionaryWriter writer) { }
        public void WriteStartBody(System.Xml.XmlWriter writer) { }
        public void WriteStartEnvelope(System.Xml.XmlDictionaryWriter writer) { }
    }
    public abstract partial class MessageBuffer : System.IDisposable, System.Xml.XPath.IXPathNavigable
    {
        protected MessageBuffer() { }
        public abstract int BufferSize { get; }
        public virtual string MessageContentType { get { throw null; } }
        public abstract void Close();
        public abstract System.ServiceModel.Channels.Message CreateMessage();
        public System.Xml.XPath.XPathNavigator CreateNavigator() { throw null; }
        public System.Xml.XPath.XPathNavigator CreateNavigator(int nodeQuota) { throw null; }
        public System.Xml.XPath.XPathNavigator CreateNavigator(int nodeQuota, System.Xml.XmlSpace space) { throw null; }
        public System.Xml.XPath.XPathNavigator CreateNavigator(System.Xml.XmlSpace space) { throw null; }
        void System.IDisposable.Dispose() { }
        public virtual void WriteMessage(System.IO.Stream stream) { }
    }
    public abstract partial class MessageEncoder
    {
        protected MessageEncoder() { }
        public abstract string ContentType { get; }
        public abstract string MediaType { get; }
        public abstract System.ServiceModel.Channels.MessageVersion MessageVersion { get; }
        public virtual System.IAsyncResult BeginWriteMessage(System.ServiceModel.Channels.Message message, System.IO.Stream stream, System.AsyncCallback callback, object state) { throw null; }
        public virtual void EndWriteMessage(System.IAsyncResult result) { }
        public virtual T GetProperty<T>() where T : class { throw null; }
        public virtual bool IsContentTypeSupported(string contentType) { throw null; }
        public System.ServiceModel.Channels.Message ReadMessage(System.ArraySegment<byte> buffer, System.ServiceModel.Channels.BufferManager bufferManager) { throw null; }
        public abstract System.ServiceModel.Channels.Message ReadMessage(System.ArraySegment<byte> buffer, System.ServiceModel.Channels.BufferManager bufferManager, string contentType);
        public System.ServiceModel.Channels.Message ReadMessage(System.IO.Stream stream, int maxSizeOfHeaders) { throw null; }
        public abstract System.ServiceModel.Channels.Message ReadMessage(System.IO.Stream stream, int maxSizeOfHeaders, string contentType);
        public override string ToString() { throw null; }
        public System.ArraySegment<byte> WriteMessage(System.ServiceModel.Channels.Message message, int maxMessageSize, System.ServiceModel.Channels.BufferManager bufferManager) { throw null; }
        public abstract System.ArraySegment<byte> WriteMessage(System.ServiceModel.Channels.Message message, int maxMessageSize, System.ServiceModel.Channels.BufferManager bufferManager, int messageOffset);
        public abstract void WriteMessage(System.ServiceModel.Channels.Message message, System.IO.Stream stream);
    }
    public abstract partial class MessageEncoderFactory
    {
        protected MessageEncoderFactory() { }
        public abstract System.ServiceModel.Channels.MessageEncoder Encoder { get; }
        public abstract System.ServiceModel.Channels.MessageVersion MessageVersion { get; }
        public virtual System.ServiceModel.Channels.MessageEncoder CreateSessionEncoder() { throw null; }
    }
    public abstract partial class MessageEncodingBindingElement : System.ServiceModel.Channels.BindingElement
    {
        protected MessageEncodingBindingElement() { }
        protected MessageEncodingBindingElement(System.ServiceModel.Channels.MessageEncodingBindingElement elementToBeCloned) { }
        public abstract System.ServiceModel.Channels.MessageVersion MessageVersion { get; set; }
        public abstract System.ServiceModel.Channels.MessageEncoderFactory CreateMessageEncoderFactory();
        public override T GetProperty<T>(System.ServiceModel.Channels.BindingContext context) { throw null; }
    }
    public partial class MessageEncodingBindingElementImporter : System.ServiceModel.Description.IPolicyImportExtension, System.ServiceModel.Description.IWsdlImportExtension
    {
        public MessageEncodingBindingElementImporter() { }
        void System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy(System.ServiceModel.Description.MetadataImporter importer, System.ServiceModel.Description.PolicyConversionContext context) { }
        void System.ServiceModel.Description.IWsdlImportExtension.BeforeImport(System.Web.Services.Description.ServiceDescriptionCollection wsdlDocuments, System.Xml.Schema.XmlSchemaSet xmlSchemas, System.Collections.Generic.ICollection<System.Xml.XmlElement> policy) { }
        void System.ServiceModel.Description.IWsdlImportExtension.ImportContract(System.ServiceModel.Description.WsdlImporter importer, System.ServiceModel.Description.WsdlContractConversionContext context) { }
        void System.ServiceModel.Description.IWsdlImportExtension.ImportEndpoint(System.ServiceModel.Description.WsdlImporter importer, System.ServiceModel.Description.WsdlEndpointConversionContext context) { }
    }
    public abstract partial class MessageFault
    {
        protected MessageFault() { }
        public virtual string Actor { get { throw null; } }
        public abstract System.ServiceModel.FaultCode Code { get; }
        public abstract bool HasDetail { get; }
        public bool IsMustUnderstandFault { get { throw null; } }
        public virtual string Node { get { throw null; } }
        public abstract System.ServiceModel.FaultReason Reason { get; }
        public static System.ServiceModel.Channels.MessageFault CreateFault(System.ServiceModel.Channels.Message message, int maxBufferSize) { throw null; }
        public static System.ServiceModel.Channels.MessageFault CreateFault(System.ServiceModel.FaultCode code, System.ServiceModel.FaultReason reason) { throw null; }
        public static System.ServiceModel.Channels.MessageFault CreateFault(System.ServiceModel.FaultCode code, System.ServiceModel.FaultReason reason, object detail) { throw null; }
        public static System.ServiceModel.Channels.MessageFault CreateFault(System.ServiceModel.FaultCode code, System.ServiceModel.FaultReason reason, object detail, System.Runtime.Serialization.XmlObjectSerializer serializer) { throw null; }
        public static System.ServiceModel.Channels.MessageFault CreateFault(System.ServiceModel.FaultCode code, System.ServiceModel.FaultReason reason, object detail, System.Runtime.Serialization.XmlObjectSerializer serializer, string actor) { throw null; }
        public static System.ServiceModel.Channels.MessageFault CreateFault(System.ServiceModel.FaultCode code, System.ServiceModel.FaultReason reason, object detail, System.Runtime.Serialization.XmlObjectSerializer serializer, string actor, string node) { throw null; }
        public static System.ServiceModel.Channels.MessageFault CreateFault(System.ServiceModel.FaultCode code, string reason) { throw null; }
        public T GetDetail<T>() { throw null; }
        public T GetDetail<T>(System.Runtime.Serialization.XmlObjectSerializer serializer) { throw null; }
        public System.Xml.XmlDictionaryReader GetReaderAtDetailContents() { throw null; }
        protected virtual System.Xml.XmlDictionaryReader OnGetReaderAtDetailContents() { throw null; }
        protected virtual void OnWriteDetail(System.Xml.XmlDictionaryWriter writer, System.ServiceModel.EnvelopeVersion version) { }
        protected abstract void OnWriteDetailContents(System.Xml.XmlDictionaryWriter writer);
        protected virtual void OnWriteStartDetail(System.Xml.XmlDictionaryWriter writer, System.ServiceModel.EnvelopeVersion version) { }
        public static bool WasHeaderNotUnderstood(System.ServiceModel.Channels.MessageHeaders headers, string name, string ns) { throw null; }
        public void WriteTo(System.Xml.XmlDictionaryWriter writer, System.ServiceModel.EnvelopeVersion version) { }
        public void WriteTo(System.Xml.XmlWriter writer, System.ServiceModel.EnvelopeVersion version) { }
    }
    public abstract partial class MessageHeader : System.ServiceModel.Channels.MessageHeaderInfo
    {
        protected MessageHeader() { }
        public override string Actor { get { throw null; } }
        public override bool IsReferenceParameter { get { throw null; } }
        public override bool MustUnderstand { get { throw null; } }
        public override bool Relay { get { throw null; } }
        public static System.ServiceModel.Channels.MessageHeader CreateHeader(string name, string ns, object value) { throw null; }
        public static System.ServiceModel.Channels.MessageHeader CreateHeader(string name, string ns, object value, bool mustUnderstand) { throw null; }
        public static System.ServiceModel.Channels.MessageHeader CreateHeader(string name, string ns, object value, bool mustUnderstand, string actor) { throw null; }
        public static System.ServiceModel.Channels.MessageHeader CreateHeader(string name, string ns, object value, bool mustUnderstand, string actor, bool relay) { throw null; }
        public static System.ServiceModel.Channels.MessageHeader CreateHeader(string name, string ns, object value, System.Runtime.Serialization.XmlObjectSerializer serializer) { throw null; }
        public static System.ServiceModel.Channels.MessageHeader CreateHeader(string name, string ns, object value, System.Runtime.Serialization.XmlObjectSerializer serializer, bool mustUnderstand) { throw null; }
        public static System.ServiceModel.Channels.MessageHeader CreateHeader(string name, string ns, object value, System.Runtime.Serialization.XmlObjectSerializer serializer, bool mustUnderstand, string actor) { throw null; }
        public static System.ServiceModel.Channels.MessageHeader CreateHeader(string name, string ns, object value, System.Runtime.Serialization.XmlObjectSerializer serializer, bool mustUnderstand, string actor, bool relay) { throw null; }
        public virtual bool IsMessageVersionSupported(System.ServiceModel.Channels.MessageVersion messageVersion) { throw null; }
        protected abstract void OnWriteHeaderContents(System.Xml.XmlDictionaryWriter writer, System.ServiceModel.Channels.MessageVersion messageVersion);
        protected virtual void OnWriteStartHeader(System.Xml.XmlDictionaryWriter writer, System.ServiceModel.Channels.MessageVersion messageVersion) { }
        public override string ToString() { throw null; }
        public void WriteHeader(System.Xml.XmlDictionaryWriter writer, System.ServiceModel.Channels.MessageVersion messageVersion) { }
        public void WriteHeader(System.Xml.XmlWriter writer, System.ServiceModel.Channels.MessageVersion messageVersion) { }
        protected void WriteHeaderAttributes(System.Xml.XmlDictionaryWriter writer, System.ServiceModel.Channels.MessageVersion messageVersion) { }
        public void WriteHeaderContents(System.Xml.XmlDictionaryWriter writer, System.ServiceModel.Channels.MessageVersion messageVersion) { }
        public void WriteStartHeader(System.Xml.XmlDictionaryWriter writer, System.ServiceModel.Channels.MessageVersion messageVersion) { }
    }
    public abstract partial class MessageHeaderInfo
    {
        protected MessageHeaderInfo() { }
        public abstract string Actor { get; }
        public abstract bool IsReferenceParameter { get; }
        public abstract bool MustUnderstand { get; }
        public abstract string Name { get; }
        public abstract string Namespace { get; }
        public abstract bool Relay { get; }
    }
    public sealed partial class MessageHeaders : System.Collections.Generic.IEnumerable<System.ServiceModel.Channels.MessageHeaderInfo>, System.Collections.IEnumerable
    {
        public MessageHeaders(System.ServiceModel.Channels.MessageHeaders collection) { }
        public MessageHeaders(System.ServiceModel.Channels.MessageVersion version) { }
        public MessageHeaders(System.ServiceModel.Channels.MessageVersion version, int initialSize) { }
        public string Action { get { throw null; } set { } }
        public int Count { get { throw null; } }
        public System.ServiceModel.EndpointAddress FaultTo { get { throw null; } set { } }
        public System.ServiceModel.EndpointAddress From { get { throw null; } set { } }
        public System.ServiceModel.Channels.MessageHeaderInfo this[int index] { get { throw null; } }
        public System.Xml.UniqueId MessageId { get { throw null; } set { } }
        public System.ServiceModel.Channels.MessageVersion MessageVersion { get { throw null; } }
        public System.Xml.UniqueId RelatesTo { get { throw null; } set { } }
        public System.ServiceModel.EndpointAddress ReplyTo { get { throw null; } set { } }
        public System.Uri To { get { throw null; } set { } }
        public System.ServiceModel.Channels.UnderstoodHeaders UnderstoodHeaders { get { throw null; } }
        public void Add(System.ServiceModel.Channels.MessageHeader header) { }
        public void Clear() { }
        public void CopyHeaderFrom(System.ServiceModel.Channels.Message message, int headerIndex) { }
        public void CopyHeaderFrom(System.ServiceModel.Channels.MessageHeaders collection, int headerIndex) { }
        public void CopyHeadersFrom(System.ServiceModel.Channels.Message message) { }
        public void CopyHeadersFrom(System.ServiceModel.Channels.MessageHeaders collection) { }
        public void CopyTo(System.ServiceModel.Channels.MessageHeaderInfo[] array, int index) { }
        public int FindHeader(string name, string ns) { throw null; }
        public int FindHeader(string name, string ns, params string[] actors) { throw null; }
        public System.Collections.Generic.IEnumerator<System.ServiceModel.Channels.MessageHeaderInfo> GetEnumerator() { throw null; }
        public T GetHeader<T>(int index) { throw null; }
        public T GetHeader<T>(int index, System.Runtime.Serialization.XmlObjectSerializer serializer) { throw null; }
        public T GetHeader<T>(string name, string ns) { throw null; }
        public T GetHeader<T>(string name, string ns, System.Runtime.Serialization.XmlObjectSerializer serializer) { throw null; }
        public T GetHeader<T>(string name, string ns, params string[] actors) { throw null; }
        public System.Xml.XmlDictionaryReader GetReaderAtHeader(int headerIndex) { throw null; }
        public bool HaveMandatoryHeadersBeenUnderstood() { throw null; }
        public bool HaveMandatoryHeadersBeenUnderstood(params string[] actors) { throw null; }
        public void Insert(int headerIndex, System.ServiceModel.Channels.MessageHeader header) { }
        public void RemoveAll(string name, string ns) { }
        public void RemoveAt(int headerIndex) { }
        public void SetAction(System.Xml.XmlDictionaryString action) { }
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { throw null; }
        public void WriteHeader(int headerIndex, System.Xml.XmlDictionaryWriter writer) { }
        public void WriteHeader(int headerIndex, System.Xml.XmlWriter writer) { }
        public void WriteHeaderContents(int headerIndex, System.Xml.XmlDictionaryWriter writer) { }
        public void WriteHeaderContents(int headerIndex, System.Xml.XmlWriter writer) { }
        public void WriteStartHeader(int headerIndex, System.Xml.XmlDictionaryWriter writer) { }
        public void WriteStartHeader(int headerIndex, System.Xml.XmlWriter writer) { }
    }
    public sealed partial class MessageProperties : System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<string, object>>, System.Collections.Generic.IDictionary<string, object>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, object>>, System.Collections.IEnumerable, System.IDisposable
    {
        public MessageProperties() { }
        public MessageProperties(System.ServiceModel.Channels.MessageProperties properties) { }
        public bool AllowOutputBatching { get { throw null; } set { } }
        public int Count { get { throw null; } }
        public System.ServiceModel.Channels.MessageEncoder Encoder { get { throw null; } set { } }
        public bool IsFixedSize { get { throw null; } }
        public bool IsReadOnly { get { throw null; } }
        public object this[string name] { get { throw null; } set { } }
        public System.Collections.Generic.ICollection<string> Keys { get { throw null; } }
        public System.ServiceModel.Security.SecurityMessageProperty Security { get { throw null; } set { } }
        public System.Collections.Generic.ICollection<object> Values { get { throw null; } }
        public System.Uri Via { get { throw null; } set { } }
        public void Add(string name, object property) { }
        public void Clear() { }
        public bool ContainsKey(string name) { throw null; }
        public void CopyProperties(System.ServiceModel.Channels.MessageProperties properties) { }
        public void Dispose() { }
        public bool Remove(string name) { throw null; }
        void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Add(System.Collections.Generic.KeyValuePair<string, object> pair) { }
        bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Contains(System.Collections.Generic.KeyValuePair<string, object> pair) { throw null; }
        void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.CopyTo(System.Collections.Generic.KeyValuePair<string, object>[] array, int index) { }
        bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Remove(System.Collections.Generic.KeyValuePair<string, object> pair) { throw null; }
        System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string, object>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.GetEnumerator() { throw null; }
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { throw null; }
        public bool TryGetValue(string name, out object value) { throw null; }
    }
    public enum MessageState
    {
        Closed = 4,
        Copied = 3,
        Created = 0,
        Read = 1,
        Written = 2,
    }
    [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.MessageVersionConverter")]
    public sealed partial class MessageVersion
    {
        internal MessageVersion() { }
        public System.ServiceModel.Channels.AddressingVersion Addressing { get { throw null; } }
        public static System.ServiceModel.Channels.MessageVersion Default { get { throw null; } }
        public System.ServiceModel.EnvelopeVersion Envelope { get { throw null; } }
        public static System.ServiceModel.Channels.MessageVersion None { get { throw null; } }
        public static System.ServiceModel.Channels.MessageVersion Soap11 { get { throw null; } }
        public static System.ServiceModel.Channels.MessageVersion Soap11WSAddressing10 { get { throw null; } }
        public static System.ServiceModel.Channels.MessageVersion Soap11WSAddressingAugust2004 { get { throw null; } }
        public static System.ServiceModel.Channels.MessageVersion Soap12 { get { throw null; } }
        public static System.ServiceModel.Channels.MessageVersion Soap12WSAddressing10 { get { throw null; } }
        public static System.ServiceModel.Channels.MessageVersion Soap12WSAddressingAugust2004 { get { throw null; } }
        public static System.ServiceModel.Channels.MessageVersion CreateVersion(System.ServiceModel.EnvelopeVersion envelopeVersion) { throw null; }
        public static System.ServiceModel.Channels.MessageVersion CreateVersion(System.ServiceModel.EnvelopeVersion envelopeVersion, System.ServiceModel.Channels.AddressingVersion addressingVersion) { throw null; }
        public override bool Equals(object obj) { throw null; }
        public override int GetHashCode() { throw null; }
        public override string ToString() { throw null; }
    }
    public abstract partial class MsmqBindingElementBase : System.ServiceModel.Channels.TransportBindingElement, System.ServiceModel.Channels.ITransactedBindingElement, System.ServiceModel.Description.IPolicyExportExtension, System.ServiceModel.Description.IWsdlExportExtension
    {
        internal MsmqBindingElementBase() { }
        public System.Uri CustomDeadLetterQueue { get { throw null; } set { } }
        public System.ServiceModel.DeadLetterQueue DeadLetterQueue { get { throw null; } set { } }
        public bool Durable { get { throw null; } set { } }
        public bool ExactlyOnce { get { throw null; } set { } }
        public int MaxRetryCycles { get { throw null; } set { } }
        public System.ServiceModel.MsmqTransportSecurity MsmqTransportSecurity { get { throw null; } }
        public bool ReceiveContextEnabled { get { throw null; } set { } }
        public System.ServiceModel.ReceiveErrorHandling ReceiveErrorHandling { get { throw null; } set { } }
        public int ReceiveRetryCount { get { throw null; } set { } }
        public System.TimeSpan RetryCycleDelay { get { throw null; } set { } }
        public System.TimeSpan TimeToLive { get { throw null; } set { } }
        public bool TransactedReceiveEnabled { get { throw null; } }
        public bool UseMsmqTracing { get { throw null; } set { } }
        public bool UseSourceJournal { get { throw null; } set { } }
        public System.TimeSpan ValidityDuration { get { throw null; } set { } }
        public override T GetProperty<T>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        void System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy(System.ServiceModel.Description.MetadataExporter exporter, System.ServiceModel.Description.PolicyConversionContext context) { }
        void System.ServiceModel.Description.IWsdlExportExtension.ExportContract(System.ServiceModel.Description.WsdlExporter exporter, System.ServiceModel.Description.WsdlContractConversionContext context) { }
        void System.ServiceModel.Description.IWsdlExportExtension.ExportEndpoint(System.ServiceModel.Description.WsdlExporter exporter, System.ServiceModel.Description.WsdlEndpointConversionContext endpointContext) { }
    }
    public sealed partial class MsmqMessageProperty
    {
        internal MsmqMessageProperty() { }
        public const string Name = "MsmqMessageProperty";
        public int AbortCount { get { throw null; } }
        public System.Nullable<System.ServiceModel.Channels.DeliveryFailure> DeliveryFailure { get { throw null; } }
        public System.Nullable<System.ServiceModel.Channels.DeliveryStatus> DeliveryStatus { get { throw null; } }
        public int MoveCount { get { throw null; } }
        public static System.ServiceModel.Channels.MsmqMessageProperty Get(System.ServiceModel.Channels.Message message) { throw null; }
    }
    public sealed partial class MsmqTransportBindingElement : System.ServiceModel.Channels.MsmqBindingElementBase
    {
        public MsmqTransportBindingElement() { }
        public int MaxPoolSize { get { throw null; } set { } }
        public System.ServiceModel.QueueTransferProtocol QueueTransferProtocol { get { throw null; } set { } }
        public override string Scheme { get { throw null; } }
        public bool UseActiveDirectory { get { throw null; } set { } }
        public override System.ServiceModel.Channels.IChannelFactory<TChannel> BuildChannelFactory<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override System.ServiceModel.Channels.IChannelListener<TChannel> BuildChannelListener<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override bool CanBuildChannelFactory<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override bool CanBuildChannelListener<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override System.ServiceModel.Channels.BindingElement Clone() { throw null; }
    }
    public sealed partial class MtomMessageEncodingBindingElement : System.ServiceModel.Channels.MessageEncodingBindingElement, System.ServiceModel.Description.IPolicyExportExtension, System.ServiceModel.Description.IWsdlExportExtension
    {
        public MtomMessageEncodingBindingElement() { }
        public MtomMessageEncodingBindingElement(System.ServiceModel.Channels.MessageVersion messageVersion, System.Text.Encoding writeEncoding) { }
        [System.ComponentModel.DefaultValueAttribute(65536)]
        public int MaxBufferSize { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(64)]
        public int MaxReadPoolSize { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(16)]
        public int MaxWritePoolSize { get { throw null; } set { } }
        public override System.ServiceModel.Channels.MessageVersion MessageVersion { get { throw null; } set { } }
        public System.Xml.XmlDictionaryReaderQuotas ReaderQuotas { get { throw null; } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.EncodingConverter")]
        public System.Text.Encoding WriteEncoding { get { throw null; } set { } }
        public override System.ServiceModel.Channels.IChannelFactory<TChannel> BuildChannelFactory<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override System.ServiceModel.Channels.IChannelListener<TChannel> BuildChannelListener<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override bool CanBuildChannelFactory<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override bool CanBuildChannelListener<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override System.ServiceModel.Channels.BindingElement Clone() { throw null; }
        public override System.ServiceModel.Channels.MessageEncoderFactory CreateMessageEncoderFactory() { throw null; }
        public override T GetProperty<T>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeMessageVersion() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeReaderQuotas() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeWriteEncoding() { throw null; }
        void System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy(System.ServiceModel.Description.MetadataExporter exporter, System.ServiceModel.Description.PolicyConversionContext policyContext) { }
        void System.ServiceModel.Description.IWsdlExportExtension.ExportContract(System.ServiceModel.Description.WsdlExporter exporter, System.ServiceModel.Description.WsdlContractConversionContext context) { }
        void System.ServiceModel.Description.IWsdlExportExtension.ExportEndpoint(System.ServiceModel.Description.WsdlExporter exporter, System.ServiceModel.Description.WsdlEndpointConversionContext context) { }
    }
    public sealed partial class NamedPipeConnectionPoolSettings
    {
        internal NamedPipeConnectionPoolSettings() { }
        public string GroupName { get { throw null; } set { } }
        public System.TimeSpan IdleTimeout { get { throw null; } set { } }
        public int MaxOutboundConnectionsPerEndpoint { get { throw null; } set { } }
    }
    public sealed partial class NamedPipeSettings
    {
        internal NamedPipeSettings() { }
        public System.ServiceModel.Channels.ApplicationContainerSettings ApplicationContainerSettings { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
    }
    public partial class NamedPipeTransportBindingElement : System.ServiceModel.Channels.ConnectionOrientedTransportBindingElement
    {
        public NamedPipeTransportBindingElement() { }
        protected NamedPipeTransportBindingElement(System.ServiceModel.Channels.NamedPipeTransportBindingElement elementToBeCloned) { }
        public System.Collections.ObjectModel.Collection<System.Security.Principal.SecurityIdentifier> AllowedSecurityIdentifiers { get { throw null; } }
        public System.ServiceModel.Channels.NamedPipeConnectionPoolSettings ConnectionPoolSettings { get { throw null; } }
        public System.ServiceModel.Channels.NamedPipeSettings PipeSettings { get { throw null; } }
        public override string Scheme { get { throw null; } }
        public override System.ServiceModel.Channels.IChannelFactory<TChannel> BuildChannelFactory<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override System.ServiceModel.Channels.IChannelListener<TChannel> BuildChannelListener<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override System.ServiceModel.Channels.BindingElement Clone() { throw null; }
        public override T GetProperty<T>(System.ServiceModel.Channels.BindingContext context) { throw null; }
    }
    public sealed partial class OneWayBindingElement : System.ServiceModel.Channels.BindingElement, System.ServiceModel.Description.IPolicyExportExtension
    {
        public OneWayBindingElement() { }
        public System.ServiceModel.Channels.ChannelPoolSettings ChannelPoolSettings { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(10)]
        public int MaxAcceptedChannels { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool PacketRoutable { get { throw null; } set { } }
        public override System.ServiceModel.Channels.IChannelFactory<TChannel> BuildChannelFactory<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override System.ServiceModel.Channels.IChannelListener<TChannel> BuildChannelListener<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override bool CanBuildChannelFactory<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override bool CanBuildChannelListener<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override System.ServiceModel.Channels.BindingElement Clone() { throw null; }
        public override T GetProperty<T>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeChannelPoolSettings() { throw null; }
        void System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy(System.ServiceModel.Description.MetadataExporter exporter, System.ServiceModel.Description.PolicyConversionContext context) { }
    }
    public partial class OneWayBindingElementImporter : System.ServiceModel.Description.IPolicyImportExtension
    {
        public OneWayBindingElementImporter() { }
        void System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy(System.ServiceModel.Description.MetadataImporter importer, System.ServiceModel.Description.PolicyConversionContext context) { }
    }
    [System.ObsoleteAttribute("PeerChannel feature is obsolete and will be removed in the future.", false)]
    public sealed partial class PeerCustomResolverBindingElement : System.ServiceModel.Channels.PeerResolverBindingElement
    {
        public PeerCustomResolverBindingElement() { }
        public PeerCustomResolverBindingElement(System.ServiceModel.Channels.BindingContext context, System.ServiceModel.PeerResolvers.PeerCustomResolverSettings settings) { }
        public PeerCustomResolverBindingElement(System.ServiceModel.Channels.PeerCustomResolverBindingElement other) { }
        public PeerCustomResolverBindingElement(System.ServiceModel.PeerResolvers.PeerCustomResolverSettings settings) { }
        public System.ServiceModel.EndpointAddress Address { get { throw null; } set { } }
        public System.ServiceModel.Channels.Binding Binding { get { throw null; } set { } }
        public override System.ServiceModel.PeerResolvers.PeerReferralPolicy ReferralPolicy { get { throw null; } set { } }
        public override System.ServiceModel.Channels.IChannelFactory<TChannel> BuildChannelFactory<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override System.ServiceModel.Channels.IChannelListener<TChannel> BuildChannelListener<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override bool CanBuildChannelFactory<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override bool CanBuildChannelListener<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override System.ServiceModel.Channels.BindingElement Clone() { throw null; }
        public override System.ServiceModel.PeerResolver CreatePeerResolver() { throw null; }
        public override T GetProperty<T>(System.ServiceModel.Channels.BindingContext context) { throw null; }
    }
    public abstract partial class PeerResolverBindingElement : System.ServiceModel.Channels.BindingElement
    {
        protected PeerResolverBindingElement() { }
        protected PeerResolverBindingElement(System.ServiceModel.Channels.PeerResolverBindingElement other) { }
        public abstract System.ServiceModel.PeerResolvers.PeerReferralPolicy ReferralPolicy { get; set; }
        public abstract System.ServiceModel.PeerResolver CreatePeerResolver();
    }
    [System.ObsoleteAttribute("PeerChannel feature is obsolete and will be removed in the future.", false)]
    public sealed partial class PeerTransportBindingElement : System.ServiceModel.Channels.TransportBindingElement, System.ServiceModel.Description.IPolicyExportExtension, System.ServiceModel.Description.IWsdlExportExtension
    {
        public PeerTransportBindingElement() { }
        public System.Net.IPAddress ListenIPAddress { get { throw null; } set { } }
        public override long MaxReceivedMessageSize { get { throw null; } set { } }
        public int Port { get { throw null; } set { } }
        public override string Scheme { get { throw null; } }
        public System.ServiceModel.PeerSecuritySettings Security { get { throw null; } }
        public override System.ServiceModel.Channels.IChannelFactory<TChannel> BuildChannelFactory<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override System.ServiceModel.Channels.IChannelListener<TChannel> BuildChannelListener<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override bool CanBuildChannelFactory<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override bool CanBuildChannelListener<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override System.ServiceModel.Channels.BindingElement Clone() { throw null; }
        public override T GetProperty<T>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        void System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy(System.ServiceModel.Description.MetadataExporter exporter, System.ServiceModel.Description.PolicyConversionContext context) { }
        void System.ServiceModel.Description.IWsdlExportExtension.ExportContract(System.ServiceModel.Description.WsdlExporter exporter, System.ServiceModel.Description.WsdlContractConversionContext context) { }
        void System.ServiceModel.Description.IWsdlExportExtension.ExportEndpoint(System.ServiceModel.Description.WsdlExporter exporter, System.ServiceModel.Description.WsdlEndpointConversionContext endpointContext) { }
    }
    public sealed partial class PnrpPeerResolverBindingElement : System.ServiceModel.Channels.PeerResolverBindingElement
    {
        public PnrpPeerResolverBindingElement() { }
        public PnrpPeerResolverBindingElement(System.ServiceModel.PeerResolvers.PeerReferralPolicy referralPolicy) { }
        public override System.ServiceModel.PeerResolvers.PeerReferralPolicy ReferralPolicy { get { throw null; } set { } }
        public override System.ServiceModel.Channels.IChannelFactory<TChannel> BuildChannelFactory<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override System.ServiceModel.Channels.IChannelListener<TChannel> BuildChannelListener<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override bool CanBuildChannelFactory<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override bool CanBuildChannelListener<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override System.ServiceModel.Channels.BindingElement Clone() { throw null; }
        public override System.ServiceModel.PeerResolver CreatePeerResolver() { throw null; }
        public override T GetProperty<T>(System.ServiceModel.Channels.BindingContext context) { throw null; }
    }
    public sealed partial class PrivacyNoticeBindingElement : System.ServiceModel.Channels.BindingElement, System.ServiceModel.Description.IPolicyExportExtension
    {
        public PrivacyNoticeBindingElement() { }
        public PrivacyNoticeBindingElement(System.ServiceModel.Channels.PrivacyNoticeBindingElement elementToBeCloned) { }
        public System.Uri Url { get { throw null; } set { } }
        public int Version { get { throw null; } set { } }
        public override System.ServiceModel.Channels.BindingElement Clone() { throw null; }
        public override T GetProperty<T>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        void System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy(System.ServiceModel.Description.MetadataExporter exporter, System.ServiceModel.Description.PolicyConversionContext context) { }
    }
    public sealed partial class PrivacyNoticeBindingElementImporter : System.ServiceModel.Description.IPolicyImportExtension
    {
        public PrivacyNoticeBindingElementImporter() { }
        void System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy(System.ServiceModel.Description.MetadataImporter importer, System.ServiceModel.Description.PolicyConversionContext policyContext) { }
    }
    public abstract partial class ReceiveContext
    {
        public static readonly string Name;
        protected ReceiveContext() { }
        public System.ServiceModel.Channels.ReceiveContextState State { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]protected set { } }
        protected object ThisLock { get { throw null; } }
        public event System.EventHandler Faulted { add { } remove { } }
        public virtual void Abandon(System.Exception exception, System.TimeSpan timeout) { }
        public virtual void Abandon(System.TimeSpan timeout) { }
        public virtual System.IAsyncResult BeginAbandon(System.Exception exception, System.TimeSpan timeout, System.AsyncCallback callback, object state) { throw null; }
        public virtual System.IAsyncResult BeginAbandon(System.TimeSpan timeout, System.AsyncCallback callback, object state) { throw null; }
        public virtual System.IAsyncResult BeginComplete(System.TimeSpan timeout, System.AsyncCallback callback, object state) { throw null; }
        public virtual void Complete(System.TimeSpan timeout) { }
        public virtual void EndAbandon(System.IAsyncResult result) { }
        public virtual void EndComplete(System.IAsyncResult result) { }
        protected internal virtual void Fault() { }
        protected virtual void OnAbandon(System.Exception exception, System.TimeSpan timeout) { }
        protected abstract void OnAbandon(System.TimeSpan timeout);
        protected virtual System.IAsyncResult OnBeginAbandon(System.Exception exception, System.TimeSpan timeout, System.AsyncCallback callback, object state) { throw null; }
        protected abstract System.IAsyncResult OnBeginAbandon(System.TimeSpan timeout, System.AsyncCallback callback, object state);
        protected abstract System.IAsyncResult OnBeginComplete(System.TimeSpan timeout, System.AsyncCallback callback, object state);
        protected abstract void OnComplete(System.TimeSpan timeout);
        protected abstract void OnEndAbandon(System.IAsyncResult result);
        protected abstract void OnEndComplete(System.IAsyncResult result);
        protected virtual void OnFaulted() { }
        public static bool TryGet(System.ServiceModel.Channels.Message message, out System.ServiceModel.Channels.ReceiveContext property) { throw null; }
        public static bool TryGet(System.ServiceModel.Channels.MessageProperties properties, out System.ServiceModel.Channels.ReceiveContext property) { throw null; }
    }
    public enum ReceiveContextState
    {
        Abandoned = 4,
        Abandoning = 3,
        Completed = 2,
        Completing = 1,
        Faulted = 5,
        Received = 0,
    }
    [System.SerializableAttribute]
    public partial class RedirectionDuration
    {
        internal RedirectionDuration() { }
        public string Namespace { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        public static System.ServiceModel.Channels.RedirectionDuration Permanent { get { throw null; } }
        public static System.ServiceModel.Channels.RedirectionDuration Temporary { get { throw null; } }
        public string Value { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        public static System.ServiceModel.Channels.RedirectionDuration Create(string duration, string ns) { throw null; }
        public override bool Equals(object obj) { throw null; }
        public override int GetHashCode() { throw null; }
        public static bool operator ==(System.ServiceModel.Channels.RedirectionDuration left, System.ServiceModel.Channels.RedirectionDuration right) { throw null; }
        public static bool operator !=(System.ServiceModel.Channels.RedirectionDuration left, System.ServiceModel.Channels.RedirectionDuration right) { throw null; }
        public override string ToString() { throw null; }
    }
    [System.SerializableAttribute]
    public partial class RedirectionException : System.ServiceModel.CommunicationException
    {
        protected RedirectionException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
        public RedirectionException(System.ServiceModel.Channels.RedirectionType type, System.ServiceModel.Channels.RedirectionDuration duration, System.ServiceModel.Channels.RedirectionScope scope, System.Exception innerException, params System.ServiceModel.Channels.RedirectionLocation[] locations) { }
        public RedirectionException(System.ServiceModel.Channels.RedirectionType type, System.ServiceModel.Channels.RedirectionDuration duration, System.ServiceModel.Channels.RedirectionScope scope, params System.ServiceModel.Channels.RedirectionLocation[] locations) { }
        public RedirectionException(string message, System.ServiceModel.Channels.RedirectionType type, System.ServiceModel.Channels.RedirectionDuration duration, System.ServiceModel.Channels.RedirectionScope scope, System.Exception innerException, params System.ServiceModel.Channels.RedirectionLocation[] locations) { }
        public RedirectionException(string message, System.ServiceModel.Channels.RedirectionType type, System.ServiceModel.Channels.RedirectionDuration duration, System.ServiceModel.Channels.RedirectionScope scope, params System.ServiceModel.Channels.RedirectionLocation[] locations) { }
        public System.ServiceModel.Channels.RedirectionDuration Duration { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        public System.Collections.Generic.IEnumerable<System.ServiceModel.Channels.RedirectionLocation> Locations { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        public System.ServiceModel.Channels.RedirectionScope Scope { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        public System.ServiceModel.Channels.RedirectionType Type { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        [System.Security.SecurityCriticalAttribute]
        public override void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
    }
    [System.SerializableAttribute]
    public partial class RedirectionLocation
    {
        public RedirectionLocation(System.Uri address) { }
        public System.Uri Address { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
    }
    [System.SerializableAttribute]
    public partial class RedirectionScope
    {
        internal RedirectionScope() { }
        public static System.ServiceModel.Channels.RedirectionScope Endpoint { get { throw null; } }
        public static System.ServiceModel.Channels.RedirectionScope Message { get { throw null; } }
        public string Namespace { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        public static System.ServiceModel.Channels.RedirectionScope Session { get { throw null; } }
        public string Value { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        public static System.ServiceModel.Channels.RedirectionScope Create(string scope, string ns) { throw null; }
        public override bool Equals(object obj) { throw null; }
        public override int GetHashCode() { throw null; }
        public static bool operator ==(System.ServiceModel.Channels.RedirectionScope left, System.ServiceModel.Channels.RedirectionScope right) { throw null; }
        public static bool operator !=(System.ServiceModel.Channels.RedirectionScope left, System.ServiceModel.Channels.RedirectionScope right) { throw null; }
        public override string ToString() { throw null; }
    }
    [System.SerializableAttribute]
    public sealed partial class RedirectionType
    {
        internal RedirectionType() { }
        public static System.ServiceModel.Channels.RedirectionType Cache { get { throw null; } }
        public string Namespace { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        public static System.ServiceModel.Channels.RedirectionType Resource { get { throw null; } }
        public static System.ServiceModel.Channels.RedirectionType UseIntermediary { get { throw null; } }
        public string Value { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        public static System.ServiceModel.Channels.RedirectionType Create(string type, string ns) { throw null; }
        public override bool Equals(object obj) { throw null; }
        public override int GetHashCode() { throw null; }
        public static bool operator ==(System.ServiceModel.Channels.RedirectionType left, System.ServiceModel.Channels.RedirectionType right) { throw null; }
        public static bool operator !=(System.ServiceModel.Channels.RedirectionType left, System.ServiceModel.Channels.RedirectionType right) { throw null; }
        public override string ToString() { throw null; }
    }
    public sealed partial class ReliableSessionBindingElement : System.ServiceModel.Channels.BindingElement, System.ServiceModel.Description.IPolicyExportExtension
    {
        public ReliableSessionBindingElement() { }
        public ReliableSessionBindingElement(bool ordered) { }
        [System.ComponentModel.DefaultValueAttribute(typeof(System.TimeSpan), "00:00:00.2")]
        public System.TimeSpan AcknowledgementInterval { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool FlowControlEnabled { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(typeof(System.TimeSpan), "00:10:00")]
        public System.TimeSpan InactivityTimeout { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(4)]
        public int MaxPendingChannels { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(8)]
        public int MaxRetryCount { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(8)]
        public int MaxTransferWindowSize { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool Ordered { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(typeof(System.ServiceModel.ReliableMessagingVersion), "WSReliableMessagingFebruary2005")]
        public System.ServiceModel.ReliableMessagingVersion ReliableMessagingVersion { get { throw null; } set { } }
        public override System.ServiceModel.Channels.IChannelFactory<TChannel> BuildChannelFactory<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override System.ServiceModel.Channels.IChannelListener<TChannel> BuildChannelListener<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override bool CanBuildChannelFactory<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override bool CanBuildChannelListener<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override System.ServiceModel.Channels.BindingElement Clone() { throw null; }
        public override T GetProperty<T>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        void System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy(System.ServiceModel.Description.MetadataExporter exporter, System.ServiceModel.Description.PolicyConversionContext context) { }
    }
    public sealed partial class ReliableSessionBindingElementImporter : System.ServiceModel.Description.IPolicyImportExtension
    {
        public ReliableSessionBindingElementImporter() { }
        void System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy(System.ServiceModel.Description.MetadataImporter importer, System.ServiceModel.Description.PolicyConversionContext context) { }
    }
    public sealed partial class RemoteEndpointMessageProperty
    {
        public RemoteEndpointMessageProperty(string address, int port) { }
        public string Address { get { throw null; } }
        public static string Name { get { throw null; } }
        public int Port { get { throw null; } }
    }
    public abstract partial class RequestContext : System.IDisposable
    {
        protected RequestContext() { }
        public abstract System.ServiceModel.Channels.Message RequestMessage { get; }
        public abstract void Abort();
        public abstract System.IAsyncResult BeginReply(System.ServiceModel.Channels.Message message, System.AsyncCallback callback, object state);
        public abstract System.IAsyncResult BeginReply(System.ServiceModel.Channels.Message message, System.TimeSpan timeout, System.AsyncCallback callback, object state);
        public abstract void Close();
        public abstract void Close(System.TimeSpan timeout);
        protected virtual void Dispose(bool disposing) { }
        public abstract void EndReply(System.IAsyncResult result);
        public abstract void Reply(System.ServiceModel.Channels.Message message);
        public abstract void Reply(System.ServiceModel.Channels.Message message, System.TimeSpan timeout);
        void System.IDisposable.Dispose() { }
    }
    [System.SerializableAttribute]
    public partial class RetryException : System.ServiceModel.CommunicationException
    {
        public RetryException() { }
        [System.Security.SecurityCriticalAttribute]
        protected RetryException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
        public RetryException(string message) { }
        public RetryException(string message, System.Exception innerException) { }
    }
    public abstract partial class SecurityBindingElement : System.ServiceModel.Channels.BindingElement
    {
        internal SecurityBindingElement() { }
        public bool AllowInsecureTransport { get { throw null; } set { } }
        public System.ServiceModel.Security.SecurityAlgorithmSuite DefaultAlgorithmSuite { get { throw null; } set { } }
        public bool EnableUnsecuredResponse { get { throw null; } set { } }
        public System.ServiceModel.Security.Tokens.SupportingTokenParameters EndpointSupportingTokenParameters { get { throw null; } }
        public bool IncludeTimestamp { get { throw null; } set { } }
        public System.ServiceModel.Security.SecurityKeyEntropyMode KeyEntropyMode { get { throw null; } set { } }
        public System.ServiceModel.Channels.LocalClientSecuritySettings LocalClientSettings { get { throw null; } }
        public System.ServiceModel.Channels.LocalServiceSecuritySettings LocalServiceSettings { get { throw null; } }
        public System.ServiceModel.MessageSecurityVersion MessageSecurityVersion { get { throw null; } set { } }
        public System.Collections.Generic.IDictionary<string, System.ServiceModel.Security.Tokens.SupportingTokenParameters> OperationSupportingTokenParameters { get { throw null; } }
        public System.ServiceModel.Security.Tokens.SupportingTokenParameters OptionalEndpointSupportingTokenParameters { get { throw null; } }
        public System.Collections.Generic.IDictionary<string, System.ServiceModel.Security.Tokens.SupportingTokenParameters> OptionalOperationSupportingTokenParameters { get { throw null; } }
        public bool ProtectTokens { get { throw null; } set { } }
        public System.ServiceModel.Channels.SecurityHeaderLayout SecurityHeaderLayout { get { throw null; } set { } }
        protected abstract System.ServiceModel.Channels.IChannelFactory<TChannel> BuildChannelFactoryCore<TChannel>(System.ServiceModel.Channels.BindingContext context);
        public override System.ServiceModel.Channels.IChannelFactory<TChannel> BuildChannelFactory<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        protected abstract System.ServiceModel.Channels.IChannelListener<TChannel> BuildChannelListenerCore<TChannel>(System.ServiceModel.Channels.BindingContext context) where TChannel : class, System.ServiceModel.Channels.IChannel;
        public override System.ServiceModel.Channels.IChannelListener<TChannel> BuildChannelListener<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override bool CanBuildChannelFactory<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override bool CanBuildChannelListener<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public static System.ServiceModel.Channels.SymmetricSecurityBindingElement CreateAnonymousForCertificateBindingElement() { throw null; }
        public static System.ServiceModel.Channels.TransportSecurityBindingElement CreateCertificateOverTransportBindingElement() { throw null; }
        public static System.ServiceModel.Channels.TransportSecurityBindingElement CreateCertificateOverTransportBindingElement(System.ServiceModel.MessageSecurityVersion version) { throw null; }
        public static System.ServiceModel.Channels.AsymmetricSecurityBindingElement CreateCertificateSignatureBindingElement() { throw null; }
        public static System.ServiceModel.Channels.SymmetricSecurityBindingElement CreateIssuedTokenBindingElement(System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters issuedTokenParameters) { throw null; }
        public static System.ServiceModel.Channels.SymmetricSecurityBindingElement CreateIssuedTokenForCertificateBindingElement(System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters issuedTokenParameters) { throw null; }
        public static System.ServiceModel.Channels.SymmetricSecurityBindingElement CreateIssuedTokenForSslBindingElement(System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters issuedTokenParameters) { throw null; }
        public static System.ServiceModel.Channels.SymmetricSecurityBindingElement CreateIssuedTokenForSslBindingElement(System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters issuedTokenParameters, bool requireCancellation) { throw null; }
        public static System.ServiceModel.Channels.TransportSecurityBindingElement CreateIssuedTokenOverTransportBindingElement(System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters issuedTokenParameters) { throw null; }
        public static System.ServiceModel.Channels.SymmetricSecurityBindingElement CreateKerberosBindingElement() { throw null; }
        public static System.ServiceModel.Channels.TransportSecurityBindingElement CreateKerberosOverTransportBindingElement() { throw null; }
        public static System.ServiceModel.Channels.SecurityBindingElement CreateMutualCertificateBindingElement() { throw null; }
        public static System.ServiceModel.Channels.SecurityBindingElement CreateMutualCertificateBindingElement(System.ServiceModel.MessageSecurityVersion version) { throw null; }
        public static System.ServiceModel.Channels.SecurityBindingElement CreateMutualCertificateBindingElement(System.ServiceModel.MessageSecurityVersion version, bool allowSerializedSigningTokenOnReply) { throw null; }
        public static System.ServiceModel.Channels.AsymmetricSecurityBindingElement CreateMutualCertificateDuplexBindingElement() { throw null; }
        public static System.ServiceModel.Channels.AsymmetricSecurityBindingElement CreateMutualCertificateDuplexBindingElement(System.ServiceModel.MessageSecurityVersion version) { throw null; }
        public static System.ServiceModel.Channels.SecurityBindingElement CreateSecureConversationBindingElement(System.ServiceModel.Channels.SecurityBindingElement bootstrapSecurity) { throw null; }
        public static System.ServiceModel.Channels.SecurityBindingElement CreateSecureConversationBindingElement(System.ServiceModel.Channels.SecurityBindingElement bootstrapSecurity, bool requireCancellation) { throw null; }
        public static System.ServiceModel.Channels.SecurityBindingElement CreateSecureConversationBindingElement(System.ServiceModel.Channels.SecurityBindingElement bootstrapSecurity, bool requireCancellation, System.ServiceModel.Security.ChannelProtectionRequirements bootstrapProtectionRequirements) { throw null; }
        public static System.ServiceModel.Channels.SymmetricSecurityBindingElement CreateSslNegotiationBindingElement(bool requireClientCertificate) { throw null; }
        public static System.ServiceModel.Channels.SymmetricSecurityBindingElement CreateSslNegotiationBindingElement(bool requireClientCertificate, bool requireCancellation) { throw null; }
        public static System.ServiceModel.Channels.SymmetricSecurityBindingElement CreateSspiNegotiationBindingElement() { throw null; }
        public static System.ServiceModel.Channels.SymmetricSecurityBindingElement CreateSspiNegotiationBindingElement(bool requireCancellation) { throw null; }
        public static System.ServiceModel.Channels.TransportSecurityBindingElement CreateSspiNegotiationOverTransportBindingElement() { throw null; }
        public static System.ServiceModel.Channels.TransportSecurityBindingElement CreateSspiNegotiationOverTransportBindingElement(bool requireCancellation) { throw null; }
        public static System.ServiceModel.Channels.SymmetricSecurityBindingElement CreateUserNameForCertificateBindingElement() { throw null; }
        public static System.ServiceModel.Channels.SymmetricSecurityBindingElement CreateUserNameForSslBindingElement() { throw null; }
        public static System.ServiceModel.Channels.SymmetricSecurityBindingElement CreateUserNameForSslBindingElement(bool requireCancellation) { throw null; }
        public static System.ServiceModel.Channels.TransportSecurityBindingElement CreateUserNameOverTransportBindingElement() { throw null; }
        public override T GetProperty<T>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        protected static void SetIssuerBindingContextIfRequired(System.ServiceModel.Security.Tokens.SecurityTokenParameters parameters, System.ServiceModel.Channels.BindingContext issuerBindingContext) { }
        public virtual void SetKeyDerivation(bool requireDerivedKeys) { }
        public override string ToString() { throw null; }
    }
    public partial class SecurityBindingElementImporter : System.ServiceModel.Description.IPolicyImportExtension
    {
        public SecurityBindingElementImporter() { }
        public int MaxPolicyRedirections { get { throw null; } }
        void System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy(System.ServiceModel.Description.MetadataImporter importer, System.ServiceModel.Description.PolicyConversionContext policyContext) { }
    }
    public enum SecurityHeaderLayout
    {
        Lax = 1,
        LaxTimestampFirst = 2,
        LaxTimestampLast = 3,
        Strict = 0,
    }
    public abstract partial class SessionOpenNotification
    {
        protected SessionOpenNotification() { }
        public abstract bool IsEnabled { get; }
        public abstract void UpdateMessageProperties(System.ServiceModel.Channels.MessageProperties inboundMessageProperties);
    }
    public partial class SslStreamSecurityBindingElement : System.ServiceModel.Channels.StreamUpgradeBindingElement, System.ServiceModel.Channels.ITransportTokenAssertionProvider, System.ServiceModel.Description.IPolicyExportExtension
    {
        public SslStreamSecurityBindingElement() { }
        protected SslStreamSecurityBindingElement(System.ServiceModel.Channels.SslStreamSecurityBindingElement elementToBeCloned) { }
        public System.ServiceModel.Security.IdentityVerifier IdentityVerifier { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool RequireClientCertificate { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(System.Security.Authentication.SslProtocols.Tls | System.Security.Authentication.SslProtocols.Tls11 | System.Security.Authentication.SslProtocols.Tls12)]
        public System.Security.Authentication.SslProtocols SslProtocols { get { throw null; } set { } }
        public override System.ServiceModel.Channels.IChannelFactory<TChannel> BuildChannelFactory<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override System.ServiceModel.Channels.IChannelListener<TChannel> BuildChannelListener<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override System.ServiceModel.Channels.StreamUpgradeProvider BuildClientStreamUpgradeProvider(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override System.ServiceModel.Channels.StreamUpgradeProvider BuildServerStreamUpgradeProvider(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override bool CanBuildChannelFactory<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override bool CanBuildChannelListener<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override System.ServiceModel.Channels.BindingElement Clone() { throw null; }
        public override T GetProperty<T>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public System.Xml.XmlElement GetTransportTokenAssertion() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeIdentityVerifier() { throw null; }
        void System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy(System.ServiceModel.Description.MetadataExporter exporter, System.ServiceModel.Description.PolicyConversionContext context) { }
    }
    public partial class StandardBindingImporter : System.ServiceModel.Description.IWsdlImportExtension
    {
        public StandardBindingImporter() { }
        void System.ServiceModel.Description.IWsdlImportExtension.BeforeImport(System.Web.Services.Description.ServiceDescriptionCollection wsdlDocuments, System.Xml.Schema.XmlSchemaSet xmlSchemas, System.Collections.Generic.ICollection<System.Xml.XmlElement> policy) { }
        void System.ServiceModel.Description.IWsdlImportExtension.ImportContract(System.ServiceModel.Description.WsdlImporter importer, System.ServiceModel.Description.WsdlContractConversionContext context) { }
        void System.ServiceModel.Description.IWsdlImportExtension.ImportEndpoint(System.ServiceModel.Description.WsdlImporter importer, System.ServiceModel.Description.WsdlEndpointConversionContext endpointContext) { }
    }
    public abstract partial class StreamSecurityUpgradeAcceptor : System.ServiceModel.Channels.StreamUpgradeAcceptor
    {
        protected StreamSecurityUpgradeAcceptor() { }
        public abstract System.ServiceModel.Security.SecurityMessageProperty GetRemoteSecurity();
    }
    public abstract partial class StreamSecurityUpgradeInitiator : System.ServiceModel.Channels.StreamUpgradeInitiator
    {
        protected StreamSecurityUpgradeInitiator() { }
        public abstract System.ServiceModel.Security.SecurityMessageProperty GetRemoteSecurity();
    }
    public abstract partial class StreamSecurityUpgradeProvider : System.ServiceModel.Channels.StreamUpgradeProvider
    {
        protected StreamSecurityUpgradeProvider() { }
        protected StreamSecurityUpgradeProvider(System.ServiceModel.IDefaultCommunicationTimeouts timeouts) { }
        public abstract System.ServiceModel.EndpointIdentity Identity { get; }
    }
    public abstract partial class StreamUpgradeAcceptor
    {
        protected StreamUpgradeAcceptor() { }
        public virtual System.IO.Stream AcceptUpgrade(System.IO.Stream stream) { throw null; }
        public abstract System.IAsyncResult BeginAcceptUpgrade(System.IO.Stream stream, System.AsyncCallback callback, object state);
        public abstract bool CanUpgrade(string contentType);
        public abstract System.IO.Stream EndAcceptUpgrade(System.IAsyncResult result);
    }
    public abstract partial class StreamUpgradeBindingElement : System.ServiceModel.Channels.BindingElement
    {
        protected StreamUpgradeBindingElement() { }
        protected StreamUpgradeBindingElement(System.ServiceModel.Channels.StreamUpgradeBindingElement elementToBeCloned) { }
        public abstract System.ServiceModel.Channels.StreamUpgradeProvider BuildClientStreamUpgradeProvider(System.ServiceModel.Channels.BindingContext context);
        public abstract System.ServiceModel.Channels.StreamUpgradeProvider BuildServerStreamUpgradeProvider(System.ServiceModel.Channels.BindingContext context);
    }
    public abstract partial class StreamUpgradeInitiator
    {
        protected StreamUpgradeInitiator() { }
        public abstract System.IAsyncResult BeginInitiateUpgrade(System.IO.Stream stream, System.AsyncCallback callback, object state);
        public abstract System.IO.Stream EndInitiateUpgrade(System.IAsyncResult result);
        public abstract string GetNextUpgrade();
        public abstract System.IO.Stream InitiateUpgrade(System.IO.Stream stream);
    }
    public abstract partial class StreamUpgradeProvider : System.ServiceModel.Channels.CommunicationObject
    {
        protected StreamUpgradeProvider() { }
        protected StreamUpgradeProvider(System.ServiceModel.IDefaultCommunicationTimeouts timeouts) { }
        protected override System.TimeSpan DefaultCloseTimeout { get { throw null; } }
        protected override System.TimeSpan DefaultOpenTimeout { get { throw null; } }
        public abstract System.ServiceModel.Channels.StreamUpgradeAcceptor CreateUpgradeAcceptor();
        public abstract System.ServiceModel.Channels.StreamUpgradeInitiator CreateUpgradeInitiator(System.ServiceModel.EndpointAddress remoteAddress, System.Uri via);
        public virtual T GetProperty<T>() where T : class { throw null; }
    }
    public enum SupportedAddressingMode
    {
        Anonymous = 0,
        Mixed = 2,
        NonAnonymous = 1,
    }
    public sealed partial class SymmetricSecurityBindingElement : System.ServiceModel.Channels.SecurityBindingElement, System.ServiceModel.Description.IPolicyExportExtension
    {
        public SymmetricSecurityBindingElement() { }
        public SymmetricSecurityBindingElement(System.ServiceModel.Security.Tokens.SecurityTokenParameters protectionTokenParameters) { }
        public System.ServiceModel.Security.MessageProtectionOrder MessageProtectionOrder { get { throw null; } set { } }
        public System.ServiceModel.Security.Tokens.SecurityTokenParameters ProtectionTokenParameters { get { throw null; } set { } }
        public bool RequireSignatureConfirmation { get { throw null; } set { } }
        protected override System.ServiceModel.Channels.IChannelFactory<TChannel> BuildChannelFactoryCore<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        protected override System.ServiceModel.Channels.IChannelListener<TChannel> BuildChannelListenerCore<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override System.ServiceModel.Channels.BindingElement Clone() { throw null; }
        public override T GetProperty<T>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override void SetKeyDerivation(bool requireDerivedKeys) { }
        void System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy(System.ServiceModel.Description.MetadataExporter exporter, System.ServiceModel.Description.PolicyConversionContext context) { }
        public override string ToString() { throw null; }
    }
    public sealed partial class TcpConnectionPoolSettings
    {
        internal TcpConnectionPoolSettings() { }
        public string GroupName { get { throw null; } set { } }
        public System.TimeSpan IdleTimeout { get { throw null; } set { } }
        public System.TimeSpan LeaseTimeout { get { throw null; } set { } }
        public int MaxOutboundConnectionsPerEndpoint { get { throw null; } set { } }
    }
    public partial class TcpTransportBindingElement : System.ServiceModel.Channels.ConnectionOrientedTransportBindingElement
    {
        public TcpTransportBindingElement() { }
        protected TcpTransportBindingElement(System.ServiceModel.Channels.TcpTransportBindingElement elementToBeCloned) { }
        public System.ServiceModel.Channels.TcpConnectionPoolSettings ConnectionPoolSettings { get { throw null; } }
        public System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy ExtendedProtectionPolicy { get { throw null; } set { } }
        public int ListenBacklog { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool PortSharingEnabled { get { throw null; } set { } }
        public override string Scheme { get { throw null; } }
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool TeredoEnabled { get { throw null; } set { } }
        public override System.ServiceModel.Channels.IChannelFactory<TChannel> BuildChannelFactory<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override System.ServiceModel.Channels.IChannelListener<TChannel> BuildChannelListener<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override System.ServiceModel.Channels.BindingElement Clone() { throw null; }
        public override T GetProperty<T>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeExtendedProtectionPolicy() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeListenBacklog() { throw null; }
    }
    public sealed partial class TextMessageEncodingBindingElement : System.ServiceModel.Channels.MessageEncodingBindingElement, System.ServiceModel.Description.IPolicyExportExtension, System.ServiceModel.Description.IWsdlExportExtension
    {
        public TextMessageEncodingBindingElement() { }
        public TextMessageEncodingBindingElement(System.ServiceModel.Channels.MessageVersion messageVersion, System.Text.Encoding writeEncoding) { }
        [System.ComponentModel.DefaultValueAttribute(64)]
        public int MaxReadPoolSize { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(16)]
        public int MaxWritePoolSize { get { throw null; } set { } }
        public override System.ServiceModel.Channels.MessageVersion MessageVersion { get { throw null; } set { } }
        public System.Xml.XmlDictionaryReaderQuotas ReaderQuotas { get { throw null; } set { } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.EncodingConverter")]
        public System.Text.Encoding WriteEncoding { get { throw null; } set { } }
        public override System.ServiceModel.Channels.IChannelFactory<TChannel> BuildChannelFactory<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override System.ServiceModel.Channels.IChannelListener<TChannel> BuildChannelListener<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override bool CanBuildChannelListener<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override System.ServiceModel.Channels.BindingElement Clone() { throw null; }
        public override System.ServiceModel.Channels.MessageEncoderFactory CreateMessageEncoderFactory() { throw null; }
        public override T GetProperty<T>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeReaderQuotas() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeWriteEncoding() { throw null; }
        void System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy(System.ServiceModel.Description.MetadataExporter exporter, System.ServiceModel.Description.PolicyConversionContext context) { }
        void System.ServiceModel.Description.IWsdlExportExtension.ExportContract(System.ServiceModel.Description.WsdlExporter exporter, System.ServiceModel.Description.WsdlContractConversionContext context) { }
        void System.ServiceModel.Description.IWsdlExportExtension.ExportEndpoint(System.ServiceModel.Description.WsdlExporter exporter, System.ServiceModel.Description.WsdlEndpointConversionContext context) { }
    }
    public sealed partial class TransactionFlowBindingElement : System.ServiceModel.Channels.BindingElement, System.ServiceModel.Description.IPolicyExportExtension
    {
        public TransactionFlowBindingElement() { }
        public TransactionFlowBindingElement(System.ServiceModel.TransactionProtocol transactionProtocol) { }
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool AllowWildcardAction { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public System.ServiceModel.TransactionProtocol TransactionProtocol { get { throw null; } set { } }
        public override System.ServiceModel.Channels.IChannelFactory<TChannel> BuildChannelFactory<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override System.ServiceModel.Channels.IChannelListener<TChannel> BuildChannelListener<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override bool CanBuildChannelFactory<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override bool CanBuildChannelListener<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override System.ServiceModel.Channels.BindingElement Clone() { throw null; }
        public override T GetProperty<T>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeTransactionProtocol() { throw null; }
        void System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy(System.ServiceModel.Description.MetadataExporter exporter, System.ServiceModel.Description.PolicyConversionContext context) { }
    }
    public sealed partial class TransactionFlowBindingElementImporter : System.ServiceModel.Description.IPolicyImportExtension
    {
        public TransactionFlowBindingElementImporter() { }
        void System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy(System.ServiceModel.Description.MetadataImporter importer, System.ServiceModel.Description.PolicyConversionContext context) { }
    }
    public sealed partial class TransactionMessageProperty
    {
        internal TransactionMessageProperty() { }
        public System.Transactions.Transaction Transaction { get { throw null; } }
        public static void Set(System.Transactions.Transaction transaction, System.ServiceModel.Channels.Message message) { }
    }
    public enum TransferSession
    {
        None = 0,
        Ordered = 1,
        Unordered = 2,
    }
    public abstract partial class TransportBindingElement : System.ServiceModel.Channels.BindingElement
    {
        protected TransportBindingElement() { }
        protected TransportBindingElement(System.ServiceModel.Channels.TransportBindingElement elementToBeCloned) { }
        [System.ComponentModel.DefaultValueAttribute(false)]
        public virtual bool ManualAddressing { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute((long)524288)]
        public virtual long MaxBufferPoolSize { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute((long)65536)]
        public virtual long MaxReceivedMessageSize { get { throw null; } set { } }
        public abstract string Scheme { get; }
        public override T GetProperty<T>(System.ServiceModel.Channels.BindingContext context) { throw null; }
    }
    public partial class TransportBindingElementImporter : System.ServiceModel.Description.IPolicyImportExtension, System.ServiceModel.Description.IWsdlImportExtension
    {
        public TransportBindingElementImporter() { }
        void System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy(System.ServiceModel.Description.MetadataImporter importer, System.ServiceModel.Description.PolicyConversionContext policyContext) { }
        void System.ServiceModel.Description.IWsdlImportExtension.BeforeImport(System.Web.Services.Description.ServiceDescriptionCollection wsdlDocuments, System.Xml.Schema.XmlSchemaSet xmlSchemas, System.Collections.Generic.ICollection<System.Xml.XmlElement> policy) { }
        void System.ServiceModel.Description.IWsdlImportExtension.ImportContract(System.ServiceModel.Description.WsdlImporter importer, System.ServiceModel.Description.WsdlContractConversionContext context) { }
        void System.ServiceModel.Description.IWsdlImportExtension.ImportEndpoint(System.ServiceModel.Description.WsdlImporter importer, System.ServiceModel.Description.WsdlEndpointConversionContext context) { }
    }
    public sealed partial class TransportSecurityBindingElement : System.ServiceModel.Channels.SecurityBindingElement, System.ServiceModel.Description.IPolicyExportExtension
    {
        public TransportSecurityBindingElement() { }
        protected override System.ServiceModel.Channels.IChannelFactory<TChannel> BuildChannelFactoryCore<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        protected override System.ServiceModel.Channels.IChannelListener<TChannel> BuildChannelListenerCore<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override System.ServiceModel.Channels.BindingElement Clone() { throw null; }
        public override T GetProperty<T>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        void System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy(System.ServiceModel.Description.MetadataExporter exporter, System.ServiceModel.Description.PolicyConversionContext policyContext) { }
    }
    public sealed partial class UnderstoodHeaders : System.Collections.Generic.IEnumerable<System.ServiceModel.Channels.MessageHeaderInfo>, System.Collections.IEnumerable
    {
        internal UnderstoodHeaders() { }
        public void Add(System.ServiceModel.Channels.MessageHeaderInfo headerInfo) { }
        public bool Contains(System.ServiceModel.Channels.MessageHeaderInfo headerInfo) { throw null; }
        public System.Collections.Generic.IEnumerator<System.ServiceModel.Channels.MessageHeaderInfo> GetEnumerator() { throw null; }
        public void Remove(System.ServiceModel.Channels.MessageHeaderInfo headerInfo) { }
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { throw null; }
    }
    public sealed partial class UseManagedPresentationBindingElement : System.ServiceModel.Channels.BindingElement, System.ServiceModel.Description.IPolicyExportExtension
    {
        public UseManagedPresentationBindingElement() { }
        public override System.ServiceModel.Channels.BindingElement Clone() { throw null; }
        public override T GetProperty<T>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        void System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy(System.ServiceModel.Description.MetadataExporter exporter, System.ServiceModel.Description.PolicyConversionContext context) { }
    }
    public sealed partial class UseManagedPresentationBindingElementImporter : System.ServiceModel.Description.IPolicyImportExtension
    {
        public UseManagedPresentationBindingElementImporter() { }
        void System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy(System.ServiceModel.Description.MetadataImporter importer, System.ServiceModel.Description.PolicyConversionContext policyContext) { }
    }
    public sealed partial class WebSocketMessageProperty
    {
        public const string Name = "WebSocketMessageProperty";
        public WebSocketMessageProperty() { }
        public System.Net.WebSockets.WebSocketMessageType MessageType { get { throw null; } set { } }
        public System.Collections.ObjectModel.ReadOnlyDictionary<string, object> OpeningHandshakeProperties { get { throw null; } }
        public string SubProtocol { get { throw null; } }
        public System.Net.WebSockets.WebSocketContext WebSocketContext { get { throw null; } }
    }
    public sealed partial class WebSocketTransportSettings : System.IEquatable<System.ServiceModel.Channels.WebSocketTransportSettings>
    {
        public const string BinaryEncoderTransferModeHeader = "microsoft-binary-transfer-mode";
        public const string BinaryMessageReceivedAction = "http://schemas.microsoft.com/2011/02/websockets/onbinarymessage";
        public const string ConnectionOpenedAction = "http://schemas.microsoft.com/2011/02/session/onopen";
        public const string SoapContentTypeHeader = "soap-content-type";
        public const string TextMessageReceivedAction = "http://schemas.microsoft.com/2011/02/websockets/ontextmessage";
        public WebSocketTransportSettings() { }
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool CreateNotificationOnConnection { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool DisablePayloadMasking { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(typeof(System.TimeSpan), "00:00:00")]
        public System.TimeSpan KeepAliveInterval { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(0)]
        public int MaxPendingConnections { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(null)]
        public string SubProtocol { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(System.ServiceModel.Channels.WebSocketTransportUsage.Never)]
        public System.ServiceModel.Channels.WebSocketTransportUsage TransportUsage { get { throw null; } set { } }
        public override bool Equals(object obj) { throw null; }
        public bool Equals(System.ServiceModel.Channels.WebSocketTransportSettings other) { throw null; }
        public override int GetHashCode() { throw null; }
    }
    public enum WebSocketTransportUsage
    {
        Always = 1,
        Never = 2,
        WhenDuplex = 0,
    }
    public partial class WindowsStreamSecurityBindingElement : System.ServiceModel.Channels.StreamUpgradeBindingElement, System.ServiceModel.Channels.ITransportTokenAssertionProvider, System.ServiceModel.Description.IPolicyExportExtension
    {
        public WindowsStreamSecurityBindingElement() { }
        protected WindowsStreamSecurityBindingElement(System.ServiceModel.Channels.WindowsStreamSecurityBindingElement elementToBeCloned) { }
        [System.ComponentModel.DefaultValueAttribute(System.Net.Security.ProtectionLevel.EncryptAndSign)]
        public System.Net.Security.ProtectionLevel ProtectionLevel { get { throw null; } set { } }
        public override System.ServiceModel.Channels.IChannelFactory<TChannel> BuildChannelFactory<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override System.ServiceModel.Channels.IChannelListener<TChannel> BuildChannelListener<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override System.ServiceModel.Channels.StreamUpgradeProvider BuildClientStreamUpgradeProvider(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override System.ServiceModel.Channels.StreamUpgradeProvider BuildServerStreamUpgradeProvider(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override bool CanBuildChannelFactory<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override bool CanBuildChannelListener<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override System.ServiceModel.Channels.BindingElement Clone() { throw null; }
        public override T GetProperty<T>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public System.Xml.XmlElement GetTransportTokenAssertion() { throw null; }
        void System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy(System.ServiceModel.Description.MetadataExporter exporter, System.ServiceModel.Description.PolicyConversionContext context) { }
    }
    public partial class WrappedOptions
    {
        public WrappedOptions() { }
        public bool WrappedFlag { get { throw null; } set { } }
    }
    public partial class XmlSerializerImportOptions
    {
        public XmlSerializerImportOptions() { }
        public XmlSerializerImportOptions(System.CodeDom.CodeCompileUnit codeCompileUnit) { }
        public string ClrNamespace { get { throw null; } set { } }
        public System.CodeDom.CodeCompileUnit CodeCompileUnit { get { throw null; } }
        public System.CodeDom.Compiler.CodeDomProvider CodeProvider { get { throw null; } set { } }
        public System.Web.Services.Description.WebReferenceOptions WebReferenceOptions { get { throw null; } set { } }
    }
}
namespace System.ServiceModel.ComIntegration
{
    [System.Runtime.InteropServices.ComVisibleAttribute(true)]
    [System.Runtime.InteropServices.GuidAttribute("59856830-3ECB-4D29-9CFE-DDD0F74B96A2")]
    public partial class DllHostInitializer : System.EnterpriseServices.IProcessInitializer
    {
        public DllHostInitializer() { }
        public void Shutdown() { }
        public void Startup(object punkProcessControl) { }
    }
    [System.Runtime.InteropServices.GuidAttribute("181b448c-c17c-4b17-ac6d-06699b93198f")]
    [System.Runtime.InteropServices.InterfaceTypeAttribute(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIDispatch)]
    public partial interface IChannelCredentials
    {
        void SetClientCertificateFromFile(string fileName, string password, string keyStorageFlags);
        void SetClientCertificateFromStore(string storeLocation, string storeName, string findType, object findValue);
        void SetClientCertificateFromStoreByName(string subjectName, string storeLocation, string storeName);
        void SetDefaultServiceCertificateFromFile(string fileName, string password, string keyStorageFlags);
        void SetDefaultServiceCertificateFromStore(string storeLocation, string storeName, string findType, object findValue);
        void SetDefaultServiceCertificateFromStoreByName(string subjectName, string storeLocation, string storeName);
        void SetIssuedToken(string localIssuerAddres, string localIssuerBindingType, string localIssuerBinding);
        void SetServiceCertificateAuthentication(string storeLocation, string revocationMode, string certificationValidationMode);
        void SetUserNameCredential(string userName, string password);
        void SetWindowsCredential(string domain, string userName, string password, int impersonationLevel, bool allowNtlm);
    }
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class PersistStreamTypeWrapper : System.Runtime.Serialization.IExtensibleDataObject
    {
        public PersistStreamTypeWrapper() { }
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        [System.Security.SecuritySafeCriticalAttribute]
        [System.Security.Permissions.PermissionSetAttribute(System.Security.Permissions.SecurityAction.Demand, Unrestricted=true)]
        public void GetObject<T>(ref T obj) { }
        [System.Security.SecuritySafeCriticalAttribute]
        [System.Security.Permissions.PermissionSetAttribute(System.Security.Permissions.SecurityAction.Demand, Unrestricted=true)]
        public void SetObject<T>(T obj) { }
    }
    [System.Runtime.InteropServices.ComVisibleAttribute(true)]
    [System.Runtime.InteropServices.GuidAttribute("CE39D6F3-DAB7-41b3-9F7D-BD1CC4E92399")]
    public sealed partial class ServiceMoniker : System.ContextBoundObject
    {
        public ServiceMoniker() { }
    }
    public sealed partial class WasHostedComPlusFactory : System.ServiceModel.Activation.ServiceHostFactoryBase
    {
        public WasHostedComPlusFactory() { }
        public override System.ServiceModel.ServiceHostBase CreateServiceHost(string constructorString, System.Uri[] baseAddresses) { throw null; }
    }
}
namespace System.ServiceModel.Configuration
{
    public sealed partial class AddressHeaderCollectionElement : System.ServiceModel.Configuration.ServiceModelConfigurationElement
    {
        public AddressHeaderCollectionElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("headers", DefaultValue=null)]
        public System.ServiceModel.Channels.AddressHeaderCollection Headers { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Security.SecuritySafeCriticalAttribute]
        protected override void DeserializeElement(System.Xml.XmlReader reader, bool serializeCollectionKey) { }
        protected override bool SerializeToXmlElement(System.Xml.XmlWriter writer, string elementName) { throw null; }
    }
    public sealed partial class AllowedAudienceUriElement : System.Configuration.ConfigurationElement
    {
        public AllowedAudienceUriElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("allowedAudienceUri", Options=System.Configuration.ConfigurationPropertyOptions.IsKey)]
        [System.Configuration.StringValidatorAttribute(MinLength=1)]
        public string AllowedAudienceUri { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
    }
    [System.Configuration.ConfigurationCollectionAttribute(typeof(System.ServiceModel.Configuration.AllowedAudienceUriElement), CollectionType=System.Configuration.ConfigurationElementCollectionType.BasicMap)]
    public sealed partial class AllowedAudienceUriElementCollection : System.ServiceModel.Configuration.ServiceModelConfigurationElementCollection<System.ServiceModel.Configuration.AllowedAudienceUriElement>
    {
        public AllowedAudienceUriElementCollection() { }
        protected override bool ThrowOnDuplicate { get { throw null; } }
        protected override System.Configuration.ConfigurationElement CreateNewElement() { throw null; }
        protected override object GetElementKey(System.Configuration.ConfigurationElement element) { throw null; }
    }
    public sealed partial class ApplicationContainerSettingsElement : System.ServiceModel.Configuration.ServiceModelConfigurationElement
    {
        public ApplicationContainerSettingsElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("packageFullName", DefaultValue=null)]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string PackageFullName { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.SessionIdTypeConvertor")]
        [System.Configuration.ConfigurationPropertyAttribute("sessionId", DefaultValue="CurrentSession")]
        public int SessionId { get { throw null; } set { } }
    }
    public enum AuthenticationMode
    {
        AnonymousForCertificate = 0,
        AnonymousForSslNegotiated = 1,
        CertificateOverTransport = 2,
        IssuedToken = 3,
        IssuedTokenForCertificate = 4,
        IssuedTokenForSslNegotiated = 5,
        IssuedTokenOverTransport = 6,
        Kerberos = 7,
        KerberosOverTransport = 8,
        MutualCertificate = 9,
        MutualCertificateDuplex = 10,
        MutualSslNegotiated = 11,
        SecureConversation = 12,
        SspiNegotiated = 13,
        SspiNegotiatedOverTransport = 17,
        UserNameForCertificate = 14,
        UserNameForSslNegotiated = 15,
        UserNameOverTransport = 16,
    }
    public sealed partial class AuthorizationPolicyTypeElement : System.Configuration.ConfigurationElement
    {
        public AuthorizationPolicyTypeElement() { }
        public AuthorizationPolicyTypeElement(string policyType) { }
        [System.Configuration.ConfigurationPropertyAttribute("policyType", Options=System.Configuration.ConfigurationPropertyOptions.IsKey | System.Configuration.ConfigurationPropertyOptions.IsRequired)]
        [System.Configuration.StringValidatorAttribute(MinLength=1)]
        public string PolicyType { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
    }
    [System.Configuration.ConfigurationCollectionAttribute(typeof(System.ServiceModel.Configuration.AuthorizationPolicyTypeElement))]
    public sealed partial class AuthorizationPolicyTypeElementCollection : System.ServiceModel.Configuration.ServiceModelConfigurationElementCollection<System.ServiceModel.Configuration.AuthorizationPolicyTypeElement>
    {
        public AuthorizationPolicyTypeElementCollection() { }
        protected override object GetElementKey(System.Configuration.ConfigurationElement element) { throw null; }
    }
    public sealed partial class BaseAddressElement : System.Configuration.ConfigurationElement
    {
        public BaseAddressElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("baseAddress", Options=System.Configuration.ConfigurationPropertyOptions.IsKey | System.Configuration.ConfigurationPropertyOptions.IsRequired)]
        [System.Configuration.StringValidatorAttribute(MinLength=1)]
        public string BaseAddress { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
    }
    [System.Configuration.ConfigurationCollectionAttribute(typeof(System.ServiceModel.Configuration.BaseAddressElement), CollectionType=System.Configuration.ConfigurationElementCollectionType.BasicMap)]
    public sealed partial class BaseAddressElementCollection : System.ServiceModel.Configuration.ServiceModelConfigurationElementCollection<System.ServiceModel.Configuration.BaseAddressElement>
    {
        public BaseAddressElementCollection() { }
        protected override bool ThrowOnDuplicate { get { throw null; } }
        protected override System.Configuration.ConfigurationElement CreateNewElement() { throw null; }
        protected override object GetElementKey(System.Configuration.ConfigurationElement element) { throw null; }
    }
    public sealed partial class BaseAddressPrefixFilterElement : System.Configuration.ConfigurationElement
    {
        public BaseAddressPrefixFilterElement() { }
        public BaseAddressPrefixFilterElement(System.Uri prefix) { }
        [System.Configuration.ConfigurationPropertyAttribute("prefix", Options=System.Configuration.ConfigurationPropertyOptions.IsKey | System.Configuration.ConfigurationPropertyOptions.IsRequired)]
        public System.Uri Prefix { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
    }
    [System.Configuration.ConfigurationCollectionAttribute(typeof(System.ServiceModel.Configuration.BaseAddressPrefixFilterElement))]
    public sealed partial class BaseAddressPrefixFilterElementCollection : System.ServiceModel.Configuration.ServiceModelConfigurationElementCollection<System.ServiceModel.Configuration.BaseAddressPrefixFilterElement>
    {
        public BaseAddressPrefixFilterElementCollection() { }
        protected override bool ThrowOnDuplicate { get { throw null; } }
        protected override System.Configuration.ConfigurationElement CreateNewElement() { throw null; }
        protected override object GetElementKey(System.Configuration.ConfigurationElement element) { throw null; }
    }
    public partial class BasicHttpBindingCollectionElement : System.ServiceModel.Configuration.StandardBindingCollectionElement<System.ServiceModel.BasicHttpBinding, System.ServiceModel.Configuration.BasicHttpBindingElement>
    {
        public BasicHttpBindingCollectionElement() { }
    }
    public partial class BasicHttpBindingElement : System.ServiceModel.Configuration.HttpBindingBaseElement
    {
        public BasicHttpBindingElement() : base (default(string)) { }
        public BasicHttpBindingElement(string name) : base (default(string)) { }
        protected override System.Type BindingElementType { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("messageEncoding", DefaultValue=System.ServiceModel.WSMessageEncoding.Text)]
        public System.ServiceModel.WSMessageEncoding MessageEncoding { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("security")]
        public System.ServiceModel.Configuration.BasicHttpSecurityElement Security { get { throw null; } }
        protected internal override void InitializeFrom(System.ServiceModel.Channels.Binding binding) { }
        protected override void OnApplyConfiguration(System.ServiceModel.Channels.Binding binding) { }
    }
    [System.Runtime.CompilerServices.TypeForwardedFromAttribute("System.WorkflowServices, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
    public partial class BasicHttpContextBindingCollectionElement : System.ServiceModel.Configuration.StandardBindingCollectionElement<System.ServiceModel.BasicHttpContextBinding, System.ServiceModel.Configuration.BasicHttpContextBindingElement>
    {
        public BasicHttpContextBindingCollectionElement() { }
    }
    [System.Runtime.CompilerServices.TypeForwardedFromAttribute("System.WorkflowServices, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
    public partial class BasicHttpContextBindingElement : System.ServiceModel.Configuration.BasicHttpBindingElement
    {
        public BasicHttpContextBindingElement() { }
        public BasicHttpContextBindingElement(string name) { }
        protected override System.Type BindingElementType { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("contextManagementEnabled", DefaultValue=true)]
        public bool ContextManagementEnabled { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        protected internal override void InitializeFrom(System.ServiceModel.Channels.Binding binding) { }
        protected override void OnApplyConfiguration(System.ServiceModel.Channels.Binding binding) { }
    }
    public sealed partial class BasicHttpMessageSecurityElement : System.ServiceModel.Configuration.ServiceModelConfigurationElement
    {
        public BasicHttpMessageSecurityElement() { }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.SecurityAlgorithmSuiteConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("algorithmSuite", DefaultValue="Default")]
        public System.ServiceModel.Security.SecurityAlgorithmSuite AlgorithmSuite { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("clientCredentialType", DefaultValue=System.ServiceModel.BasicHttpMessageCredentialType.UserName)]
        public System.ServiceModel.BasicHttpMessageCredentialType ClientCredentialType { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
    }
    public partial class BasicHttpsBindingCollectionElement : System.ServiceModel.Configuration.StandardBindingCollectionElement<System.ServiceModel.BasicHttpsBinding, System.ServiceModel.Configuration.BasicHttpsBindingElement>
    {
        public BasicHttpsBindingCollectionElement() { }
    }
    public partial class BasicHttpsBindingElement : System.ServiceModel.Configuration.HttpBindingBaseElement
    {
        public BasicHttpsBindingElement() : base (default(string)) { }
        public BasicHttpsBindingElement(string name) : base (default(string)) { }
        protected override System.Type BindingElementType { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("messageEncoding", DefaultValue=System.ServiceModel.WSMessageEncoding.Text)]
        public System.ServiceModel.WSMessageEncoding MessageEncoding { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("security")]
        public System.ServiceModel.Configuration.BasicHttpsSecurityElement Security { get { throw null; } }
        protected internal override void InitializeFrom(System.ServiceModel.Channels.Binding binding) { }
        protected override void OnApplyConfiguration(System.ServiceModel.Channels.Binding binding) { }
    }
    public sealed partial class BasicHttpSecurityElement : System.ServiceModel.Configuration.ServiceModelConfigurationElement
    {
        public BasicHttpSecurityElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("message")]
        public System.ServiceModel.Configuration.BasicHttpMessageSecurityElement Message { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("mode", DefaultValue=System.ServiceModel.BasicHttpSecurityMode.None)]
        public System.ServiceModel.BasicHttpSecurityMode Mode { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("transport")]
        public System.ServiceModel.Configuration.HttpTransportSecurityElement Transport { get { throw null; } }
    }
    public sealed partial class BasicHttpsSecurityElement : System.ServiceModel.Configuration.ServiceModelConfigurationElement
    {
        public BasicHttpsSecurityElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("message")]
        public System.ServiceModel.Configuration.BasicHttpMessageSecurityElement Message { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("mode", DefaultValue=System.ServiceModel.BasicHttpsSecurityMode.Transport)]
        public System.ServiceModel.BasicHttpsSecurityMode Mode { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("transport")]
        public System.ServiceModel.Configuration.HttpTransportSecurityElement Transport { get { throw null; } }
    }
    public abstract partial class BehaviorExtensionElement : System.ServiceModel.Configuration.ServiceModelExtensionElement
    {
        protected BehaviorExtensionElement() { }
        public abstract System.Type BehaviorType { get; }
        protected internal abstract object CreateBehavior();
    }
    public partial class BehaviorsSection : System.Configuration.ConfigurationSection
    {
        public BehaviorsSection() { }
        [System.Configuration.ConfigurationPropertyAttribute("endpointBehaviors", Options=System.Configuration.ConfigurationPropertyOptions.None)]
        public System.ServiceModel.Configuration.EndpointBehaviorElementCollection EndpointBehaviors { get { throw null; } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("serviceBehaviors", Options=System.Configuration.ConfigurationPropertyOptions.None)]
        public System.ServiceModel.Configuration.ServiceBehaviorElementCollection ServiceBehaviors { get { throw null; } }
    }
    public sealed partial class BinaryMessageEncodingElement : System.ServiceModel.Configuration.BindingElementExtensionElement
    {
        public BinaryMessageEncodingElement() { }
        public override System.Type BindingElementType { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("compressionFormat", DefaultValue=System.ServiceModel.Channels.CompressionFormat.None)]
        public System.ServiceModel.Channels.CompressionFormat CompressionFormat { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("maxReadPoolSize", DefaultValue=64)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=1)]
        public int MaxReadPoolSize { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("maxSessionSize", DefaultValue=2048)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=0)]
        public int MaxSessionSize { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("maxWritePoolSize", DefaultValue=16)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=1)]
        public int MaxWritePoolSize { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("readerQuotas")]
        public System.ServiceModel.Configuration.XmlDictionaryReaderQuotasElement ReaderQuotas { get { throw null; } }
        public override void ApplyConfiguration(System.ServiceModel.Channels.BindingElement bindingElement) { }
        public override void CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement from) { }
        protected internal override System.ServiceModel.Channels.BindingElement CreateBindingElement() { throw null; }
        protected internal override void InitializeFrom(System.ServiceModel.Channels.BindingElement bindingElement) { }
    }
    public abstract partial class BindingCollectionElement : System.Configuration.ConfigurationElement
    {
        protected BindingCollectionElement() { }
        public string BindingName { get { throw null; } }
        public abstract System.Type BindingType { get; }
        public abstract System.Collections.ObjectModel.ReadOnlyCollection<System.ServiceModel.Configuration.IBindingConfigurationElement> ConfiguredBindings { get; }
        public abstract bool ContainsKey(string name);
        protected internal abstract System.ServiceModel.Channels.Binding GetDefault();
        protected internal abstract bool TryAdd(string name, System.ServiceModel.Channels.Binding binding, System.Configuration.Configuration config);
    }
    public abstract partial class BindingElementExtensionElement : System.ServiceModel.Configuration.ServiceModelExtensionElement
    {
        protected BindingElementExtensionElement() { }
        public abstract System.Type BindingElementType { get; }
        public virtual void ApplyConfiguration(System.ServiceModel.Channels.BindingElement bindingElement) { }
        protected internal abstract System.ServiceModel.Channels.BindingElement CreateBindingElement();
        protected internal virtual void InitializeFrom(System.ServiceModel.Channels.BindingElement bindingElement) { }
    }
    public sealed partial class BindingsSection : System.Configuration.ConfigurationSection
    {
        public BindingsSection() { }
        [System.Configuration.ConfigurationPropertyAttribute("basicHttpBinding", Options=System.Configuration.ConfigurationPropertyOptions.None)]
        public System.ServiceModel.Configuration.BasicHttpBindingCollectionElement BasicHttpBinding { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("basicHttpsBinding", Options=System.Configuration.ConfigurationPropertyOptions.None)]
        public System.ServiceModel.Configuration.BasicHttpsBindingCollectionElement BasicHttpsBinding { get { throw null; } }
        public System.Collections.Generic.List<System.ServiceModel.Configuration.BindingCollectionElement> BindingCollections { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("customBinding", Options=System.Configuration.ConfigurationPropertyOptions.None)]
        public System.ServiceModel.Configuration.CustomBindingCollectionElement CustomBinding { get { throw null; } }
        public new System.ServiceModel.Configuration.BindingCollectionElement this[string binding] { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("msmqIntegrationBinding", Options=System.Configuration.ConfigurationPropertyOptions.None)]
        public System.ServiceModel.Configuration.MsmqIntegrationBindingCollectionElement MsmqIntegrationBinding { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("netHttpBinding", Options=System.Configuration.ConfigurationPropertyOptions.None)]
        public System.ServiceModel.Configuration.NetHttpBindingCollectionElement NetHttpBinding { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("netHttpsBinding", Options=System.Configuration.ConfigurationPropertyOptions.None)]
        public System.ServiceModel.Configuration.NetHttpsBindingCollectionElement NetHttpsBinding { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("netMsmqBinding", Options=System.Configuration.ConfigurationPropertyOptions.None)]
        public System.ServiceModel.Configuration.NetMsmqBindingCollectionElement NetMsmqBinding { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("netNamedPipeBinding", Options=System.Configuration.ConfigurationPropertyOptions.None)]
        public System.ServiceModel.Configuration.NetNamedPipeBindingCollectionElement NetNamedPipeBinding { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("netPeerTcpBinding", Options=System.Configuration.ConfigurationPropertyOptions.None)]
        [System.ObsoleteAttribute("PeerChannel feature is obsolete and will be removed in the future.", false)]
        public System.ServiceModel.Configuration.NetPeerTcpBindingCollectionElement NetPeerTcpBinding { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("netTcpBinding", Options=System.Configuration.ConfigurationPropertyOptions.None)]
        public System.ServiceModel.Configuration.NetTcpBindingCollectionElement NetTcpBinding { get { throw null; } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("ws2007FederationHttpBinding", Options=System.Configuration.ConfigurationPropertyOptions.None)]
        public System.ServiceModel.Configuration.WS2007FederationHttpBindingCollectionElement WS2007FederationHttpBinding { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("ws2007HttpBinding", Options=System.Configuration.ConfigurationPropertyOptions.None)]
        public System.ServiceModel.Configuration.WS2007HttpBindingCollectionElement WS2007HttpBinding { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("wsDualHttpBinding", Options=System.Configuration.ConfigurationPropertyOptions.None)]
        public System.ServiceModel.Configuration.WSDualHttpBindingCollectionElement WSDualHttpBinding { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("wsFederationHttpBinding", Options=System.Configuration.ConfigurationPropertyOptions.None)]
        public System.ServiceModel.Configuration.WSFederationHttpBindingCollectionElement WSFederationHttpBinding { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("wsHttpBinding", Options=System.Configuration.ConfigurationPropertyOptions.None)]
        public System.ServiceModel.Configuration.WSHttpBindingCollectionElement WSHttpBinding { get { throw null; } }
        public static System.ServiceModel.Configuration.BindingsSection GetSection(System.Configuration.Configuration config) { throw null; }
        protected override bool OnDeserializeUnrecognizedElement(string elementName, System.Xml.XmlReader reader) { throw null; }
    }
    public sealed partial class CallbackDebugElement : System.ServiceModel.Configuration.BehaviorExtensionElement
    {
        public CallbackDebugElement() { }
        public override System.Type BehaviorType { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("includeExceptionDetailInFaults", DefaultValue=false)]
        public bool IncludeExceptionDetailInFaults { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        public override void CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement from) { }
        protected internal override object CreateBehavior() { throw null; }
    }
    public sealed partial class CallbackTimeoutsElement : System.ServiceModel.Configuration.BehaviorExtensionElement
    {
        public CallbackTimeoutsElement() { }
        public override System.Type BehaviorType { get { throw null; } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("transactionTimeout", DefaultValue="00:00:00")]
        public System.TimeSpan TransactionTimeout { get { throw null; } set { } }
        public override void CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement from) { }
        protected internal override object CreateBehavior() { throw null; }
    }
    public sealed partial class CertificateElement : System.Configuration.ConfigurationElement
    {
        public CertificateElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("encodedValue", DefaultValue="")]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string EncodedValue { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
    }
    public sealed partial class CertificateReferenceElement : System.Configuration.ConfigurationElement
    {
        public CertificateReferenceElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("findValue", DefaultValue="")]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string FindValue { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("isChainIncluded", DefaultValue=false)]
        public bool IsChainIncluded { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("storeLocation", DefaultValue=System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine)]
        public System.Security.Cryptography.X509Certificates.StoreLocation StoreLocation { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("storeName", DefaultValue=System.Security.Cryptography.X509Certificates.StoreName.My)]
        public System.Security.Cryptography.X509Certificates.StoreName StoreName { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("x509FindType", DefaultValue=System.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectDistinguishedName)]
        public System.Security.Cryptography.X509Certificates.X509FindType X509FindType { get { throw null; } set { } }
    }
    public sealed partial class ChannelEndpointElement : System.Configuration.ConfigurationElement
    {
        public ChannelEndpointElement() { }
        public ChannelEndpointElement(System.ServiceModel.EndpointAddress address, string contractType) { }
        [System.Configuration.ConfigurationPropertyAttribute("address", Options=System.Configuration.ConfigurationPropertyOptions.None)]
        public System.Uri Address { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("behaviorConfiguration", DefaultValue="")]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string BehaviorConfiguration { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("binding", DefaultValue="")]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string Binding { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("bindingConfiguration", DefaultValue="")]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string BindingConfiguration { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("contract", DefaultValue="", Options=System.Configuration.ConfigurationPropertyOptions.IsKey)]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string Contract { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("endpointConfiguration", DefaultValue="", Options=System.Configuration.ConfigurationPropertyOptions.None)]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string EndpointConfiguration { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("headers")]
        public System.ServiceModel.Configuration.AddressHeaderCollectionElement Headers { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("identity")]
        public System.ServiceModel.Configuration.IdentityElement Identity { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("kind", DefaultValue="", Options=System.Configuration.ConfigurationPropertyOptions.None)]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string Kind { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("name", DefaultValue="", Options=System.Configuration.ConfigurationPropertyOptions.IsKey)]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string Name { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Security.SecurityCriticalAttribute]
        protected override void Reset(System.Configuration.ConfigurationElement parentElement) { }
    }
    [System.Configuration.ConfigurationCollectionAttribute(typeof(System.ServiceModel.Configuration.ChannelEndpointElement), AddItemName="endpoint")]
    public sealed partial class ChannelEndpointElementCollection : System.ServiceModel.Configuration.ServiceModelEnhancedConfigurationElementCollection<System.ServiceModel.Configuration.ChannelEndpointElement>
    {
        public ChannelEndpointElementCollection() { }
        protected override object GetElementKey(System.Configuration.ConfigurationElement element) { throw null; }
    }
    public sealed partial class ChannelPoolSettingsElement : System.ServiceModel.Configuration.ServiceModelConfigurationElement
    {
        public ChannelPoolSettingsElement() { }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("idleTimeout", DefaultValue="00:02:00")]
        public System.TimeSpan IdleTimeout { get { throw null; } set { } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("leaseTimeout", DefaultValue="00:10:00")]
        public System.TimeSpan LeaseTimeout { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("maxOutboundChannelsPerEndpoint", DefaultValue=10)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=1)]
        public int MaxOutboundChannelsPerEndpoint { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
    }
    public sealed partial class ClaimTypeElement : System.Configuration.ConfigurationElement
    {
        public ClaimTypeElement() { }
        public ClaimTypeElement(string claimType, bool isOptional) { }
        [System.Configuration.ConfigurationPropertyAttribute("claimType", DefaultValue="", Options=System.Configuration.ConfigurationPropertyOptions.IsKey | System.Configuration.ConfigurationPropertyOptions.IsRequired)]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string ClaimType { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("isOptional", DefaultValue=false)]
        public bool IsOptional { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
    }
    [System.Configuration.ConfigurationCollectionAttribute(typeof(System.ServiceModel.Configuration.ClaimTypeElement))]
    public sealed partial class ClaimTypeElementCollection : System.ServiceModel.Configuration.ServiceModelConfigurationElementCollection<System.ServiceModel.Configuration.ClaimTypeElement>
    {
        public ClaimTypeElementCollection() { }
        protected override object GetElementKey(System.Configuration.ConfigurationElement element) { throw null; }
    }
    public sealed partial class ClearBehaviorElement : System.ServiceModel.Configuration.BehaviorExtensionElement
    {
        public ClearBehaviorElement() { }
        public override System.Type BehaviorType { get { throw null; } }
        protected internal override object CreateBehavior() { throw null; }
    }
    public partial class ClientCredentialsElement : System.ServiceModel.Configuration.BehaviorExtensionElement
    {
        public ClientCredentialsElement() { }
        public override System.Type BehaviorType { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("clientCertificate")]
        public System.ServiceModel.Configuration.X509InitiatorCertificateClientElement ClientCertificate { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("httpDigest")]
        public System.ServiceModel.Configuration.HttpDigestClientElement HttpDigest { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("issuedToken")]
        public System.ServiceModel.Configuration.IssuedTokenClientElement IssuedToken { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("peer")]
        public System.ServiceModel.Configuration.PeerCredentialElement Peer { get { throw null; } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("serviceCertificate")]
        public System.ServiceModel.Configuration.X509RecipientCertificateClientElement ServiceCertificate { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("supportInteractive", DefaultValue=true)]
        public bool SupportInteractive { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("type", DefaultValue="")]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string Type { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("useIdentityConfiguration", DefaultValue=false)]
        public bool UseIdentityConfiguration { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("windows")]
        public System.ServiceModel.Configuration.WindowsClientElement Windows { get { throw null; } }
        protected internal void ApplyConfiguration(System.ServiceModel.Description.ClientCredentials behavior) { }
        public override void CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement from) { }
        protected internal override object CreateBehavior() { throw null; }
    }
    public sealed partial class ClientSection : System.Configuration.ConfigurationSection
    {
        public ClientSection() { }
        [System.Configuration.ConfigurationPropertyAttribute("", Options=System.Configuration.ConfigurationPropertyOptions.IsDefaultCollection)]
        public System.ServiceModel.Configuration.ChannelEndpointElementCollection Endpoints { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("metadata")]
        public System.ServiceModel.Configuration.MetadataElement Metadata { get { throw null; } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        protected override void InitializeDefault() { }
        protected override void PostDeserialize() { }
    }
    public sealed partial class ClientViaElement : System.ServiceModel.Configuration.BehaviorExtensionElement
    {
        public ClientViaElement() { }
        public override System.Type BehaviorType { get { throw null; } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("viaUri")]
        public System.Uri ViaUri { get { throw null; } set { } }
        public override void CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement from) { }
        protected internal override object CreateBehavior() { throw null; }
    }
    public sealed partial class ComContractElement : System.Configuration.ConfigurationElement
    {
        public ComContractElement() { }
        public ComContractElement(string contractType) { }
        [System.Configuration.ConfigurationPropertyAttribute("contract", Options=System.Configuration.ConfigurationPropertyOptions.IsKey | System.Configuration.ConfigurationPropertyOptions.IsRequired)]
        [System.Configuration.StringValidatorAttribute(MinLength=1)]
        public string Contract { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("exposedMethods", Options=System.Configuration.ConfigurationPropertyOptions.None)]
        public System.ServiceModel.Configuration.ComMethodElementCollection ExposedMethods { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("name", DefaultValue="", Options=System.Configuration.ConfigurationPropertyOptions.None)]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string Name { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("namespace", DefaultValue="", Options=System.Configuration.ConfigurationPropertyOptions.None)]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string Namespace { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("persistableTypes")]
        public System.ServiceModel.Configuration.ComPersistableTypeElementCollection PersistableTypes { get { throw null; } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("requiresSession", DefaultValue=true)]
        public bool RequiresSession { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("userDefinedTypes")]
        public System.ServiceModel.Configuration.ComUdtElementCollection UserDefinedTypes { get { throw null; } }
    }
    [System.Configuration.ConfigurationCollectionAttribute(typeof(System.ServiceModel.Configuration.ComContractElement), AddItemName="comContract")]
    public sealed partial class ComContractElementCollection : System.ServiceModel.Configuration.ServiceModelEnhancedConfigurationElementCollection<System.ServiceModel.Configuration.ComContractElement>
    {
        public ComContractElementCollection() { }
        protected override bool ThrowOnDuplicate { get { throw null; } }
        protected override object GetElementKey(System.Configuration.ConfigurationElement element) { throw null; }
    }
    public sealed partial class ComContractsSection : System.Configuration.ConfigurationSection
    {
        public ComContractsSection() { }
        [System.Configuration.ConfigurationPropertyAttribute("", Options=System.Configuration.ConfigurationPropertyOptions.IsDefaultCollection)]
        public System.ServiceModel.Configuration.ComContractElementCollection ComContracts { get { throw null; } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
    }
    public sealed partial class ComMethodElement : System.Configuration.ConfigurationElement
    {
        public ComMethodElement() { }
        public ComMethodElement(string method) { }
        [System.Configuration.ConfigurationPropertyAttribute("exposedMethod", Options=System.Configuration.ConfigurationPropertyOptions.IsKey | System.Configuration.ConfigurationPropertyOptions.IsRequired)]
        [System.Configuration.StringValidatorAttribute(MinLength=1)]
        public string ExposedMethod { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
    }
    [System.Configuration.ConfigurationCollectionAttribute(typeof(System.ServiceModel.Configuration.ComMethodElement))]
    public sealed partial class ComMethodElementCollection : System.ServiceModel.Configuration.ServiceModelEnhancedConfigurationElementCollection<System.ServiceModel.Configuration.ComMethodElement>
    {
        public ComMethodElementCollection() { }
        protected override bool ThrowOnDuplicate { get { throw null; } }
        protected override object GetElementKey(System.Configuration.ConfigurationElement element) { throw null; }
    }
    public partial class CommonBehaviorsSection : System.Configuration.ConfigurationSection
    {
        public CommonBehaviorsSection() { }
        [System.Configuration.ConfigurationPropertyAttribute("endpointBehaviors", Options=System.Configuration.ConfigurationPropertyOptions.None)]
        public System.ServiceModel.Configuration.CommonEndpointBehaviorElement EndpointBehaviors { get { throw null; } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("serviceBehaviors", Options=System.Configuration.ConfigurationPropertyOptions.None)]
        public System.ServiceModel.Configuration.CommonServiceBehaviorElement ServiceBehaviors { get { throw null; } }
    }
    public partial class CommonEndpointBehaviorElement : System.ServiceModel.Configuration.ServiceModelExtensionCollectionElement<System.ServiceModel.Configuration.BehaviorExtensionElement>
    {
        public CommonEndpointBehaviorElement() { }
        public override void Add(System.ServiceModel.Configuration.BehaviorExtensionElement element) { }
        public override bool CanAdd(System.ServiceModel.Configuration.BehaviorExtensionElement element) { throw null; }
    }
    public partial class CommonServiceBehaviorElement : System.ServiceModel.Configuration.ServiceModelExtensionCollectionElement<System.ServiceModel.Configuration.BehaviorExtensionElement>
    {
        public CommonServiceBehaviorElement() { }
        public override void Add(System.ServiceModel.Configuration.BehaviorExtensionElement element) { }
        public override bool CanAdd(System.ServiceModel.Configuration.BehaviorExtensionElement element) { throw null; }
    }
    public sealed partial class ComPersistableTypeElement : System.Configuration.ConfigurationElement
    {
        public ComPersistableTypeElement() { }
        public ComPersistableTypeElement(string ID) { }
        [System.Configuration.ConfigurationPropertyAttribute("ID", Options=System.Configuration.ConfigurationPropertyOptions.IsKey | System.Configuration.ConfigurationPropertyOptions.IsRequired)]
        [System.Configuration.StringValidatorAttribute(MinLength=1)]
        public string ID { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("name", DefaultValue="", Options=System.Configuration.ConfigurationPropertyOptions.None)]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string Name { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
    }
    [System.Configuration.ConfigurationCollectionAttribute(typeof(System.ServiceModel.Configuration.ComPersistableTypeElement), AddItemName="type")]
    public sealed partial class ComPersistableTypeElementCollection : System.ServiceModel.Configuration.ServiceModelEnhancedConfigurationElementCollection<System.ServiceModel.Configuration.ComPersistableTypeElement>
    {
        public ComPersistableTypeElementCollection() { }
        protected override bool ThrowOnDuplicate { get { throw null; } }
        protected override object GetElementKey(System.Configuration.ConfigurationElement element) { throw null; }
    }
    public sealed partial class CompositeDuplexElement : System.ServiceModel.Configuration.BindingElementExtensionElement
    {
        public CompositeDuplexElement() { }
        public override System.Type BindingElementType { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("clientBaseAddress", DefaultValue=null)]
        public System.Uri ClientBaseAddress { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        public override void ApplyConfiguration(System.ServiceModel.Channels.BindingElement bindingElement) { }
        public override void CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement from) { }
        protected internal override System.ServiceModel.Channels.BindingElement CreateBindingElement() { throw null; }
        protected internal override void InitializeFrom(System.ServiceModel.Channels.BindingElement bindingElement) { }
    }
    public sealed partial class ComUdtElement : System.Configuration.ConfigurationElement
    {
        public ComUdtElement() { }
        public ComUdtElement(string typeDefID) { }
        [System.Configuration.ConfigurationPropertyAttribute("name", DefaultValue="", Options=System.Configuration.ConfigurationPropertyOptions.None)]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string Name { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("typeDefID", Options=System.Configuration.ConfigurationPropertyOptions.IsKey | System.Configuration.ConfigurationPropertyOptions.IsRequired)]
        [System.Configuration.StringValidatorAttribute(MinLength=1)]
        public string TypeDefID { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("typeLibID", Options=System.Configuration.ConfigurationPropertyOptions.IsRequired)]
        [System.Configuration.StringValidatorAttribute(MinLength=1)]
        public string TypeLibID { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("typeLibVersion", Options=System.Configuration.ConfigurationPropertyOptions.IsRequired)]
        [System.Configuration.StringValidatorAttribute(MinLength=1)]
        public string TypeLibVersion { get { throw null; } set { } }
    }
    [System.Configuration.ConfigurationCollectionAttribute(typeof(System.ServiceModel.Configuration.ComUdtElement), AddItemName="userDefinedType")]
    public sealed partial class ComUdtElementCollection : System.ServiceModel.Configuration.ServiceModelEnhancedConfigurationElementCollection<System.ServiceModel.Configuration.ComUdtElement>
    {
        public ComUdtElementCollection() { }
        protected override bool ThrowOnDuplicate { get { throw null; } }
        protected override object GetElementKey(System.Configuration.ConfigurationElement element) { throw null; }
    }
    public sealed partial class ConfigurationChannelFactory<TChannel> : System.ServiceModel.ChannelFactory<TChannel>
    {
        public ConfigurationChannelFactory(string endpointConfigurationName, System.Configuration.Configuration configuration, System.ServiceModel.EndpointAddress remoteAddress) { }
    }
    public sealed partial class ConfigurationDuplexChannelFactory<TChannel> : System.ServiceModel.DuplexChannelFactory<TChannel>
    {
        public ConfigurationDuplexChannelFactory(object callbackObject, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress, System.Configuration.Configuration configuration) : base (default(System.Type)) { }
    }
    public abstract partial class ConnectionOrientedTransportElement : System.ServiceModel.Configuration.TransportElement
    {
        internal ConnectionOrientedTransportElement() { }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("channelInitializationTimeout", DefaultValue="00:00:30")]
        public System.TimeSpan ChannelInitializationTimeout { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("connectionBufferSize", DefaultValue=8192)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=1)]
        public int ConnectionBufferSize { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("hostNameComparisonMode", DefaultValue=System.ServiceModel.HostNameComparisonMode.StrongWildcard)]
        public System.ServiceModel.HostNameComparisonMode HostNameComparisonMode { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("maxBufferSize", DefaultValue=65536)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=1)]
        public int MaxBufferSize { get { throw null; } set { } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("maxOutputDelay", DefaultValue="00:00:00.2")]
        public System.TimeSpan MaxOutputDelay { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("maxPendingAccepts", DefaultValue=0)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=0)]
        public int MaxPendingAccepts { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("maxPendingConnections", DefaultValue=0)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=0)]
        public int MaxPendingConnections { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("transferMode", DefaultValue=System.ServiceModel.TransferMode.Buffered)]
        public System.ServiceModel.TransferMode TransferMode { get { throw null; } set { } }
        public override void ApplyConfiguration(System.ServiceModel.Channels.BindingElement bindingElement) { }
        public override void CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement from) { }
        protected internal override void InitializeFrom(System.ServiceModel.Channels.BindingElement bindingElement) { }
    }
    [System.Runtime.CompilerServices.TypeForwardedFromAttribute("System.WorkflowServices, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
    public partial class ContextBindingElementExtensionElement : System.ServiceModel.Configuration.BindingElementExtensionElement
    {
        public ContextBindingElementExtensionElement() { }
        public override System.Type BindingElementType { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("clientCallbackAddress", DefaultValue=null)]
        public System.Uri ClientCallbackAddress { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("contextExchangeMechanism", DefaultValue=System.ServiceModel.Channels.ContextExchangeMechanism.ContextSoapHeader)]
        public System.ServiceModel.Channels.ContextExchangeMechanism ContextExchangeMechanism { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("contextManagementEnabled", DefaultValue=true)]
        public bool ContextManagementEnabled { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("protectionLevel", DefaultValue=System.Net.Security.ProtectionLevel.Sign)]
        public System.Net.Security.ProtectionLevel ProtectionLevel { get { throw null; } set { } }
        protected internal override System.ServiceModel.Channels.BindingElement CreateBindingElement() { throw null; }
    }
    public sealed partial class CustomBindingCollectionElement : System.ServiceModel.Configuration.BindingCollectionElement
    {
        public CustomBindingCollectionElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("", Options=System.Configuration.ConfigurationPropertyOptions.IsDefaultCollection)]
        public System.ServiceModel.Configuration.CustomBindingElementCollection Bindings { get { throw null; } }
        public override System.Type BindingType { get { throw null; } }
        public override System.Collections.ObjectModel.ReadOnlyCollection<System.ServiceModel.Configuration.IBindingConfigurationElement> ConfiguredBindings { get { throw null; } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        public override bool ContainsKey(string name) { throw null; }
        protected internal override System.ServiceModel.Channels.Binding GetDefault() { throw null; }
        protected internal override bool TryAdd(string name, System.ServiceModel.Channels.Binding binding, System.Configuration.Configuration config) { throw null; }
    }
    public partial class CustomBindingElement : System.ServiceModel.Configuration.NamedServiceModelExtensionCollectionElement<System.ServiceModel.Configuration.BindingElementExtensionElement>, System.Collections.Generic.ICollection<System.ServiceModel.Configuration.BindingElementExtensionElement>, System.Collections.Generic.IEnumerable<System.ServiceModel.Configuration.BindingElementExtensionElement>, System.Collections.IEnumerable, System.ServiceModel.Configuration.IBindingConfigurationElement
    {
        public CustomBindingElement() { }
        public CustomBindingElement(string name) { }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("closeTimeout", DefaultValue="00:01:00")]
        public System.TimeSpan CloseTimeout { get { throw null; } set { } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("openTimeout", DefaultValue="00:01:00")]
        public System.TimeSpan OpenTimeout { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("receiveTimeout", DefaultValue="00:10:00")]
        public System.TimeSpan ReceiveTimeout { get { throw null; } set { } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("sendTimeout", DefaultValue="00:01:00")]
        public System.TimeSpan SendTimeout { get { throw null; } set { } }
        public override void Add(System.ServiceModel.Configuration.BindingElementExtensionElement element) { }
        public void ApplyConfiguration(System.ServiceModel.Channels.Binding binding) { }
        public override bool CanAdd(System.ServiceModel.Configuration.BindingElementExtensionElement element) { throw null; }
        protected void OnApplyConfiguration(System.ServiceModel.Channels.Binding binding) { }
    }
    [System.Configuration.ConfigurationCollectionAttribute(typeof(System.ServiceModel.Configuration.CustomBindingElement), AddItemName="binding")]
    public sealed partial class CustomBindingElementCollection : System.ServiceModel.Configuration.ServiceModelEnhancedConfigurationElementCollection<System.ServiceModel.Configuration.CustomBindingElement>
    {
        public CustomBindingElementCollection() { }
        protected override object GetElementKey(System.Configuration.ConfigurationElement element) { throw null; }
    }
    public sealed partial class DataContractSerializerElement : System.ServiceModel.Configuration.BehaviorExtensionElement
    {
        public DataContractSerializerElement() { }
        public override System.Type BehaviorType { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("ignoreExtensionDataObject", DefaultValue=false)]
        public bool IgnoreExtensionDataObject { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("maxItemsInObjectGraph", DefaultValue=2147483647)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=0)]
        public int MaxItemsInObjectGraph { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        public override void CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement from) { }
        protected internal override object CreateBehavior() { throw null; }
    }
    public sealed partial class DefaultPortElement : System.Configuration.ConfigurationElement
    {
        public DefaultPortElement() { }
        public DefaultPortElement(System.ServiceModel.Configuration.DefaultPortElement other) { }
        [System.Configuration.ConfigurationPropertyAttribute("port", DefaultValue=0, Options=System.Configuration.ConfigurationPropertyOptions.IsRequired)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=0, MaxValue=65535)]
        public int Port { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("scheme", Options=System.Configuration.ConfigurationPropertyOptions.IsKey | System.Configuration.ConfigurationPropertyOptions.IsRequired)]
        [System.Configuration.StringValidatorAttribute(MinLength=1)]
        public string Scheme { get { throw null; } set { } }
    }
    [System.Configuration.ConfigurationCollectionAttribute(typeof(System.ServiceModel.Configuration.DefaultPortElement), AddItemName="add")]
    public sealed partial class DefaultPortElementCollection : System.ServiceModel.Configuration.ServiceModelEnhancedConfigurationElementCollection<System.ServiceModel.Configuration.DefaultPortElement>
    {
        public DefaultPortElementCollection() { }
        protected override object GetElementKey(System.Configuration.ConfigurationElement element) { throw null; }
    }
    public sealed partial class DelegatingHandlerElement : System.Configuration.ConfigurationElement
    {
        public DelegatingHandlerElement() { }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("type", Options=System.Configuration.ConfigurationPropertyOptions.IsKey | System.Configuration.ConfigurationPropertyOptions.IsRequired)]
        [System.Configuration.StringValidatorAttribute(MinLength=1)]
        public string Type { get { throw null; } set { } }
    }
    [System.Configuration.ConfigurationCollectionAttribute(typeof(System.ServiceModel.Configuration.DelegatingHandlerElement), AddItemName="handler", CollectionType=System.Configuration.ConfigurationElementCollectionType.BasicMap)]
    public sealed partial class DelegatingHandlerElementCollection : System.ServiceModel.Configuration.ServiceModelConfigurationElementCollection<System.ServiceModel.Configuration.DelegatingHandlerElement>
    {
        public DelegatingHandlerElementCollection() { }
        protected override bool ThrowOnDuplicate { get { throw null; } }
        protected override object GetElementKey(System.Configuration.ConfigurationElement element) { throw null; }
    }
    public sealed partial class DiagnosticSection : System.Configuration.ConfigurationSection
    {
        public DiagnosticSection() { }
        [System.Configuration.ConfigurationPropertyAttribute("endToEndTracing", Options=System.Configuration.ConfigurationPropertyOptions.None)]
        public System.ServiceModel.Configuration.EndToEndTracingElement EndToEndTracing { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("etwProviderId", DefaultValue="{c651f5f6-1c0d-492e-8ae1-b4efd7c9d503}")]
        [System.Configuration.StringValidatorAttribute(MinLength=32)]
        public string EtwProviderId { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("messageLogging", Options=System.Configuration.ConfigurationPropertyOptions.None)]
        public System.ServiceModel.Configuration.MessageLoggingElement MessageLogging { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("performanceCounters", DefaultValue=System.ServiceModel.Diagnostics.PerformanceCounterScope.Default)]
        public System.ServiceModel.Diagnostics.PerformanceCounterScope PerformanceCounters { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("wmiProviderEnabled", DefaultValue=false)]
        public bool WmiProviderEnabled { get { throw null; } set { } }
    }
    public sealed partial class DispatcherSynchronizationElement : System.ServiceModel.Configuration.BehaviorExtensionElement
    {
        public DispatcherSynchronizationElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("asynchronousSendEnabled", DefaultValue=false)]
        public bool AsynchronousSendEnabled { get { throw null; } set { } }
        public override System.Type BehaviorType { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("maxPendingReceives", DefaultValue=1)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=1)]
        public int MaxPendingReceives { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        public override void CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement from) { }
        protected internal override object CreateBehavior() { throw null; }
    }
    public sealed partial class DnsElement : System.Configuration.ConfigurationElement
    {
        public DnsElement() { }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("value", DefaultValue="")]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string Value { get { throw null; } set { } }
    }
    public partial class EndpointAddressElementBase : System.ServiceModel.Configuration.ServiceModelConfigurationElement
    {
        protected EndpointAddressElementBase() { }
        [System.Configuration.ConfigurationPropertyAttribute("address", DefaultValue=null, Options=System.Configuration.ConfigurationPropertyOptions.IsRequired)]
        public System.Uri Address { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("headers")]
        public System.ServiceModel.Configuration.AddressHeaderCollectionElement Headers { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("identity")]
        public System.ServiceModel.Configuration.IdentityElement Identity { get { throw null; } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        protected internal void Copy(System.ServiceModel.Configuration.EndpointAddressElementBase source) { }
        public void InitializeFrom(System.ServiceModel.EndpointAddress endpointAddress) { }
    }
    public partial class EndpointBehaviorElement : System.ServiceModel.Configuration.NamedServiceModelExtensionCollectionElement<System.ServiceModel.Configuration.BehaviorExtensionElement>
    {
        public EndpointBehaviorElement() { }
        public EndpointBehaviorElement(string name) { }
        public override void Add(System.ServiceModel.Configuration.BehaviorExtensionElement element) { }
        public override bool CanAdd(System.ServiceModel.Configuration.BehaviorExtensionElement element) { throw null; }
    }
    [System.Configuration.ConfigurationCollectionAttribute(typeof(System.ServiceModel.Configuration.EndpointBehaviorElement), AddItemName="behavior")]
    public sealed partial class EndpointBehaviorElementCollection : System.ServiceModel.Configuration.ServiceModelEnhancedConfigurationElementCollection<System.ServiceModel.Configuration.EndpointBehaviorElement>
    {
        public EndpointBehaviorElementCollection() { }
        protected override bool ThrowOnDuplicate { get { throw null; } }
        protected override void BaseAdd(System.Configuration.ConfigurationElement element) { }
        protected override object GetElementKey(System.Configuration.ConfigurationElement element) { throw null; }
    }
    public abstract partial class EndpointCollectionElement : System.Configuration.ConfigurationElement
    {
        protected EndpointCollectionElement() { }
        public abstract System.Collections.ObjectModel.ReadOnlyCollection<System.ServiceModel.Configuration.StandardEndpointElement> ConfiguredEndpoints { get; }
        public string EndpointName { get { throw null; } }
        public abstract System.Type EndpointType { get; }
        public abstract bool ContainsKey(string name);
        protected internal abstract System.ServiceModel.Configuration.StandardEndpointElement GetDefaultStandardEndpointElement();
        protected internal abstract bool TryAdd(string name, System.ServiceModel.Description.ServiceEndpoint endpoint, System.Configuration.Configuration config);
    }
    public sealed partial class EndToEndTracingElement : System.Configuration.ConfigurationElement
    {
        public EndToEndTracingElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("activityTracing", DefaultValue=false)]
        public bool ActivityTracing { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("messageFlowTracing", DefaultValue=false)]
        public bool MessageFlowTracing { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("propagateActivity", DefaultValue=false)]
        public bool PropagateActivity { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
    }
    public partial class ExtensionElement : System.Configuration.ConfigurationElement
    {
        public ExtensionElement() { }
        public ExtensionElement(string name) { }
        public ExtensionElement(string name, string type) { }
        [System.Configuration.ConfigurationPropertyAttribute("name", Options=System.Configuration.ConfigurationPropertyOptions.IsKey | System.Configuration.ConfigurationPropertyOptions.IsRequired)]
        [System.Configuration.StringValidatorAttribute(MinLength=1)]
        public string Name { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("type", Options=System.Configuration.ConfigurationPropertyOptions.IsRequired)]
        [System.Configuration.StringValidatorAttribute(MinLength=1)]
        public string Type { get { throw null; } set { } }
    }
    [System.Configuration.ConfigurationCollectionAttribute(typeof(System.ServiceModel.Configuration.ExtensionElement), CollectionType=System.Configuration.ConfigurationElementCollectionType.BasicMap)]
    public partial class ExtensionElementCollection : System.ServiceModel.Configuration.ServiceModelConfigurationElementCollection<System.ServiceModel.Configuration.ExtensionElement>
    {
        public ExtensionElementCollection() { }
        protected override bool ThrowOnDuplicate { get { throw null; } }
        protected override void BaseAdd(System.Configuration.ConfigurationElement element) { }
        protected override void BaseAdd(int index, System.Configuration.ConfigurationElement element) { }
        protected override object GetElementKey(System.Configuration.ConfigurationElement element) { throw null; }
    }
    public partial class ExtensionsSection : System.Configuration.ConfigurationSection
    {
        public ExtensionsSection() { }
        [System.Configuration.ConfigurationPropertyAttribute("behaviorExtensions")]
        public System.ServiceModel.Configuration.ExtensionElementCollection BehaviorExtensions { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("bindingElementExtensions")]
        public System.ServiceModel.Configuration.ExtensionElementCollection BindingElementExtensions { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("bindingExtensions")]
        public System.ServiceModel.Configuration.ExtensionElementCollection BindingExtensions { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("endpointExtensions")]
        public System.ServiceModel.Configuration.ExtensionElementCollection EndpointExtensions { get { throw null; } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        protected override void InitializeDefault() { }
    }
    public sealed partial class FederatedMessageSecurityOverHttpElement : System.ServiceModel.Configuration.ServiceModelConfigurationElement
    {
        public FederatedMessageSecurityOverHttpElement() { }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.SecurityAlgorithmSuiteConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("algorithmSuite", DefaultValue="Default")]
        public System.ServiceModel.Security.SecurityAlgorithmSuite AlgorithmSuite { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("claimTypeRequirements")]
        public System.ServiceModel.Configuration.ClaimTypeElementCollection ClaimTypeRequirements { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("establishSecurityContext", DefaultValue=true)]
        public bool EstablishSecurityContext { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("issuedKeyType", DefaultValue=System.IdentityModel.Tokens.SecurityKeyType.SymmetricKey)]
        public System.IdentityModel.Tokens.SecurityKeyType IssuedKeyType { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("issuedTokenType", DefaultValue="")]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string IssuedTokenType { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("issuer")]
        public System.ServiceModel.Configuration.IssuedTokenParametersEndpointAddressElement Issuer { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("issuerMetadata")]
        public System.ServiceModel.Configuration.EndpointAddressElementBase IssuerMetadata { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("negotiateServiceCredential", DefaultValue=true)]
        public bool NegotiateServiceCredential { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("tokenRequestParameters")]
        public System.ServiceModel.Configuration.XmlElementElementCollection TokenRequestParameters { get { throw null; } }
    }
    public sealed partial class HostElement : System.Configuration.ConfigurationElement
    {
        public HostElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("baseAddresses", Options=System.Configuration.ConfigurationPropertyOptions.None)]
        public System.ServiceModel.Configuration.BaseAddressElementCollection BaseAddresses { get { throw null; } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("timeouts", Options=System.Configuration.ConfigurationPropertyOptions.None)]
        public System.ServiceModel.Configuration.HostTimeoutsElement Timeouts { get { throw null; } }
    }
    public sealed partial class HostTimeoutsElement : System.Configuration.ConfigurationElement
    {
        public HostTimeoutsElement() { }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("closeTimeout", DefaultValue="00:00:10")]
        public System.TimeSpan CloseTimeout { get { throw null; } set { } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("openTimeout", DefaultValue="00:01:00")]
        public System.TimeSpan OpenTimeout { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
    }
    public abstract partial class HttpBindingBaseElement : System.ServiceModel.Configuration.StandardBindingElement
    {
        protected HttpBindingBaseElement(string name) { }
        [System.Configuration.ConfigurationPropertyAttribute("allowCookies", DefaultValue=false)]
        public bool AllowCookies { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("bypassProxyOnLocal", DefaultValue=false)]
        public bool BypassProxyOnLocal { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("hostNameComparisonMode", DefaultValue=System.ServiceModel.HostNameComparisonMode.StrongWildcard)]
        public System.ServiceModel.HostNameComparisonMode HostNameComparisonMode { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("maxBufferPoolSize", DefaultValue=(long)524288)]
        [System.Configuration.LongValidatorAttribute(MinValue=(long)0)]
        public long MaxBufferPoolSize { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("maxBufferSize", DefaultValue=65536)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=1)]
        public int MaxBufferSize { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("maxReceivedMessageSize", DefaultValue=(long)65536)]
        [System.Configuration.LongValidatorAttribute(MinValue=(long)1)]
        public long MaxReceivedMessageSize { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("proxyAddress", DefaultValue=null)]
        public System.Uri ProxyAddress { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("readerQuotas")]
        public System.ServiceModel.Configuration.XmlDictionaryReaderQuotasElement ReaderQuotas { get { throw null; } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.EncodingConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("textEncoding", DefaultValue="utf-8")]
        public System.Text.Encoding TextEncoding { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("transferMode", DefaultValue=System.ServiceModel.TransferMode.Buffered)]
        public System.ServiceModel.TransferMode TransferMode { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("useDefaultWebProxy", DefaultValue=true)]
        public bool UseDefaultWebProxy { get { throw null; } set { } }
        protected internal override void InitializeFrom(System.ServiceModel.Channels.Binding binding) { }
        protected override void OnApplyConfiguration(System.ServiceModel.Channels.Binding binding) { }
    }
    public sealed partial class HttpDigestClientElement : System.Configuration.ConfigurationElement
    {
        public HttpDigestClientElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("impersonationLevel", DefaultValue=System.Security.Principal.TokenImpersonationLevel.Identification)]
        public System.Security.Principal.TokenImpersonationLevel ImpersonationLevel { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        public void Copy(System.ServiceModel.Configuration.HttpDigestClientElement from) { }
    }
    public sealed partial class HttpMessageHandlerFactoryElement : System.Configuration.ConfigurationElement
    {
        public HttpMessageHandlerFactoryElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("handlers")]
        public System.ServiceModel.Configuration.DelegatingHandlerElementCollection Handlers { get { throw null; } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("type")]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string Type { get { throw null; } set { } }
    }
    public partial class HttpsTransportElement : System.ServiceModel.Configuration.HttpTransportElement
    {
        public HttpsTransportElement() { }
        public override System.Type BindingElementType { get { throw null; } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("requireClientCertificate", DefaultValue=false)]
        public bool RequireClientCertificate { get { throw null; } set { } }
        public override void ApplyConfiguration(System.ServiceModel.Channels.BindingElement bindingElement) { }
        public override void CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement from) { }
        protected override System.ServiceModel.Channels.TransportBindingElement CreateDefaultBindingElement() { throw null; }
        protected internal override void InitializeFrom(System.ServiceModel.Channels.BindingElement bindingElement) { }
    }
    public partial class HttpTransportElement : System.ServiceModel.Configuration.TransportElement
    {
        public HttpTransportElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("allowCookies", DefaultValue=false)]
        public bool AllowCookies { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("authenticationScheme", DefaultValue=System.Net.AuthenticationSchemes.Anonymous)]
        public System.Net.AuthenticationSchemes AuthenticationScheme { get { throw null; } set { } }
        public override System.Type BindingElementType { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("bypassProxyOnLocal", DefaultValue=false)]
        public bool BypassProxyOnLocal { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("decompressionEnabled", DefaultValue=true)]
        public bool DecompressionEnabled { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("extendedProtectionPolicy")]
        public System.Security.Authentication.ExtendedProtection.Configuration.ExtendedProtectionPolicyElement ExtendedProtectionPolicy { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("hostNameComparisonMode", DefaultValue=System.ServiceModel.HostNameComparisonMode.StrongWildcard)]
        public System.ServiceModel.HostNameComparisonMode HostNameComparisonMode { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("keepAliveEnabled", DefaultValue=true)]
        public bool KeepAliveEnabled { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("maxBufferSize", DefaultValue=65536)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=1)]
        public int MaxBufferSize { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("maxPendingAccepts", DefaultValue=0)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=0, MaxValue=100000)]
        public int MaxPendingAccepts { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("messageHandlerFactory", DefaultValue=null)]
        public System.ServiceModel.Configuration.HttpMessageHandlerFactoryElement MessageHandlerFactory { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("proxyAddress", DefaultValue=null)]
        public System.Uri ProxyAddress { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("proxyAuthenticationScheme", DefaultValue=System.Net.AuthenticationSchemes.Anonymous)]
        public System.Net.AuthenticationSchemes ProxyAuthenticationScheme { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("realm", DefaultValue="")]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string Realm { get { throw null; } set { } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("requestInitializationTimeout", DefaultValue="00:00:00")]
        public System.TimeSpan RequestInitializationTimeout { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("transferMode", DefaultValue=System.ServiceModel.TransferMode.Buffered)]
        public System.ServiceModel.TransferMode TransferMode { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("unsafeConnectionNtlmAuthentication", DefaultValue=false)]
        public bool UnsafeConnectionNtlmAuthentication { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("useDefaultWebProxy", DefaultValue=true)]
        public bool UseDefaultWebProxy { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("webSocketSettings")]
        public System.ServiceModel.Configuration.WebSocketTransportSettingsElement WebSocketSettings { get { throw null; } set { } }
        public override void ApplyConfiguration(System.ServiceModel.Channels.BindingElement bindingElement) { }
        public override void CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement from) { }
        protected override System.ServiceModel.Channels.TransportBindingElement CreateDefaultBindingElement() { throw null; }
        protected internal override void InitializeFrom(System.ServiceModel.Channels.BindingElement bindingElement) { }
    }
    public sealed partial class HttpTransportSecurityElement : System.ServiceModel.Configuration.ServiceModelConfigurationElement
    {
        public HttpTransportSecurityElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("clientCredentialType", DefaultValue=System.ServiceModel.HttpClientCredentialType.None)]
        public System.ServiceModel.HttpClientCredentialType ClientCredentialType { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("extendedProtectionPolicy")]
        public System.Security.Authentication.ExtendedProtection.Configuration.ExtendedProtectionPolicyElement ExtendedProtectionPolicy { get { throw null; } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("proxyCredentialType", DefaultValue=System.ServiceModel.HttpProxyCredentialType.None)]
        public System.ServiceModel.HttpProxyCredentialType ProxyCredentialType { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("realm", DefaultValue="")]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string Realm { get { throw null; } set { } }
    }
    public partial interface IBindingConfigurationElement
    {
        System.TimeSpan CloseTimeout { get; }
        string Name { get; }
        System.TimeSpan OpenTimeout { get; }
        System.TimeSpan ReceiveTimeout { get; }
        System.TimeSpan SendTimeout { get; }
        void ApplyConfiguration(System.ServiceModel.Channels.Binding binding);
    }
    public sealed partial class IdentityElement : System.Configuration.ConfigurationElement
    {
        public IdentityElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("certificate")]
        public System.ServiceModel.Configuration.CertificateElement Certificate { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("certificateReference")]
        public System.ServiceModel.Configuration.CertificateReferenceElement CertificateReference { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("dns")]
        public System.ServiceModel.Configuration.DnsElement Dns { get { throw null; } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("rsa")]
        public System.ServiceModel.Configuration.RsaElement Rsa { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("servicePrincipalName")]
        public System.ServiceModel.Configuration.ServicePrincipalNameElement ServicePrincipalName { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("userPrincipalName")]
        public System.ServiceModel.Configuration.UserPrincipalNameElement UserPrincipalName { get { throw null; } }
        public void InitializeFrom(System.ServiceModel.EndpointIdentity identity) { }
    }
    public sealed partial class IssuedTokenClientBehaviorsElement : System.Configuration.ConfigurationElement
    {
        public IssuedTokenClientBehaviorsElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("behaviorConfiguration", DefaultValue="")]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string BehaviorConfiguration { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("issuerAddress", DefaultValue="", Options=System.Configuration.ConfigurationPropertyOptions.IsKey | System.Configuration.ConfigurationPropertyOptions.IsRequired)]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string IssuerAddress { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
    }
    [System.Configuration.ConfigurationCollectionAttribute(typeof(System.ServiceModel.Configuration.IssuedTokenClientBehaviorsElement))]
    public sealed partial class IssuedTokenClientBehaviorsElementCollection : System.ServiceModel.Configuration.ServiceModelConfigurationElementCollection<System.ServiceModel.Configuration.IssuedTokenClientBehaviorsElement>
    {
        public IssuedTokenClientBehaviorsElementCollection() { }
        protected override object GetElementKey(System.Configuration.ConfigurationElement element) { throw null; }
    }
    public sealed partial class IssuedTokenClientElement : System.Configuration.ConfigurationElement
    {
        public IssuedTokenClientElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("cacheIssuedTokens", DefaultValue=true)]
        public bool CacheIssuedTokens { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("defaultKeyEntropyMode", DefaultValue=System.ServiceModel.Security.SecurityKeyEntropyMode.CombinedEntropy)]
        public System.ServiceModel.Security.SecurityKeyEntropyMode DefaultKeyEntropyMode { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("issuedTokenRenewalThresholdPercentage", DefaultValue=60)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=0, MaxValue=100)]
        public int IssuedTokenRenewalThresholdPercentage { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("issuerChannelBehaviors")]
        public System.ServiceModel.Configuration.IssuedTokenClientBehaviorsElementCollection IssuerChannelBehaviors { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("localIssuer")]
        public System.ServiceModel.Configuration.IssuedTokenParametersEndpointAddressElement LocalIssuer { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("localIssuerChannelBehaviors", DefaultValue="")]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string LocalIssuerChannelBehaviors { get { throw null; } set { } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("maxIssuedTokenCachingTime", DefaultValue="10675199.02:48:05.4775807")]
        public System.TimeSpan MaxIssuedTokenCachingTime { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        public void Copy(System.ServiceModel.Configuration.IssuedTokenClientElement from) { }
    }
    public sealed partial class IssuedTokenParametersElement : System.ServiceModel.Configuration.ServiceModelConfigurationElement
    {
        public IssuedTokenParametersElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("additionalRequestParameters")]
        public System.ServiceModel.Configuration.XmlElementElementCollection AdditionalRequestParameters { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("claimTypeRequirements")]
        public System.ServiceModel.Configuration.ClaimTypeElementCollection ClaimTypeRequirements { get { throw null; } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.MessageSecurityVersionConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("defaultMessageSecurityVersion")]
        public System.ServiceModel.MessageSecurityVersion DefaultMessageSecurityVersion { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("issuer")]
        public System.ServiceModel.Configuration.IssuedTokenParametersEndpointAddressElement Issuer { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("issuerMetadata")]
        public System.ServiceModel.Configuration.EndpointAddressElementBase IssuerMetadata { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("keySize", DefaultValue=0)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=0)]
        public int KeySize { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("keyType", DefaultValue=System.IdentityModel.Tokens.SecurityKeyType.SymmetricKey)]
        public System.IdentityModel.Tokens.SecurityKeyType KeyType { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("tokenType", DefaultValue="")]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string TokenType { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("useStrTransform", DefaultValue=false)]
        public bool UseStrTransform { get { throw null; } set { } }
        protected override bool SerializeToXmlElement(System.Xml.XmlWriter writer, string elementName) { throw null; }
        protected override void Unmerge(System.Configuration.ConfigurationElement sourceElement, System.Configuration.ConfigurationElement parentElement, System.Configuration.ConfigurationSaveMode saveMode) { }
    }
    public sealed partial class IssuedTokenParametersEndpointAddressElement : System.ServiceModel.Configuration.EndpointAddressElementBase
    {
        public IssuedTokenParametersEndpointAddressElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("binding", DefaultValue="")]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string Binding { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("bindingConfiguration", DefaultValue="")]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string BindingConfiguration { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
    }
    public sealed partial class IssuedTokenServiceElement : System.Configuration.ConfigurationElement
    {
        public IssuedTokenServiceElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("allowedAudienceUris")]
        public System.ServiceModel.Configuration.AllowedAudienceUriElementCollection AllowedAudienceUris { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("allowUntrustedRsaIssuers", DefaultValue=false)]
        public bool AllowUntrustedRsaIssuers { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("audienceUriMode", DefaultValue=System.IdentityModel.Selectors.AudienceUriMode.Always)]
        public System.IdentityModel.Selectors.AudienceUriMode AudienceUriMode { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("certificateValidationMode", DefaultValue=System.ServiceModel.Security.X509CertificateValidationMode.ChainTrust)]
        public System.ServiceModel.Security.X509CertificateValidationMode CertificateValidationMode { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("customCertificateValidatorType", DefaultValue="")]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string CustomCertificateValidatorType { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("knownCertificates")]
        public System.ServiceModel.Configuration.X509CertificateTrustedIssuerElementCollection KnownCertificates { get { throw null; } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("revocationMode", DefaultValue=System.Security.Cryptography.X509Certificates.X509RevocationMode.Online)]
        public System.Security.Cryptography.X509Certificates.X509RevocationMode RevocationMode { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("samlSerializerType", DefaultValue="")]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string SamlSerializerType { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("trustedStoreLocation", DefaultValue=System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine)]
        public System.Security.Cryptography.X509Certificates.StoreLocation TrustedStoreLocation { get { throw null; } set { } }
        public void Copy(System.ServiceModel.Configuration.IssuedTokenServiceElement from) { }
    }
    public sealed partial class LocalClientSecuritySettingsElement : System.ServiceModel.Configuration.ServiceModelConfigurationElement
    {
        public LocalClientSecuritySettingsElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("cacheCookies", DefaultValue=true)]
        public bool CacheCookies { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("cookieRenewalThresholdPercentage", DefaultValue=60)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=0, MaxValue=100)]
        public int CookieRenewalThresholdPercentage { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("detectReplays", DefaultValue=true)]
        public bool DetectReplays { get { throw null; } set { } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("maxClockSkew", DefaultValue="00:05:00")]
        public System.TimeSpan MaxClockSkew { get { throw null; } set { } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("maxCookieCachingTime", DefaultValue="10675199.02:48:05.4775807")]
        public System.TimeSpan MaxCookieCachingTime { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("reconnectTransportOnFailure", DefaultValue=true)]
        public bool ReconnectTransportOnFailure { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("replayCacheSize", DefaultValue=900000)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=1)]
        public int ReplayCacheSize { get { throw null; } set { } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("replayWindow", DefaultValue="00:05:00")]
        public System.TimeSpan ReplayWindow { get { throw null; } set { } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("sessionKeyRenewalInterval", DefaultValue="10:00:00")]
        public System.TimeSpan SessionKeyRenewalInterval { get { throw null; } set { } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("sessionKeyRolloverInterval", DefaultValue="00:05:00")]
        public System.TimeSpan SessionKeyRolloverInterval { get { throw null; } set { } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("timestampValidityDuration", DefaultValue="00:05:00")]
        public System.TimeSpan TimestampValidityDuration { get { throw null; } set { } }
    }
    public sealed partial class LocalServiceSecuritySettingsElement : System.ServiceModel.Configuration.ServiceModelConfigurationElement
    {
        public LocalServiceSecuritySettingsElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("detectReplays", DefaultValue=true)]
        public bool DetectReplays { get { throw null; } set { } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("inactivityTimeout", DefaultValue="00:02:00")]
        public System.TimeSpan InactivityTimeout { get { throw null; } set { } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("issuedCookieLifetime", DefaultValue="10:00:00")]
        public System.TimeSpan IssuedCookieLifetime { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("maxCachedCookies", DefaultValue=1000)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=0)]
        public int MaxCachedCookies { get { throw null; } set { } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("maxClockSkew", DefaultValue="00:05:00")]
        public System.TimeSpan MaxClockSkew { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("maxPendingSessions", DefaultValue=128)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=1)]
        public int MaxPendingSessions { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("maxStatefulNegotiations", DefaultValue=128)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=0)]
        public int MaxStatefulNegotiations { get { throw null; } set { } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("negotiationTimeout", DefaultValue="00:01:00")]
        public System.TimeSpan NegotiationTimeout { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("reconnectTransportOnFailure", DefaultValue=true)]
        public bool ReconnectTransportOnFailure { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("replayCacheSize", DefaultValue=900000)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=1)]
        public int ReplayCacheSize { get { throw null; } set { } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("replayWindow", DefaultValue="00:05:00")]
        public System.TimeSpan ReplayWindow { get { throw null; } set { } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("sessionKeyRenewalInterval", DefaultValue="15:00:00")]
        public System.TimeSpan SessionKeyRenewalInterval { get { throw null; } set { } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("sessionKeyRolloverInterval", DefaultValue="00:05:00")]
        public System.TimeSpan SessionKeyRolloverInterval { get { throw null; } set { } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("timestampValidityDuration", DefaultValue="00:05:00")]
        public System.TimeSpan TimestampValidityDuration { get { throw null; } set { } }
    }
    public sealed partial class MessageLoggingElement : System.Configuration.ConfigurationElement
    {
        public MessageLoggingElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("filters", DefaultValue=null)]
        public System.ServiceModel.Configuration.XPathMessageFilterElementCollection Filters { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("logEntireMessage", DefaultValue=false)]
        public bool LogEntireMessage { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("logKnownPii", DefaultValue=false)]
        public bool LogKnownPii { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("logMalformedMessages", DefaultValue=false)]
        public bool LogMalformedMessages { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("logMessagesAtServiceLevel", DefaultValue=false)]
        public bool LogMessagesAtServiceLevel { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("logMessagesAtTransportLevel", DefaultValue=false)]
        public bool LogMessagesAtTransportLevel { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("maxMessagesToLog", DefaultValue=10000)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=-1)]
        public int MaxMessagesToLog { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("maxSizeOfMessageToLog", DefaultValue=262144)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=-1)]
        public int MaxSizeOfMessageToLog { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
    }
    public partial class MessageSecurityOverHttpElement : System.ServiceModel.Configuration.ServiceModelConfigurationElement
    {
        internal MessageSecurityOverHttpElement() { }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.SecurityAlgorithmSuiteConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("algorithmSuite", DefaultValue="Default")]
        public System.ServiceModel.Security.SecurityAlgorithmSuite AlgorithmSuite { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("clientCredentialType", DefaultValue=System.ServiceModel.MessageCredentialType.Windows)]
        public System.ServiceModel.MessageCredentialType ClientCredentialType { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("negotiateServiceCredential", DefaultValue=true)]
        public bool NegotiateServiceCredential { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
    }
    public sealed partial class MessageSecurityOverMsmqElement : System.ServiceModel.Configuration.ServiceModelConfigurationElement
    {
        public MessageSecurityOverMsmqElement() { }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.SecurityAlgorithmSuiteConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("algorithmSuite", DefaultValue="Default")]
        public System.ServiceModel.Security.SecurityAlgorithmSuite AlgorithmSuite { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("clientCredentialType", DefaultValue=System.ServiceModel.MessageCredentialType.Windows)]
        public System.ServiceModel.MessageCredentialType ClientCredentialType { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
    }
    public sealed partial class MessageSecurityOverTcpElement : System.ServiceModel.Configuration.ServiceModelConfigurationElement
    {
        public MessageSecurityOverTcpElement() { }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.SecurityAlgorithmSuiteConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("algorithmSuite", DefaultValue="Default")]
        public System.ServiceModel.Security.SecurityAlgorithmSuite AlgorithmSuite { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("clientCredentialType", DefaultValue=System.ServiceModel.MessageCredentialType.Windows)]
        public System.ServiceModel.MessageCredentialType ClientCredentialType { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
    }
    public sealed partial class MetadataElement : System.Configuration.ConfigurationElement
    {
        public MetadataElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("policyImporters")]
        public System.ServiceModel.Configuration.PolicyImporterElementCollection PolicyImporters { get { throw null; } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("wsdlImporters")]
        public System.ServiceModel.Configuration.WsdlImporterElementCollection WsdlImporters { get { throw null; } }
        public System.Collections.ObjectModel.Collection<System.ServiceModel.Description.IPolicyImportExtension> LoadPolicyImportExtensions() { throw null; }
        public System.Collections.ObjectModel.Collection<System.ServiceModel.Description.IWsdlImportExtension> LoadWsdlImportExtensions() { throw null; }
    }
    public abstract partial class MexBindingBindingCollectionElement<TStandardBinding, TBindingConfiguration> : System.ServiceModel.Configuration.StandardBindingCollectionElement<TStandardBinding, TBindingConfiguration> where TStandardBinding : System.ServiceModel.Channels.Binding where TBindingConfiguration : System.ServiceModel.Configuration.StandardBindingElement, new()
    {
        protected MexBindingBindingCollectionElement() { }
        protected internal override bool TryAdd(string name, System.ServiceModel.Channels.Binding binding, System.Configuration.Configuration config) { throw null; }
    }
    public abstract partial class MexBindingElement<TStandardBinding> : System.ServiceModel.Configuration.StandardBindingElement where TStandardBinding : System.ServiceModel.Channels.Binding
    {
        protected MexBindingElement(string name) { }
        protected override System.Type BindingElementType { get { throw null; } }
        protected override void OnApplyConfiguration(System.ServiceModel.Channels.Binding binding) { }
    }
    public partial class MexHttpBindingCollectionElement : System.ServiceModel.Configuration.MexBindingBindingCollectionElement<System.ServiceModel.WSHttpBinding, System.ServiceModel.Configuration.MexHttpBindingElement>
    {
        public MexHttpBindingCollectionElement() { }
        protected internal override System.ServiceModel.Channels.Binding GetDefault() { throw null; }
    }
    public partial class MexHttpBindingElement : System.ServiceModel.Configuration.MexBindingElement<System.ServiceModel.WSHttpBinding>
    {
        public MexHttpBindingElement() : base (default(string)) { }
        public MexHttpBindingElement(string name) : base (default(string)) { }
    }
    public partial class MexHttpsBindingCollectionElement : System.ServiceModel.Configuration.MexBindingBindingCollectionElement<System.ServiceModel.WSHttpBinding, System.ServiceModel.Configuration.MexHttpsBindingElement>
    {
        public MexHttpsBindingCollectionElement() { }
        protected internal override System.ServiceModel.Channels.Binding GetDefault() { throw null; }
    }
    public partial class MexHttpsBindingElement : System.ServiceModel.Configuration.MexBindingElement<System.ServiceModel.WSHttpBinding>
    {
        public MexHttpsBindingElement() : base (default(string)) { }
        public MexHttpsBindingElement(string name) : base (default(string)) { }
    }
    public partial class MexNamedPipeBindingCollectionElement : System.ServiceModel.Configuration.MexBindingBindingCollectionElement<System.ServiceModel.Channels.CustomBinding, System.ServiceModel.Configuration.MexNamedPipeBindingElement>
    {
        public MexNamedPipeBindingCollectionElement() { }
        protected internal override System.ServiceModel.Channels.Binding GetDefault() { throw null; }
    }
    public partial class MexNamedPipeBindingElement : System.ServiceModel.Configuration.MexBindingElement<System.ServiceModel.Channels.CustomBinding>
    {
        public MexNamedPipeBindingElement() : base (default(string)) { }
        public MexNamedPipeBindingElement(string name) : base (default(string)) { }
    }
    public partial class MexTcpBindingCollectionElement : System.ServiceModel.Configuration.MexBindingBindingCollectionElement<System.ServiceModel.Channels.CustomBinding, System.ServiceModel.Configuration.MexTcpBindingElement>
    {
        public MexTcpBindingCollectionElement() { }
        protected internal override System.ServiceModel.Channels.Binding GetDefault() { throw null; }
    }
    public partial class MexTcpBindingElement : System.ServiceModel.Configuration.MexBindingElement<System.ServiceModel.Channels.CustomBinding>
    {
        public MexTcpBindingElement() : base (default(string)) { }
        public MexTcpBindingElement(string name) : base (default(string)) { }
    }
    public abstract partial class MsmqBindingElementBase : System.ServiceModel.Configuration.StandardBindingElement
    {
        protected MsmqBindingElementBase() { }
        protected MsmqBindingElementBase(string name) { }
        [System.Configuration.ConfigurationPropertyAttribute("customDeadLetterQueue", DefaultValue=null)]
        public System.Uri CustomDeadLetterQueue { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("deadLetterQueue", DefaultValue=System.ServiceModel.DeadLetterQueue.System)]
        public System.ServiceModel.DeadLetterQueue DeadLetterQueue { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("durable", DefaultValue=true)]
        public bool Durable { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("exactlyOnce", DefaultValue=true)]
        public bool ExactlyOnce { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("maxReceivedMessageSize", DefaultValue=(long)65536)]
        [System.Configuration.LongValidatorAttribute(MinValue=(long)0)]
        public long MaxReceivedMessageSize { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("maxRetryCycles", DefaultValue=2)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=0)]
        public int MaxRetryCycles { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("receiveContextEnabled", DefaultValue=true)]
        public bool ReceiveContextEnabled { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("receiveErrorHandling", DefaultValue=System.ServiceModel.ReceiveErrorHandling.Fault)]
        public System.ServiceModel.ReceiveErrorHandling ReceiveErrorHandling { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("receiveRetryCount", DefaultValue=5)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=0)]
        public int ReceiveRetryCount { get { throw null; } set { } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("retryCycleDelay", DefaultValue="00:30:00")]
        public System.TimeSpan RetryCycleDelay { get { throw null; } set { } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("timeToLive", DefaultValue="1.00:00:00")]
        public System.TimeSpan TimeToLive { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("useMsmqTracing", DefaultValue=false)]
        public bool UseMsmqTracing { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("useSourceJournal", DefaultValue=false)]
        public bool UseSourceJournal { get { throw null; } set { } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("validityDuration", DefaultValue="00:05:00")]
        public System.TimeSpan ValidityDuration { get { throw null; } set { } }
        protected internal override void InitializeFrom(System.ServiceModel.Channels.Binding binding) { }
        protected override void OnApplyConfiguration(System.ServiceModel.Channels.Binding binding) { }
    }
    public abstract partial class MsmqElementBase : System.ServiceModel.Configuration.TransportElement
    {
        protected MsmqElementBase() { }
        [System.Configuration.ConfigurationPropertyAttribute("customDeadLetterQueue", DefaultValue=null)]
        public System.Uri CustomDeadLetterQueue { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("deadLetterQueue", DefaultValue=System.ServiceModel.DeadLetterQueue.System)]
        public System.ServiceModel.DeadLetterQueue DeadLetterQueue { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("durable", DefaultValue=true)]
        public bool Durable { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("exactlyOnce", DefaultValue=true)]
        public bool ExactlyOnce { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("maxRetryCycles", DefaultValue=2)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=0)]
        public int MaxRetryCycles { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("msmqTransportSecurity")]
        public System.ServiceModel.Configuration.MsmqTransportSecurityElement MsmqTransportSecurity { get { throw null; } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("receiveContextEnabled", DefaultValue=true)]
        public bool ReceiveContextEnabled { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("receiveErrorHandling", DefaultValue=System.ServiceModel.ReceiveErrorHandling.Fault)]
        public System.ServiceModel.ReceiveErrorHandling ReceiveErrorHandling { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("receiveRetryCount", DefaultValue=5)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=0)]
        public int ReceiveRetryCount { get { throw null; } set { } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("retryCycleDelay", DefaultValue="00:30:00")]
        public System.TimeSpan RetryCycleDelay { get { throw null; } set { } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("timeToLive", DefaultValue="1.00:00:00")]
        public System.TimeSpan TimeToLive { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("useMsmqTracing", DefaultValue=false)]
        public bool UseMsmqTracing { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("useSourceJournal", DefaultValue=false)]
        public bool UseSourceJournal { get { throw null; } set { } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("validityDuration", DefaultValue="00:05:00")]
        public System.TimeSpan ValidityDuration { get { throw null; } set { } }
        public override void ApplyConfiguration(System.ServiceModel.Channels.BindingElement bindingElement) { }
        public override void CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement from) { }
        protected internal override void InitializeFrom(System.ServiceModel.Channels.BindingElement bindingElement) { }
    }
    public partial class MsmqIntegrationBindingCollectionElement : System.ServiceModel.Configuration.StandardBindingCollectionElement<System.ServiceModel.MsmqIntegration.MsmqIntegrationBinding, System.ServiceModel.Configuration.MsmqIntegrationBindingElement>
    {
        public MsmqIntegrationBindingCollectionElement() { }
    }
    public partial class MsmqIntegrationBindingElement : System.ServiceModel.Configuration.MsmqBindingElementBase
    {
        public MsmqIntegrationBindingElement() { }
        public MsmqIntegrationBindingElement(string name) { }
        protected override System.Type BindingElementType { get { throw null; } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("security")]
        public System.ServiceModel.Configuration.MsmqIntegrationSecurityElement Security { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("serializationFormat", DefaultValue=System.ServiceModel.MsmqIntegration.MsmqMessageSerializationFormat.Xml)]
        public System.ServiceModel.MsmqIntegration.MsmqMessageSerializationFormat SerializationFormat { get { throw null; } set { } }
        protected internal override void InitializeFrom(System.ServiceModel.Channels.Binding binding) { }
        protected override void OnApplyConfiguration(System.ServiceModel.Channels.Binding binding) { }
    }
    public sealed partial class MsmqIntegrationElement : System.ServiceModel.Configuration.MsmqElementBase
    {
        public MsmqIntegrationElement() { }
        public override System.Type BindingElementType { get { throw null; } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("serializationFormat", DefaultValue=System.ServiceModel.MsmqIntegration.MsmqMessageSerializationFormat.Xml)]
        public System.ServiceModel.MsmqIntegration.MsmqMessageSerializationFormat SerializationFormat { get { throw null; } set { } }
        public override void ApplyConfiguration(System.ServiceModel.Channels.BindingElement bindingElement) { }
        public override void CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement from) { }
        protected override System.ServiceModel.Channels.TransportBindingElement CreateDefaultBindingElement() { throw null; }
        protected internal override void InitializeFrom(System.ServiceModel.Channels.BindingElement bindingElement) { }
    }
    public sealed partial class MsmqIntegrationSecurityElement : System.ServiceModel.Configuration.ServiceModelConfigurationElement
    {
        public MsmqIntegrationSecurityElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("mode", DefaultValue=System.ServiceModel.MsmqIntegration.MsmqIntegrationSecurityMode.Transport)]
        public System.ServiceModel.MsmqIntegration.MsmqIntegrationSecurityMode Mode { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("transport")]
        public System.ServiceModel.Configuration.MsmqTransportSecurityElement Transport { get { throw null; } }
    }
    public sealed partial class MsmqTransportElement : System.ServiceModel.Configuration.MsmqElementBase
    {
        public MsmqTransportElement() { }
        public override System.Type BindingElementType { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("maxPoolSize", DefaultValue=8)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=0)]
        public int MaxPoolSize { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("queueTransferProtocol", DefaultValue=System.ServiceModel.QueueTransferProtocol.Native)]
        public System.ServiceModel.QueueTransferProtocol QueueTransferProtocol { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("useActiveDirectory", DefaultValue=false)]
        public bool UseActiveDirectory { get { throw null; } set { } }
        public override void ApplyConfiguration(System.ServiceModel.Channels.BindingElement bindingElement) { }
        public override void CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement from) { }
        protected override System.ServiceModel.Channels.TransportBindingElement CreateDefaultBindingElement() { throw null; }
        protected internal override void InitializeFrom(System.ServiceModel.Channels.BindingElement bindingElement) { }
    }
    public sealed partial class MsmqTransportSecurityElement : System.ServiceModel.Configuration.ServiceModelConfigurationElement
    {
        public MsmqTransportSecurityElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("msmqAuthenticationMode", DefaultValue=System.ServiceModel.MsmqAuthenticationMode.WindowsDomain)]
        public System.ServiceModel.MsmqAuthenticationMode MsmqAuthenticationMode { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("msmqEncryptionAlgorithm", DefaultValue=System.ServiceModel.MsmqEncryptionAlgorithm.RC4Stream)]
        public System.ServiceModel.MsmqEncryptionAlgorithm MsmqEncryptionAlgorithm { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("msmqProtectionLevel", DefaultValue=System.Net.Security.ProtectionLevel.Sign)]
        public System.Net.Security.ProtectionLevel MsmqProtectionLevel { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("msmqSecureHashAlgorithm")]
        public System.ServiceModel.MsmqSecureHashAlgorithm MsmqSecureHashAlgorithm { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
    }
    public sealed partial class MtomMessageEncodingElement : System.ServiceModel.Configuration.BindingElementExtensionElement
    {
        public MtomMessageEncodingElement() { }
        public override System.Type BindingElementType { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("maxBufferSize", DefaultValue=65536)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=1)]
        public int MaxBufferSize { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("maxReadPoolSize", DefaultValue=64)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=1)]
        public int MaxReadPoolSize { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("maxWritePoolSize", DefaultValue=16)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=1)]
        public int MaxWritePoolSize { get { throw null; } set { } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.MessageVersionConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("messageVersion", DefaultValue="Soap12WSAddressing10")]
        public System.ServiceModel.Channels.MessageVersion MessageVersion { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("readerQuotas")]
        public System.ServiceModel.Configuration.XmlDictionaryReaderQuotasElement ReaderQuotas { get { throw null; } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.EncodingConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("writeEncoding", DefaultValue="utf-8")]
        public System.Text.Encoding WriteEncoding { get { throw null; } set { } }
        public override void ApplyConfiguration(System.ServiceModel.Channels.BindingElement bindingElement) { }
        public override void CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement from) { }
        protected internal override System.ServiceModel.Channels.BindingElement CreateBindingElement() { throw null; }
        protected internal override void InitializeFrom(System.ServiceModel.Channels.BindingElement bindingElement) { }
    }
    public sealed partial class NamedPipeConnectionPoolSettingsElement : System.ServiceModel.Configuration.ServiceModelConfigurationElement
    {
        public NamedPipeConnectionPoolSettingsElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("groupName", DefaultValue="default")]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string GroupName { get { throw null; } set { } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("idleTimeout", DefaultValue="00:02:00")]
        public System.TimeSpan IdleTimeout { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("maxOutboundConnectionsPerEndpoint", DefaultValue=10)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=0)]
        public int MaxOutboundConnectionsPerEndpoint { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
    }
    public sealed partial class NamedPipeSettingsElement : System.ServiceModel.Configuration.ServiceModelConfigurationElement
    {
        public NamedPipeSettingsElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("applicationContainerSettings")]
        public System.ServiceModel.Configuration.ApplicationContainerSettingsElement ApplicationContainerSettings { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
    }
    public sealed partial class NamedPipeTransportElement : System.ServiceModel.Configuration.ConnectionOrientedTransportElement
    {
        public NamedPipeTransportElement() { }
        public override System.Type BindingElementType { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("connectionPoolSettings")]
        public System.ServiceModel.Configuration.NamedPipeConnectionPoolSettingsElement ConnectionPoolSettings { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("pipeSettings")]
        public System.ServiceModel.Configuration.NamedPipeSettingsElement PipeSettings { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        public override void ApplyConfiguration(System.ServiceModel.Channels.BindingElement bindingElement) { }
        public override void CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement from) { }
        protected override System.ServiceModel.Channels.TransportBindingElement CreateDefaultBindingElement() { throw null; }
        protected internal override void InitializeFrom(System.ServiceModel.Channels.BindingElement bindingElement) { }
    }
    public sealed partial class NamedPipeTransportSecurityElement : System.ServiceModel.Configuration.ServiceModelConfigurationElement
    {
        public NamedPipeTransportSecurityElement() { }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("protectionLevel", DefaultValue=System.Net.Security.ProtectionLevel.EncryptAndSign)]
        public System.Net.Security.ProtectionLevel ProtectionLevel { get { throw null; } set { } }
    }
    public abstract partial class NamedServiceModelExtensionCollectionElement<TServiceModelExtensionElement> : System.ServiceModel.Configuration.ServiceModelExtensionCollectionElement<TServiceModelExtensionElement> where TServiceModelExtensionElement : System.ServiceModel.Configuration.ServiceModelExtensionElement
    {
        internal NamedServiceModelExtensionCollectionElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("name", Options=System.Configuration.ConfigurationPropertyOptions.IsKey)]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string Name { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
    }
    public partial class NetHttpBindingCollectionElement : System.ServiceModel.Configuration.StandardBindingCollectionElement<System.ServiceModel.NetHttpBinding, System.ServiceModel.Configuration.NetHttpBindingElement>
    {
        public NetHttpBindingCollectionElement() { }
    }
    public sealed partial class NetHttpBindingElement : System.ServiceModel.Configuration.HttpBindingBaseElement
    {
        public NetHttpBindingElement() : base (default(string)) { }
        public NetHttpBindingElement(string name) : base (default(string)) { }
        protected override System.Type BindingElementType { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("messageEncoding", DefaultValue=System.ServiceModel.NetHttpMessageEncoding.Binary)]
        public System.ServiceModel.NetHttpMessageEncoding MessageEncoding { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("reliableSession")]
        public System.ServiceModel.Configuration.StandardBindingOptionalReliableSessionElement ReliableSession { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("security")]
        public System.ServiceModel.Configuration.BasicHttpSecurityElement Security { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("webSocketSettings")]
        public System.ServiceModel.Configuration.NetHttpWebSocketTransportSettingsElement WebSocketSettings { get { throw null; } set { } }
        protected internal override void InitializeFrom(System.ServiceModel.Channels.Binding binding) { }
        protected override void OnApplyConfiguration(System.ServiceModel.Channels.Binding binding) { }
    }
    public partial class NetHttpsBindingCollectionElement : System.ServiceModel.Configuration.StandardBindingCollectionElement<System.ServiceModel.NetHttpsBinding, System.ServiceModel.Configuration.NetHttpsBindingElement>
    {
        public NetHttpsBindingCollectionElement() { }
    }
    public sealed partial class NetHttpsBindingElement : System.ServiceModel.Configuration.HttpBindingBaseElement
    {
        public NetHttpsBindingElement() : base (default(string)) { }
        public NetHttpsBindingElement(string name) : base (default(string)) { }
        protected override System.Type BindingElementType { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("messageEncoding", DefaultValue=System.ServiceModel.NetHttpMessageEncoding.Binary)]
        public System.ServiceModel.NetHttpMessageEncoding MessageEncoding { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("reliableSession")]
        public System.ServiceModel.Configuration.StandardBindingOptionalReliableSessionElement ReliableSession { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("security")]
        public System.ServiceModel.Configuration.BasicHttpsSecurityElement Security { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("webSocketSettings")]
        public System.ServiceModel.Configuration.NetHttpWebSocketTransportSettingsElement WebSocketSettings { get { throw null; } set { } }
        protected internal override void InitializeFrom(System.ServiceModel.Channels.Binding binding) { }
        protected override void OnApplyConfiguration(System.ServiceModel.Channels.Binding binding) { }
    }
    public sealed partial class NetHttpWebSocketTransportSettingsElement : System.ServiceModel.Configuration.WebSocketTransportSettingsElement
    {
        public NetHttpWebSocketTransportSettingsElement() { }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("subProtocol", DefaultValue="soap")]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public override string SubProtocol { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("transportUsage", DefaultValue=System.ServiceModel.Channels.WebSocketTransportUsage.WhenDuplex)]
        public override System.ServiceModel.Channels.WebSocketTransportUsage TransportUsage { get { throw null; } set { } }
    }
    public partial class NetMsmqBindingCollectionElement : System.ServiceModel.Configuration.StandardBindingCollectionElement<System.ServiceModel.NetMsmqBinding, System.ServiceModel.Configuration.NetMsmqBindingElement>
    {
        public NetMsmqBindingCollectionElement() { }
    }
    public partial class NetMsmqBindingElement : System.ServiceModel.Configuration.MsmqBindingElementBase
    {
        public NetMsmqBindingElement() { }
        public NetMsmqBindingElement(string name) { }
        protected override System.Type BindingElementType { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("maxBufferPoolSize", DefaultValue=(long)524288)]
        [System.Configuration.LongValidatorAttribute(MinValue=(long)0)]
        public long MaxBufferPoolSize { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("queueTransferProtocol", DefaultValue=System.ServiceModel.QueueTransferProtocol.Native)]
        public System.ServiceModel.QueueTransferProtocol QueueTransferProtocol { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("readerQuotas")]
        public System.ServiceModel.Configuration.XmlDictionaryReaderQuotasElement ReaderQuotas { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("security")]
        public System.ServiceModel.Configuration.NetMsmqSecurityElement Security { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("useActiveDirectory", DefaultValue=false)]
        public bool UseActiveDirectory { get { throw null; } set { } }
        protected internal override void InitializeFrom(System.ServiceModel.Channels.Binding binding) { }
        protected override void OnApplyConfiguration(System.ServiceModel.Channels.Binding binding) { }
    }
    public sealed partial class NetMsmqSecurityElement : System.ServiceModel.Configuration.ServiceModelConfigurationElement
    {
        public NetMsmqSecurityElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("message")]
        public System.ServiceModel.Configuration.MessageSecurityOverMsmqElement Message { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("mode", DefaultValue=System.ServiceModel.NetMsmqSecurityMode.Transport)]
        public System.ServiceModel.NetMsmqSecurityMode Mode { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("transport")]
        public System.ServiceModel.Configuration.MsmqTransportSecurityElement Transport { get { throw null; } }
    }
    public partial class NetNamedPipeBindingCollectionElement : System.ServiceModel.Configuration.StandardBindingCollectionElement<System.ServiceModel.NetNamedPipeBinding, System.ServiceModel.Configuration.NetNamedPipeBindingElement>
    {
        public NetNamedPipeBindingCollectionElement() { }
    }
    public partial class NetNamedPipeBindingElement : System.ServiceModel.Configuration.StandardBindingElement
    {
        public NetNamedPipeBindingElement() { }
        public NetNamedPipeBindingElement(string name) { }
        protected override System.Type BindingElementType { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("hostNameComparisonMode", DefaultValue=System.ServiceModel.HostNameComparisonMode.StrongWildcard)]
        public System.ServiceModel.HostNameComparisonMode HostNameComparisonMode { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("maxBufferPoolSize", DefaultValue=(long)524288)]
        [System.Configuration.LongValidatorAttribute(MinValue=(long)0)]
        public long MaxBufferPoolSize { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("maxBufferSize", DefaultValue=65536)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=1)]
        public int MaxBufferSize { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("maxConnections", DefaultValue=0)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=0)]
        public int MaxConnections { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("maxReceivedMessageSize", DefaultValue=(long)65536)]
        [System.Configuration.LongValidatorAttribute(MinValue=(long)1)]
        public long MaxReceivedMessageSize { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("readerQuotas")]
        public System.ServiceModel.Configuration.XmlDictionaryReaderQuotasElement ReaderQuotas { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("security")]
        public System.ServiceModel.Configuration.NetNamedPipeSecurityElement Security { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("transactionFlow", DefaultValue=false)]
        public bool TransactionFlow { get { throw null; } set { } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.TransactionProtocolConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("transactionProtocol", DefaultValue="OleTransactions")]
        public System.ServiceModel.TransactionProtocol TransactionProtocol { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("transferMode", DefaultValue=System.ServiceModel.TransferMode.Buffered)]
        public System.ServiceModel.TransferMode TransferMode { get { throw null; } set { } }
        protected internal override void InitializeFrom(System.ServiceModel.Channels.Binding binding) { }
        protected override void OnApplyConfiguration(System.ServiceModel.Channels.Binding binding) { }
    }
    public sealed partial class NetNamedPipeSecurityElement : System.ServiceModel.Configuration.ServiceModelConfigurationElement
    {
        public NetNamedPipeSecurityElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("mode", DefaultValue=System.ServiceModel.NetNamedPipeSecurityMode.Transport)]
        public System.ServiceModel.NetNamedPipeSecurityMode Mode { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("transport")]
        public System.ServiceModel.Configuration.NamedPipeTransportSecurityElement Transport { get { throw null; } }
    }
    [System.ObsoleteAttribute("PeerChannel feature is obsolete and will be removed in the future.", false)]
    public partial class NetPeerTcpBindingCollectionElement : System.ServiceModel.Configuration.StandardBindingCollectionElement<System.ServiceModel.NetPeerTcpBinding, System.ServiceModel.Configuration.NetPeerTcpBindingElement>
    {
        public NetPeerTcpBindingCollectionElement() { }
    }
    [System.ObsoleteAttribute("PeerChannel feature is obsolete and will be removed in the future.", false)]
    public partial class NetPeerTcpBindingElement : System.ServiceModel.Configuration.StandardBindingElement
    {
        public NetPeerTcpBindingElement() { }
        public NetPeerTcpBindingElement(string name) { }
        protected override System.Type BindingElementType { get { throw null; } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.PeerTransportListenAddressConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("listenIPAddress", DefaultValue=null)]
        public System.Net.IPAddress ListenIPAddress { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("maxBufferPoolSize", DefaultValue=(long)524288)]
        [System.Configuration.LongValidatorAttribute(MinValue=(long)0)]
        public long MaxBufferPoolSize { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("maxReceivedMessageSize", DefaultValue=(long)65536)]
        [System.Configuration.LongValidatorAttribute(MinValue=(long)16384)]
        public long MaxReceivedMessageSize { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("port", DefaultValue=0)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=0, MaxValue=65535)]
        public int Port { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("readerQuotas")]
        public System.ServiceModel.Configuration.XmlDictionaryReaderQuotasElement ReaderQuotas { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("resolver", DefaultValue=null)]
        public System.ServiceModel.Configuration.PeerResolverElement Resolver { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("security")]
        public System.ServiceModel.Configuration.PeerSecurityElement Security { get { throw null; } }
        protected internal override void InitializeFrom(System.ServiceModel.Channels.Binding binding) { }
        protected override void OnApplyConfiguration(System.ServiceModel.Channels.Binding binding) { }
    }
    public partial class NetTcpBindingCollectionElement : System.ServiceModel.Configuration.StandardBindingCollectionElement<System.ServiceModel.NetTcpBinding, System.ServiceModel.Configuration.NetTcpBindingElement>
    {
        public NetTcpBindingCollectionElement() { }
    }
    public partial class NetTcpBindingElement : System.ServiceModel.Configuration.StandardBindingElement
    {
        public NetTcpBindingElement() { }
        public NetTcpBindingElement(string name) { }
        protected override System.Type BindingElementType { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("hostNameComparisonMode", DefaultValue=System.ServiceModel.HostNameComparisonMode.StrongWildcard)]
        public System.ServiceModel.HostNameComparisonMode HostNameComparisonMode { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("listenBacklog", DefaultValue=0)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=0)]
        public int ListenBacklog { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("maxBufferPoolSize", DefaultValue=(long)524288)]
        [System.Configuration.LongValidatorAttribute(MinValue=(long)0)]
        public long MaxBufferPoolSize { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("maxBufferSize", DefaultValue=65536)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=1)]
        public int MaxBufferSize { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("maxConnections", DefaultValue=0)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=0)]
        public int MaxConnections { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("maxReceivedMessageSize", DefaultValue=(long)65536)]
        [System.Configuration.LongValidatorAttribute(MinValue=(long)1)]
        public long MaxReceivedMessageSize { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("portSharingEnabled", DefaultValue=false)]
        public bool PortSharingEnabled { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("readerQuotas")]
        public System.ServiceModel.Configuration.XmlDictionaryReaderQuotasElement ReaderQuotas { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("reliableSession")]
        public System.ServiceModel.Configuration.StandardBindingOptionalReliableSessionElement ReliableSession { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("security")]
        public System.ServiceModel.Configuration.NetTcpSecurityElement Security { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("transactionFlow", DefaultValue=false)]
        public bool TransactionFlow { get { throw null; } set { } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.TransactionProtocolConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("transactionProtocol", DefaultValue="OleTransactions")]
        public System.ServiceModel.TransactionProtocol TransactionProtocol { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("transferMode", DefaultValue=System.ServiceModel.TransferMode.Buffered)]
        public System.ServiceModel.TransferMode TransferMode { get { throw null; } set { } }
        protected internal override void InitializeFrom(System.ServiceModel.Channels.Binding binding) { }
        protected override void OnApplyConfiguration(System.ServiceModel.Channels.Binding binding) { }
    }
    [System.Runtime.CompilerServices.TypeForwardedFromAttribute("System.WorkflowServices, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
    public partial class NetTcpContextBindingCollectionElement : System.ServiceModel.Configuration.StandardBindingCollectionElement<System.ServiceModel.NetTcpContextBinding, System.ServiceModel.Configuration.NetTcpContextBindingElement>
    {
        public NetTcpContextBindingCollectionElement() { }
    }
    [System.Runtime.CompilerServices.TypeForwardedFromAttribute("System.WorkflowServices, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
    public partial class NetTcpContextBindingElement : System.ServiceModel.Configuration.NetTcpBindingElement
    {
        public NetTcpContextBindingElement() { }
        public NetTcpContextBindingElement(string name) { }
        protected override System.Type BindingElementType { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("clientCallbackAddress", DefaultValue=null)]
        public System.Uri ClientCallbackAddress { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("contextManagementEnabled", DefaultValue=true)]
        public bool ContextManagementEnabled { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("contextProtectionLevel", DefaultValue=System.Net.Security.ProtectionLevel.Sign)]
        public System.Net.Security.ProtectionLevel ContextProtectionLevel { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        protected internal override void InitializeFrom(System.ServiceModel.Channels.Binding binding) { }
        protected override void OnApplyConfiguration(System.ServiceModel.Channels.Binding binding) { }
    }
    public sealed partial class NetTcpSecurityElement : System.ServiceModel.Configuration.ServiceModelConfigurationElement
    {
        public NetTcpSecurityElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("message")]
        public System.ServiceModel.Configuration.MessageSecurityOverTcpElement Message { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("mode", DefaultValue=System.ServiceModel.SecurityMode.Transport)]
        public System.ServiceModel.SecurityMode Mode { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("transport")]
        public System.ServiceModel.Configuration.TcpTransportSecurityElement Transport { get { throw null; } }
    }
    public sealed partial class NonDualMessageSecurityOverHttpElement : System.ServiceModel.Configuration.MessageSecurityOverHttpElement
    {
        public NonDualMessageSecurityOverHttpElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("establishSecurityContext", DefaultValue=true)]
        public bool EstablishSecurityContext { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
    }
    public sealed partial class OneWayElement : System.ServiceModel.Configuration.BindingElementExtensionElement
    {
        public OneWayElement() { }
        public override System.Type BindingElementType { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("channelPoolSettings")]
        public System.ServiceModel.Configuration.ChannelPoolSettingsElement ChannelPoolSettings { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("maxAcceptedChannels", DefaultValue=10)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=1)]
        public int MaxAcceptedChannels { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("packetRoutable", DefaultValue=false)]
        public bool PacketRoutable { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        public override void ApplyConfiguration(System.ServiceModel.Channels.BindingElement bindingElement) { }
        public override void CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement from) { }
        protected internal override System.ServiceModel.Channels.BindingElement CreateBindingElement() { throw null; }
        protected internal override void InitializeFrom(System.ServiceModel.Channels.BindingElement bindingElement) { }
    }
    public sealed partial class PeerCredentialElement : System.Configuration.ConfigurationElement
    {
        public PeerCredentialElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("certificate")]
        public System.ServiceModel.Configuration.X509PeerCertificateElement Certificate { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("messageSenderAuthentication")]
        public System.ServiceModel.Configuration.X509PeerCertificateAuthenticationElement MessageSenderAuthentication { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("peerAuthentication")]
        public System.ServiceModel.Configuration.X509PeerCertificateAuthenticationElement PeerAuthentication { get { throw null; } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        public void Copy(System.ServiceModel.Configuration.PeerCredentialElement from) { }
    }
    public sealed partial class PeerCustomResolverElement : System.ServiceModel.Configuration.ServiceModelConfigurationElement
    {
        public PeerCustomResolverElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("address", DefaultValue=null, Options=System.Configuration.ConfigurationPropertyOptions.None)]
        public System.Uri Address { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("binding", DefaultValue="")]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string Binding { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("bindingConfiguration", DefaultValue="")]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string BindingConfiguration { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("headers")]
        public System.ServiceModel.Configuration.AddressHeaderCollectionElement Headers { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("identity")]
        public System.ServiceModel.Configuration.IdentityElement Identity { get { throw null; } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("resolverType", DefaultValue="")]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string ResolverType { get { throw null; } set { } }
    }
    public sealed partial class PeerResolverElement : System.ServiceModel.Configuration.ServiceModelConfigurationElement
    {
        public PeerResolverElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("custom")]
        public System.ServiceModel.Configuration.PeerCustomResolverElement Custom { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("mode", DefaultValue=System.ServiceModel.PeerResolvers.PeerResolverMode.Auto)]
        public System.ServiceModel.PeerResolvers.PeerResolverMode Mode { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("referralPolicy", DefaultValue=System.ServiceModel.PeerResolvers.PeerReferralPolicy.Service)]
        public System.ServiceModel.PeerResolvers.PeerReferralPolicy ReferralPolicy { get { throw null; } set { } }
    }
    public sealed partial class PeerSecurityElement : System.ServiceModel.Configuration.ServiceModelConfigurationElement
    {
        public PeerSecurityElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("mode", DefaultValue=System.ServiceModel.SecurityMode.Transport)]
        public System.ServiceModel.SecurityMode Mode { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("transport")]
        public System.ServiceModel.Configuration.PeerTransportSecurityElement Transport { get { throw null; } }
    }
    [System.ObsoleteAttribute("PeerChannel feature is obsolete and will be removed in the future.", false)]
    public partial class PeerTransportElement : System.ServiceModel.Configuration.BindingElementExtensionElement
    {
        public PeerTransportElement() { }
        public override System.Type BindingElementType { get { throw null; } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.PeerTransportListenAddressConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("listenIPAddress", DefaultValue=null)]
        public System.Net.IPAddress ListenIPAddress { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("maxBufferPoolSize", DefaultValue=(long)524288)]
        [System.Configuration.LongValidatorAttribute(MinValue=(long)1)]
        public long MaxBufferPoolSize { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("maxReceivedMessageSize", DefaultValue=(long)65536)]
        [System.Configuration.LongValidatorAttribute(MinValue=(long)1)]
        public long MaxReceivedMessageSize { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("port", DefaultValue=0)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=0, MaxValue=65535)]
        public int Port { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("security")]
        public System.ServiceModel.Configuration.PeerSecurityElement Security { get { throw null; } }
        public override void ApplyConfiguration(System.ServiceModel.Channels.BindingElement bindingElement) { }
        public override void CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement from) { }
        protected internal override System.ServiceModel.Channels.BindingElement CreateBindingElement() { throw null; }
        protected internal override void InitializeFrom(System.ServiceModel.Channels.BindingElement bindingElement) { }
    }
    public sealed partial class PeerTransportSecurityElement : System.ServiceModel.Configuration.ServiceModelConfigurationElement
    {
        public PeerTransportSecurityElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("credentialType", DefaultValue=System.ServiceModel.PeerTransportCredentialType.Password)]
        public System.ServiceModel.PeerTransportCredentialType CredentialType { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
    }
    public partial class PnrpPeerResolverElement : System.ServiceModel.Configuration.BindingElementExtensionElement
    {
        public PnrpPeerResolverElement() { }
        public override System.Type BindingElementType { get { throw null; } }
        protected internal override System.ServiceModel.Channels.BindingElement CreateBindingElement() { throw null; }
    }
    public sealed partial class PolicyImporterElement : System.Configuration.ConfigurationElement
    {
        public PolicyImporterElement() { }
        public PolicyImporterElement(string type) { }
        public PolicyImporterElement(System.Type type) { }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("type", Options=System.Configuration.ConfigurationPropertyOptions.IsKey | System.Configuration.ConfigurationPropertyOptions.IsRequired)]
        [System.Configuration.StringValidatorAttribute(MinLength=1)]
        public string Type { get { throw null; } set { } }
    }
    [System.Configuration.ConfigurationCollectionAttribute(typeof(System.ServiceModel.Configuration.PolicyImporterElement), AddItemName="extension")]
    public sealed partial class PolicyImporterElementCollection : System.ServiceModel.Configuration.ServiceModelEnhancedConfigurationElementCollection<System.ServiceModel.Configuration.PolicyImporterElement>
    {
        public PolicyImporterElementCollection() { }
        protected override object GetElementKey(System.Configuration.ConfigurationElement element) { throw null; }
    }
    public partial class PrivacyNoticeElement : System.ServiceModel.Configuration.BindingElementExtensionElement
    {
        public PrivacyNoticeElement() { }
        public override System.Type BindingElementType { get { throw null; } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("url")]
        public System.Uri Url { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("version", DefaultValue=0)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=0)]
        public int Version { get { throw null; } set { } }
        public override void ApplyConfiguration(System.ServiceModel.Channels.BindingElement bindingElement) { }
        public override void CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement from) { }
        protected internal override System.ServiceModel.Channels.BindingElement CreateBindingElement() { throw null; }
        protected internal override void InitializeFrom(System.ServiceModel.Channels.BindingElement bindingElement) { }
    }
    public sealed partial class ProtocolMappingElement : System.Configuration.ConfigurationElement
    {
        public ProtocolMappingElement() { }
        public ProtocolMappingElement(string schemeType, string binding, string bindingConfiguration) { }
        [System.Configuration.ConfigurationPropertyAttribute("binding", Options=System.Configuration.ConfigurationPropertyOptions.IsRequired)]
        [System.Configuration.StringValidatorAttribute(MinLength=1)]
        public string Binding { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("bindingConfiguration", Options=System.Configuration.ConfigurationPropertyOptions.None)]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string BindingConfiguration { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("scheme", Options=System.Configuration.ConfigurationPropertyOptions.IsKey | System.Configuration.ConfigurationPropertyOptions.IsRequired)]
        [System.Configuration.StringValidatorAttribute(MinLength=1)]
        public string Scheme { get { throw null; } set { } }
    }
    [System.Configuration.ConfigurationCollectionAttribute(typeof(System.ServiceModel.Configuration.ProtocolMappingElement), AddItemName="add")]
    public sealed partial class ProtocolMappingElementCollection : System.ServiceModel.Configuration.ServiceModelEnhancedConfigurationElementCollection<System.ServiceModel.Configuration.ProtocolMappingElement>
    {
        public ProtocolMappingElementCollection() { }
        protected override object GetElementKey(System.Configuration.ConfigurationElement element) { throw null; }
    }
    public sealed partial class ProtocolMappingSection : System.Configuration.ConfigurationSection
    {
        public ProtocolMappingSection() { }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("", Options=System.Configuration.ConfigurationPropertyOptions.IsDefaultCollection)]
        public System.ServiceModel.Configuration.ProtocolMappingElementCollection ProtocolMappingCollection { get { throw null; } }
        protected override void InitializeDefault() { }
    }
    public sealed partial class ReliableSessionElement : System.ServiceModel.Configuration.BindingElementExtensionElement
    {
        public ReliableSessionElement() { }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("acknowledgementInterval", DefaultValue="00:00:00.2")]
        public System.TimeSpan AcknowledgementInterval { get { throw null; } set { } }
        public override System.Type BindingElementType { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("flowControlEnabled", DefaultValue=true)]
        public bool FlowControlEnabled { get { throw null; } set { } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("inactivityTimeout", DefaultValue="00:10:00")]
        public System.TimeSpan InactivityTimeout { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("maxPendingChannels", DefaultValue=4)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=1, MaxValue=16384)]
        public int MaxPendingChannels { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("maxRetryCount", DefaultValue=8)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=1)]
        public int MaxRetryCount { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("maxTransferWindowSize", DefaultValue=8)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=1, MaxValue=4096)]
        public int MaxTransferWindowSize { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("ordered", DefaultValue=true)]
        public bool Ordered { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.ReliableMessagingVersionConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("reliableMessagingVersion", DefaultValue="WSReliableMessagingFebruary2005")]
        public System.ServiceModel.ReliableMessagingVersion ReliableMessagingVersion { get { throw null; } set { } }
        public override void ApplyConfiguration(System.ServiceModel.Channels.BindingElement bindingElement) { }
        public override void CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement from) { }
        protected internal override System.ServiceModel.Channels.BindingElement CreateBindingElement() { throw null; }
        protected internal override void InitializeFrom(System.ServiceModel.Channels.BindingElement bindingElement) { }
    }
    public sealed partial class RemoveBehaviorElement : System.ServiceModel.Configuration.BehaviorExtensionElement
    {
        public RemoveBehaviorElement() { }
        public override System.Type BehaviorType { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("name", Options=System.Configuration.ConfigurationPropertyOptions.IsRequired)]
        [System.Configuration.StringValidatorAttribute(MinLength=1)]
        public string Name { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        public override void CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement from) { }
        protected internal override object CreateBehavior() { throw null; }
    }
    public sealed partial class RsaElement : System.Configuration.ConfigurationElement
    {
        public RsaElement() { }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("value", DefaultValue="")]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string Value { get { throw null; } set { } }
    }
    public sealed partial class SecureConversationServiceElement : System.Configuration.ConfigurationElement
    {
        public SecureConversationServiceElement() { }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("securityStateEncoderType", DefaultValue="")]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string SecurityStateEncoderType { get { throw null; } set { } }
        public void Copy(System.ServiceModel.Configuration.SecureConversationServiceElement from) { }
    }
    public sealed partial class SecurityElement : System.ServiceModel.Configuration.SecurityElementBase
    {
        public SecurityElement() { }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("secureConversationBootstrap")]
        public System.ServiceModel.Configuration.SecurityElementBase SecureConversationBootstrap { get { throw null; } }
        protected override void AddBindingTemplates(System.Collections.Generic.Dictionary<System.ServiceModel.Configuration.AuthenticationMode, System.ServiceModel.Channels.SecurityBindingElement> bindingTemplates) { }
        public override void CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement from) { }
        protected internal override System.ServiceModel.Channels.BindingElement CreateBindingElement(bool createTemplateOnly) { throw null; }
        protected override void InitializeNestedTokenParameterSettings(System.ServiceModel.Security.Tokens.SecurityTokenParameters sp, bool initializeNestedBindings) { }
    }
    public partial class SecurityElementBase : System.ServiceModel.Configuration.BindingElementExtensionElement
    {
        internal SecurityElementBase() { }
        [System.Configuration.ConfigurationPropertyAttribute("allowInsecureTransport", DefaultValue=false)]
        public bool AllowInsecureTransport { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("allowSerializedSigningTokenOnReply", DefaultValue=false)]
        public bool AllowSerializedSigningTokenOnReply { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("authenticationMode", DefaultValue=System.ServiceModel.Configuration.AuthenticationMode.SspiNegotiated)]
        public System.ServiceModel.Configuration.AuthenticationMode AuthenticationMode { get { throw null; } set { } }
        public override System.Type BindingElementType { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("canRenewSecurityContextToken", DefaultValue=true)]
        public bool CanRenewSecurityContextToken { get { throw null; } set { } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.SecurityAlgorithmSuiteConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("defaultAlgorithmSuite", DefaultValue="Default")]
        public System.ServiceModel.Security.SecurityAlgorithmSuite DefaultAlgorithmSuite { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("enableUnsecuredResponse", DefaultValue=false)]
        public bool EnableUnsecuredResponse { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("includeTimestamp", DefaultValue=true)]
        public bool IncludeTimestamp { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("issuedTokenParameters")]
        public System.ServiceModel.Configuration.IssuedTokenParametersElement IssuedTokenParameters { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("keyEntropyMode", DefaultValue=System.ServiceModel.Security.SecurityKeyEntropyMode.CombinedEntropy)]
        public System.ServiceModel.Security.SecurityKeyEntropyMode KeyEntropyMode { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("localClientSettings")]
        public System.ServiceModel.Configuration.LocalClientSecuritySettingsElement LocalClientSettings { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("localServiceSettings")]
        public System.ServiceModel.Configuration.LocalServiceSecuritySettingsElement LocalServiceSettings { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("messageProtectionOrder", DefaultValue=System.ServiceModel.Security.MessageProtectionOrder.SignBeforeEncryptAndEncryptSignature)]
        public System.ServiceModel.Security.MessageProtectionOrder MessageProtectionOrder { get { throw null; } set { } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.MessageSecurityVersionConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("messageSecurityVersion", DefaultValue="Default")]
        public System.ServiceModel.MessageSecurityVersion MessageSecurityVersion { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("protectTokens", DefaultValue=false)]
        public bool ProtectTokens { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("requireDerivedKeys", DefaultValue=true)]
        public bool RequireDerivedKeys { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("requireSecurityContextCancellation", DefaultValue=true)]
        public bool RequireSecurityContextCancellation { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("requireSignatureConfirmation", DefaultValue=false)]
        public bool RequireSignatureConfirmation { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("securityHeaderLayout", DefaultValue=System.ServiceModel.Channels.SecurityHeaderLayout.Strict)]
        public System.ServiceModel.Channels.SecurityHeaderLayout SecurityHeaderLayout { get { throw null; } set { } }
        protected void AddBindingTemplate(System.Collections.Generic.Dictionary<System.ServiceModel.Configuration.AuthenticationMode, System.ServiceModel.Channels.SecurityBindingElement> bindingTemplates, System.ServiceModel.Configuration.AuthenticationMode mode) { }
        protected virtual void AddBindingTemplates(System.Collections.Generic.Dictionary<System.ServiceModel.Configuration.AuthenticationMode, System.ServiceModel.Channels.SecurityBindingElement> bindingTemplates) { }
        public override void ApplyConfiguration(System.ServiceModel.Channels.BindingElement bindingElement) { }
        public override void CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement from) { }
        protected internal override System.ServiceModel.Channels.BindingElement CreateBindingElement() { throw null; }
        protected internal virtual System.ServiceModel.Channels.BindingElement CreateBindingElement(bool createTemplateOnly) { throw null; }
        protected internal override void InitializeFrom(System.ServiceModel.Channels.BindingElement bindingElement) { }
        protected virtual void InitializeNestedTokenParameterSettings(System.ServiceModel.Security.Tokens.SecurityTokenParameters sp, bool initializeNestedBindings) { }
        protected override bool SerializeElement(System.Xml.XmlWriter writer, bool serializeCollectionKey) { throw null; }
        protected override bool SerializeToXmlElement(System.Xml.XmlWriter writer, string elementName) { throw null; }
        protected override void Unmerge(System.Configuration.ConfigurationElement sourceElement, System.Configuration.ConfigurationElement parentElement, System.Configuration.ConfigurationSaveMode saveMode) { }
    }
    public sealed partial class ServiceActivationElement : System.Configuration.ConfigurationElement
    {
        public ServiceActivationElement() { }
        public ServiceActivationElement(string relativeAddress) { }
        public ServiceActivationElement(string relativeAddress, string service) { }
        public ServiceActivationElement(string relativeAddress, string service, string factory) { }
        [System.Configuration.ConfigurationPropertyAttribute("factory", Options=System.Configuration.ConfigurationPropertyOptions.None)]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string Factory { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("relativeAddress", Options=System.Configuration.ConfigurationPropertyOptions.IsKey | System.Configuration.ConfigurationPropertyOptions.IsRequired)]
        public string RelativeAddress { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("service", Options=System.Configuration.ConfigurationPropertyOptions.None)]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string Service { get { throw null; } set { } }
    }
    [System.Configuration.ConfigurationCollectionAttribute(typeof(System.ServiceModel.Configuration.ServiceActivationElement))]
    public sealed partial class ServiceActivationElementCollection : System.ServiceModel.Configuration.ServiceModelConfigurationElementCollection<System.ServiceModel.Configuration.ServiceActivationElement>
    {
        public ServiceActivationElementCollection() { }
        protected override bool ThrowOnDuplicate { get { throw null; } }
        protected override System.Configuration.ConfigurationElement CreateNewElement() { throw null; }
        protected override object GetElementKey(System.Configuration.ConfigurationElement element) { throw null; }
    }
    public sealed partial class ServiceAuthenticationElement : System.ServiceModel.Configuration.BehaviorExtensionElement
    {
        public ServiceAuthenticationElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("authenticationSchemes", DefaultValue=System.Net.AuthenticationSchemes.None)]
        public System.Net.AuthenticationSchemes AuthenticationSchemes { get { throw null; } set { } }
        public override System.Type BehaviorType { get { throw null; } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("serviceAuthenticationManagerType", DefaultValue="")]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string ServiceAuthenticationManagerType { get { throw null; } set { } }
        protected internal override object CreateBehavior() { throw null; }
    }
    public sealed partial class ServiceAuthorizationElement : System.ServiceModel.Configuration.BehaviorExtensionElement
    {
        public ServiceAuthorizationElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("authorizationPolicies")]
        public System.ServiceModel.Configuration.AuthorizationPolicyTypeElementCollection AuthorizationPolicies { get { throw null; } }
        public override System.Type BehaviorType { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("impersonateCallerForAllOperations", DefaultValue=false)]
        public bool ImpersonateCallerForAllOperations { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("impersonateOnSerializingReply", DefaultValue=false)]
        public bool ImpersonateOnSerializingReply { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("principalPermissionMode", DefaultValue=System.ServiceModel.Description.PrincipalPermissionMode.UseWindowsGroups)]
        public System.ServiceModel.Description.PrincipalPermissionMode PrincipalPermissionMode { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("roleProviderName", DefaultValue="")]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string RoleProviderName { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("serviceAuthorizationManagerType", DefaultValue="")]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string ServiceAuthorizationManagerType { get { throw null; } set { } }
        public override void CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement from) { }
        protected internal override object CreateBehavior() { throw null; }
    }
    public partial class ServiceBehaviorElement : System.ServiceModel.Configuration.NamedServiceModelExtensionCollectionElement<System.ServiceModel.Configuration.BehaviorExtensionElement>
    {
        public ServiceBehaviorElement() { }
        public ServiceBehaviorElement(string name) { }
        public override void Add(System.ServiceModel.Configuration.BehaviorExtensionElement element) { }
        public override bool CanAdd(System.ServiceModel.Configuration.BehaviorExtensionElement element) { throw null; }
        protected override void DeserializeElement(System.Xml.XmlReader reader, bool serializeCollectionKey) { }
    }
    [System.Configuration.ConfigurationCollectionAttribute(typeof(System.ServiceModel.Configuration.ServiceBehaviorElement), AddItemName="behavior")]
    public sealed partial class ServiceBehaviorElementCollection : System.ServiceModel.Configuration.ServiceModelEnhancedConfigurationElementCollection<System.ServiceModel.Configuration.ServiceBehaviorElement>
    {
        public ServiceBehaviorElementCollection() { }
        protected override bool ThrowOnDuplicate { get { throw null; } }
        protected override void BaseAdd(System.Configuration.ConfigurationElement element) { }
        protected override void DeserializeElement(System.Xml.XmlReader reader, bool serializeCollectionKey) { }
        protected override object GetElementKey(System.Configuration.ConfigurationElement element) { throw null; }
    }
    public partial class ServiceCredentialsElement : System.ServiceModel.Configuration.BehaviorExtensionElement
    {
        public ServiceCredentialsElement() { }
        public override System.Type BehaviorType { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("clientCertificate")]
        public System.ServiceModel.Configuration.X509InitiatorCertificateServiceElement ClientCertificate { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("identityConfiguration", IsRequired=false, DefaultValue="")]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string IdentityConfiguration { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("issuedTokenAuthentication")]
        public System.ServiceModel.Configuration.IssuedTokenServiceElement IssuedTokenAuthentication { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("peer")]
        public System.ServiceModel.Configuration.PeerCredentialElement Peer { get { throw null; } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("secureConversationAuthentication")]
        public System.ServiceModel.Configuration.SecureConversationServiceElement SecureConversationAuthentication { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("serviceCertificate")]
        public System.ServiceModel.Configuration.X509RecipientCertificateServiceElement ServiceCertificate { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("type", DefaultValue="")]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string Type { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("useIdentityConfiguration", DefaultValue=false, IsRequired=false)]
        public bool UseIdentityConfiguration { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("userNameAuthentication")]
        public System.ServiceModel.Configuration.UserNameServiceElement UserNameAuthentication { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("windowsAuthentication")]
        public System.ServiceModel.Configuration.WindowsServiceElement WindowsAuthentication { get { throw null; } }
        protected internal void ApplyConfiguration(System.ServiceModel.Description.ServiceCredentials behavior) { }
        public override void CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement from) { }
        protected internal override object CreateBehavior() { throw null; }
    }
    public sealed partial class ServiceDebugElement : System.ServiceModel.Configuration.BehaviorExtensionElement
    {
        public ServiceDebugElement() { }
        public override System.Type BehaviorType { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("httpHelpPageBinding", DefaultValue="")]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string HttpHelpPageBinding { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("httpHelpPageBindingConfiguration", DefaultValue="")]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string HttpHelpPageBindingConfiguration { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("httpHelpPageEnabled", DefaultValue=true)]
        public bool HttpHelpPageEnabled { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("httpHelpPageUrl")]
        public System.Uri HttpHelpPageUrl { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("httpsHelpPageBinding", DefaultValue="")]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string HttpsHelpPageBinding { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("httpsHelpPageBindingConfiguration", DefaultValue="")]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string HttpsHelpPageBindingConfiguration { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("httpsHelpPageEnabled", DefaultValue=true)]
        public bool HttpsHelpPageEnabled { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("httpsHelpPageUrl")]
        public System.Uri HttpsHelpPageUrl { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("includeExceptionDetailInFaults", DefaultValue=false)]
        public bool IncludeExceptionDetailInFaults { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        public override void CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement from) { }
        protected internal override object CreateBehavior() { throw null; }
    }
    public sealed partial class ServiceElement : System.Configuration.ConfigurationElement
    {
        public ServiceElement() { }
        public ServiceElement(string serviceName) { }
        [System.Configuration.ConfigurationPropertyAttribute("behaviorConfiguration", DefaultValue="")]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string BehaviorConfiguration { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("", Options=System.Configuration.ConfigurationPropertyOptions.IsDefaultCollection)]
        public System.ServiceModel.Configuration.ServiceEndpointElementCollection Endpoints { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("host", Options=System.Configuration.ConfigurationPropertyOptions.None)]
        public System.ServiceModel.Configuration.HostElement Host { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("name", Options=System.Configuration.ConfigurationPropertyOptions.IsKey | System.Configuration.ConfigurationPropertyOptions.IsRequired)]
        [System.Configuration.StringValidatorAttribute(MinLength=1)]
        public string Name { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Security.SecurityCriticalAttribute]
        protected override void Reset(System.Configuration.ConfigurationElement parentElement) { }
    }
    [System.Configuration.ConfigurationCollectionAttribute(typeof(System.ServiceModel.Configuration.ServiceElement), AddItemName="service")]
    public sealed partial class ServiceElementCollection : System.ServiceModel.Configuration.ServiceModelEnhancedConfigurationElementCollection<System.ServiceModel.Configuration.ServiceElement>
    {
        public ServiceElementCollection() { }
        protected override object GetElementKey(System.Configuration.ConfigurationElement element) { throw null; }
    }
    public sealed partial class ServiceEndpointElement : System.Configuration.ConfigurationElement
    {
        public ServiceEndpointElement() { }
        public ServiceEndpointElement(System.Uri address, string contractType) { }
        [System.Configuration.ConfigurationPropertyAttribute("address", DefaultValue="", Options=System.Configuration.ConfigurationPropertyOptions.IsKey)]
        public System.Uri Address { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("behaviorConfiguration", DefaultValue="")]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string BehaviorConfiguration { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("binding", Options=System.Configuration.ConfigurationPropertyOptions.IsKey)]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string Binding { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("bindingConfiguration", DefaultValue="", Options=System.Configuration.ConfigurationPropertyOptions.IsKey)]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string BindingConfiguration { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("bindingName", DefaultValue="", Options=System.Configuration.ConfigurationPropertyOptions.IsKey)]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string BindingName { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("bindingNamespace", DefaultValue="", Options=System.Configuration.ConfigurationPropertyOptions.IsKey)]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string BindingNamespace { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("contract", DefaultValue="", Options=System.Configuration.ConfigurationPropertyOptions.IsKey)]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string Contract { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("endpointConfiguration", DefaultValue="", Options=System.Configuration.ConfigurationPropertyOptions.IsKey)]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string EndpointConfiguration { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("headers")]
        public System.ServiceModel.Configuration.AddressHeaderCollectionElement Headers { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("identity")]
        public System.ServiceModel.Configuration.IdentityElement Identity { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("isSystemEndpoint", DefaultValue=false)]
        public bool IsSystemEndpoint { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("kind", DefaultValue="", Options=System.Configuration.ConfigurationPropertyOptions.IsKey)]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string Kind { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("listenUri", DefaultValue=null)]
        public System.Uri ListenUri { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("listenUriMode", DefaultValue=System.ServiceModel.Description.ListenUriMode.Explicit)]
        public System.ServiceModel.Description.ListenUriMode ListenUriMode { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("name", DefaultValue="")]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string Name { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
    }
    [System.Configuration.ConfigurationCollectionAttribute(typeof(System.ServiceModel.Configuration.ServiceEndpointElement), AddItemName="endpoint")]
    public sealed partial class ServiceEndpointElementCollection : System.ServiceModel.Configuration.ServiceModelEnhancedConfigurationElementCollection<System.ServiceModel.Configuration.ServiceEndpointElement>
    {
        public ServiceEndpointElementCollection() { }
        protected override bool ThrowOnDuplicate { get { throw null; } }
        protected override object GetElementKey(System.Configuration.ConfigurationElement element) { throw null; }
    }
    public sealed partial class ServiceHealthElement : System.ServiceModel.Configuration.BehaviorExtensionElement
    {
        public ServiceHealthElement() { }
        public override System.Type BehaviorType { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("healthDetailsEnabled", DefaultValue=true)]
        public bool HealthDetailsEnabled { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("httpGetBinding", DefaultValue="")]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string HttpGetBinding { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("httpGetBindingConfiguration", DefaultValue="")]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string HttpGetBindingConfiguration { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("httpGetEnabled", DefaultValue=true)]
        public bool HttpGetEnabled { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("httpGetUrl")]
        public System.Uri HttpGetUrl { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("httpsGetBinding", DefaultValue="")]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string HttpsGetBinding { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("httpsGetBindingConfiguration", DefaultValue="")]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string HttpsGetBindingConfiguration { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("httpsGetEnabled", DefaultValue=true)]
        public bool HttpsGetEnabled { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("httpsGetUrl")]
        public System.Uri HttpsGetUrl { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        public override void CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement from) { }
        protected internal override object CreateBehavior() { throw null; }
    }
    public sealed partial class ServiceHostingEnvironmentSection : System.Configuration.ConfigurationSection
    {
        public ServiceHostingEnvironmentSection() { }
        [System.Configuration.ConfigurationPropertyAttribute("aspNetCompatibilityEnabled", DefaultValue=false)]
        public bool AspNetCompatibilityEnabled { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("baseAddressPrefixFilters", Options=System.Configuration.ConfigurationPropertyOptions.None)]
        public System.ServiceModel.Configuration.BaseAddressPrefixFilterElementCollection BaseAddressPrefixFilters { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("closeIdleServicesAtLowMemory", DefaultValue=false)]
        public bool CloseIdleServicesAtLowMemory { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("minFreeMemoryPercentageToActivateService", DefaultValue=5)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=0, MaxValue=99)]
        public int MinFreeMemoryPercentageToActivateService { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("multipleSiteBindingsEnabled", DefaultValue=false)]
        public bool MultipleSiteBindingsEnabled { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("serviceActivations", Options=System.Configuration.ConfigurationPropertyOptions.None)]
        public System.ServiceModel.Configuration.ServiceActivationElementCollection ServiceActivations { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("", Options=System.Configuration.ConfigurationPropertyOptions.IsDefaultCollection)]
        public System.ServiceModel.Configuration.TransportConfigurationTypeElementCollection TransportConfigurationTypes { get { throw null; } }
        protected override void PostDeserialize() { }
    }
    public partial class ServiceMetadataEndpointCollectionElement : System.ServiceModel.Configuration.StandardEndpointCollectionElement<System.ServiceModel.Description.ServiceMetadataEndpoint, System.ServiceModel.Configuration.ServiceMetadataEndpointElement>
    {
        public ServiceMetadataEndpointCollectionElement() { }
    }
    public partial class ServiceMetadataEndpointElement : System.ServiceModel.Configuration.StandardEndpointElement
    {
        public ServiceMetadataEndpointElement() { }
        protected internal override System.Type EndpointType { get { throw null; } }
        protected internal override System.ServiceModel.Description.ServiceEndpoint CreateServiceEndpoint(System.ServiceModel.Description.ContractDescription contractDescription) { throw null; }
        protected override void OnApplyConfiguration(System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Configuration.ChannelEndpointElement serviceEndpointElement) { }
        protected override void OnApplyConfiguration(System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Configuration.ServiceEndpointElement serviceEndpointElement) { }
        protected override void OnInitializeAndValidate(System.ServiceModel.Configuration.ChannelEndpointElement channelEndpointElement) { }
        protected override void OnInitializeAndValidate(System.ServiceModel.Configuration.ServiceEndpointElement serviceEndpointElement) { }
    }
    public sealed partial class ServiceMetadataPublishingElement : System.ServiceModel.Configuration.BehaviorExtensionElement
    {
        public ServiceMetadataPublishingElement() { }
        public override System.Type BehaviorType { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("externalMetadataLocation")]
        public System.Uri ExternalMetadataLocation { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("httpGetBinding", DefaultValue="")]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string HttpGetBinding { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("httpGetBindingConfiguration", DefaultValue="")]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string HttpGetBindingConfiguration { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("httpGetEnabled", DefaultValue=false)]
        public bool HttpGetEnabled { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("httpGetUrl")]
        public System.Uri HttpGetUrl { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("httpsGetBinding", DefaultValue="")]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string HttpsGetBinding { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("httpsGetBindingConfiguration", DefaultValue="")]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string HttpsGetBindingConfiguration { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("httpsGetEnabled", DefaultValue=false)]
        public bool HttpsGetEnabled { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("httpsGetUrl")]
        public System.Uri HttpsGetUrl { get { throw null; } set { } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.PolicyVersionConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("policyVersion", DefaultValue="Default")]
        public System.ServiceModel.Description.PolicyVersion PolicyVersion { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        public override void CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement from) { }
        protected internal override object CreateBehavior() { throw null; }
    }
    public abstract partial class ServiceModelConfigurationElement : System.Configuration.ConfigurationElement
    {
        protected ServiceModelConfigurationElement() { }
        protected void SetPropertyValueIfNotDefaultValue<T>(string propertyName, T value) { }
    }
    public abstract partial class ServiceModelConfigurationElementCollection<ConfigurationElementType> : System.Configuration.ConfigurationElementCollection where ConfigurationElementType : System.Configuration.ConfigurationElement, new()
    {
        internal ServiceModelConfigurationElementCollection() { }
        public override System.Configuration.ConfigurationElementCollectionType CollectionType { get { throw null; } }
        protected override string ElementName { get { throw null; } }
        public ConfigurationElementType this[int index] { get { throw null; } set { } }
        public virtual ConfigurationElementType this[object key] { get { throw null; } set { } }
        public void Add(ConfigurationElementType element) { }
        protected override void BaseAdd(System.Configuration.ConfigurationElement element) { }
        public void Clear() { }
        public virtual bool ContainsKey(object key) { throw null; }
        public void CopyTo(ConfigurationElementType[] array, int start) { }
        protected override System.Configuration.ConfigurationElement CreateNewElement() { throw null; }
        public int IndexOf(ConfigurationElementType element) { throw null; }
        public void Remove(ConfigurationElementType element) { }
        public void RemoveAt(int index) { }
        public void RemoveAt(object key) { }
    }
    public abstract partial class ServiceModelEnhancedConfigurationElementCollection<TConfigurationElement> : System.ServiceModel.Configuration.ServiceModelConfigurationElementCollection<TConfigurationElement> where TConfigurationElement : System.Configuration.ConfigurationElement, new()
    {
        internal ServiceModelEnhancedConfigurationElementCollection() { }
        protected override bool ThrowOnDuplicate { get { throw null; } }
        protected override void BaseAdd(System.Configuration.ConfigurationElement element) { }
    }
    public abstract partial class ServiceModelExtensionCollectionElement<TServiceModelExtensionElement> : System.Configuration.ConfigurationElement, System.Collections.Generic.ICollection<TServiceModelExtensionElement>, System.Collections.Generic.IEnumerable<TServiceModelExtensionElement>, System.Collections.IEnumerable where TServiceModelExtensionElement : System.ServiceModel.Configuration.ServiceModelExtensionElement
    {
        internal ServiceModelExtensionCollectionElement() { }
        public int Count { get { throw null; } }
        public TServiceModelExtensionElement this[int index] { get { throw null; } }
        public TServiceModelExtensionElement this[System.Type extensionType] { get { throw null; } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        bool System.Collections.Generic.ICollection<TServiceModelExtensionElement>.IsReadOnly { get { throw null; } }
        public virtual void Add(TServiceModelExtensionElement element) { }
        public virtual bool CanAdd(TServiceModelExtensionElement element) { throw null; }
        public void Clear() { }
        public bool Contains(TServiceModelExtensionElement element) { throw null; }
        public bool ContainsKey(string elementName) { throw null; }
        public bool ContainsKey(System.Type elementType) { throw null; }
        public void CopyTo(TServiceModelExtensionElement[] elements, int start) { }
        [System.Security.SecuritySafeCriticalAttribute]
        protected override void DeserializeElement(System.Xml.XmlReader reader, bool serializeCollectionKey) { }
        public System.Collections.Generic.IEnumerator<TServiceModelExtensionElement> GetEnumerator() { throw null; }
        protected override bool IsModified() { throw null; }
        protected override bool OnDeserializeUnrecognizedElement(string elementName, System.Xml.XmlReader reader) { throw null; }
        public bool Remove(TServiceModelExtensionElement element) { throw null; }
        [System.Security.SecurityCriticalAttribute]
        protected override void Reset(System.Configuration.ConfigurationElement parentElement) { }
        protected override void ResetModified() { }
        protected void SetIsModified() { }
        protected override void SetReadOnly() { }
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { throw null; }
        protected override void Unmerge(System.Configuration.ConfigurationElement sourceElement, System.Configuration.ConfigurationElement parentElement, System.Configuration.ConfigurationSaveMode saveMode) { }
    }
    [System.Configuration.ConfigurationPermissionAttribute(System.Security.Permissions.SecurityAction.InheritanceDemand, Unrestricted=true)]
    public abstract partial class ServiceModelExtensionElement : System.ServiceModel.Configuration.ServiceModelConfigurationElement
    {
        protected ServiceModelExtensionElement() { }
        public string ConfigurationElementName { get { throw null; } }
        public virtual void CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement from) { }
        protected override bool IsModified() { throw null; }
        [System.Security.SecurityCriticalAttribute]
        protected override void Reset(System.Configuration.ConfigurationElement parentElement) { }
        protected override bool SerializeElement(System.Xml.XmlWriter writer, bool serializeCollectionKey) { throw null; }
    }
    public sealed partial class ServiceModelSectionGroup : System.Configuration.ConfigurationSectionGroup
    {
        public ServiceModelSectionGroup() { }
        public System.ServiceModel.Configuration.BehaviorsSection Behaviors { get { throw null; } }
        public System.ServiceModel.Configuration.BindingsSection Bindings { get { throw null; } }
        public System.ServiceModel.Configuration.ClientSection Client { get { throw null; } }
        public System.ServiceModel.Configuration.ComContractsSection ComContracts { get { throw null; } }
        public System.ServiceModel.Configuration.CommonBehaviorsSection CommonBehaviors { get { throw null; } }
        public System.ServiceModel.Configuration.DiagnosticSection Diagnostic { get { throw null; } }
        public System.ServiceModel.Configuration.ExtensionsSection Extensions { get { throw null; } }
        public System.ServiceModel.Configuration.ProtocolMappingSection ProtocolMapping { get { throw null; } }
        public System.ServiceModel.Configuration.ServiceHostingEnvironmentSection ServiceHostingEnvironment { get { throw null; } }
        public System.ServiceModel.Configuration.ServicesSection Services { get { throw null; } }
        public System.ServiceModel.Configuration.StandardEndpointsSection StandardEndpoints { get { throw null; } }
        public static System.ServiceModel.Configuration.ServiceModelSectionGroup GetSectionGroup(System.Configuration.Configuration config) { throw null; }
    }
    public sealed partial class ServicePrincipalNameElement : System.Configuration.ConfigurationElement
    {
        public ServicePrincipalNameElement() { }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("value", DefaultValue="")]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string Value { get { throw null; } set { } }
    }
    public sealed partial class ServiceSecurityAuditElement : System.ServiceModel.Configuration.BehaviorExtensionElement
    {
        public ServiceSecurityAuditElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("auditLogLocation", DefaultValue=System.ServiceModel.AuditLogLocation.Default)]
        public System.ServiceModel.AuditLogLocation AuditLogLocation { get { throw null; } set { } }
        public override System.Type BehaviorType { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("messageAuthenticationAuditLevel", DefaultValue=System.ServiceModel.AuditLevel.None)]
        public System.ServiceModel.AuditLevel MessageAuthenticationAuditLevel { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("serviceAuthorizationAuditLevel", DefaultValue=System.ServiceModel.AuditLevel.None)]
        public System.ServiceModel.AuditLevel ServiceAuthorizationAuditLevel { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("suppressAuditFailure", DefaultValue=true)]
        public bool SuppressAuditFailure { get { throw null; } set { } }
        public override void CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement from) { }
        protected internal override object CreateBehavior() { throw null; }
    }
    public sealed partial class ServicesSection : System.Configuration.ConfigurationSection
    {
        public ServicesSection() { }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("", Options=System.Configuration.ConfigurationPropertyOptions.IsDefaultCollection)]
        public System.ServiceModel.Configuration.ServiceElementCollection Services { get { throw null; } }
        protected override void PostDeserialize() { }
        [System.Security.SecurityCriticalAttribute]
        protected override void Reset(System.Configuration.ConfigurationElement parentElement) { }
    }
    public sealed partial class ServiceThrottlingElement : System.ServiceModel.Configuration.BehaviorExtensionElement
    {
        public ServiceThrottlingElement() { }
        public override System.Type BehaviorType { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("maxConcurrentCalls", DefaultValue=16)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=1)]
        public int MaxConcurrentCalls { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("maxConcurrentInstances", DefaultValue=116)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=1)]
        public int MaxConcurrentInstances { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("maxConcurrentSessions", DefaultValue=100)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=1)]
        public int MaxConcurrentSessions { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        public override void CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement from) { }
        protected internal override object CreateBehavior() { throw null; }
    }
    public sealed partial class ServiceTimeoutsElement : System.ServiceModel.Configuration.BehaviorExtensionElement
    {
        public ServiceTimeoutsElement() { }
        public override System.Type BehaviorType { get { throw null; } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("transactionTimeout", DefaultValue="00:00:00")]
        public System.TimeSpan TransactionTimeout { get { throw null; } set { } }
        public override void CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement from) { }
        protected internal override object CreateBehavior() { throw null; }
    }
    public sealed partial class SslStreamSecurityElement : System.ServiceModel.Configuration.BindingElementExtensionElement
    {
        public SslStreamSecurityElement() { }
        public override System.Type BindingElementType { get { throw null; } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("requireClientCertificate", DefaultValue=false)]
        public bool RequireClientCertificate { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("sslProtocols", DefaultValue=System.Security.Authentication.SslProtocols.Tls | System.Security.Authentication.SslProtocols.Tls11 | System.Security.Authentication.SslProtocols.Tls12)]
        public System.Security.Authentication.SslProtocols SslProtocols { get { throw null; } }
        public override void ApplyConfiguration(System.ServiceModel.Channels.BindingElement bindingElement) { }
        public override void CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement from) { }
        protected internal override System.ServiceModel.Channels.BindingElement CreateBindingElement() { throw null; }
        protected internal override void InitializeFrom(System.ServiceModel.Channels.BindingElement bindingElement) { }
    }
    public partial class StandardBindingCollectionElement<TStandardBinding, TBindingConfiguration> : System.ServiceModel.Configuration.BindingCollectionElement where TStandardBinding : System.ServiceModel.Channels.Binding where TBindingConfiguration : System.ServiceModel.Configuration.StandardBindingElement, new()
    {
        public StandardBindingCollectionElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("", Options=System.Configuration.ConfigurationPropertyOptions.IsDefaultCollection)]
        public System.ServiceModel.Configuration.StandardBindingElementCollection<TBindingConfiguration> Bindings { get { throw null; } }
        public override System.Type BindingType { get { throw null; } }
        public override System.Collections.ObjectModel.ReadOnlyCollection<System.ServiceModel.Configuration.IBindingConfigurationElement> ConfiguredBindings { get { throw null; } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        public override bool ContainsKey(string name) { throw null; }
        protected internal override System.ServiceModel.Channels.Binding GetDefault() { throw null; }
        protected internal override bool TryAdd(string name, System.ServiceModel.Channels.Binding binding, System.Configuration.Configuration config) { throw null; }
    }
    public abstract partial class StandardBindingElement : System.ServiceModel.Configuration.ServiceModelConfigurationElement, System.ServiceModel.Configuration.IBindingConfigurationElement
    {
        protected StandardBindingElement() { }
        protected StandardBindingElement(string name) { }
        protected abstract System.Type BindingElementType { get; }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("closeTimeout", DefaultValue="00:01:00")]
        public System.TimeSpan CloseTimeout { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("name", Options=System.Configuration.ConfigurationPropertyOptions.IsKey)]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string Name { get { throw null; } set { } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("openTimeout", DefaultValue="00:01:00")]
        public System.TimeSpan OpenTimeout { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("receiveTimeout", DefaultValue="00:10:00")]
        public System.TimeSpan ReceiveTimeout { get { throw null; } set { } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("sendTimeout", DefaultValue="00:01:00")]
        public System.TimeSpan SendTimeout { get { throw null; } set { } }
        public void ApplyConfiguration(System.ServiceModel.Channels.Binding binding) { }
        protected internal virtual void InitializeFrom(System.ServiceModel.Channels.Binding binding) { }
        protected abstract void OnApplyConfiguration(System.ServiceModel.Channels.Binding binding);
        [System.Security.SecurityCriticalAttribute]
        protected override void Reset(System.Configuration.ConfigurationElement parentElement) { }
    }
    public sealed partial class StandardBindingElementCollection<TBindingConfiguration> : System.ServiceModel.Configuration.ServiceModelEnhancedConfigurationElementCollection<TBindingConfiguration> where TBindingConfiguration : System.ServiceModel.Configuration.StandardBindingElement, new()
    {
        public StandardBindingElementCollection() { }
        protected override object GetElementKey(System.Configuration.ConfigurationElement element) { throw null; }
    }
    public sealed partial class StandardBindingOptionalReliableSessionElement : System.ServiceModel.Configuration.StandardBindingReliableSessionElement
    {
        public StandardBindingOptionalReliableSessionElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("enabled", DefaultValue=false)]
        public bool Enabled { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        public void ApplyConfiguration(System.ServiceModel.OptionalReliableSession optionalReliableSession) { }
        public void InitializeFrom(System.ServiceModel.OptionalReliableSession optionalReliableSession) { }
    }
    public partial class StandardBindingReliableSessionElement : System.ServiceModel.Configuration.ServiceModelConfigurationElement
    {
        public StandardBindingReliableSessionElement() { }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("inactivityTimeout", DefaultValue="00:10:00")]
        public System.TimeSpan InactivityTimeout { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("ordered", DefaultValue=true)]
        public bool Ordered { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        public void ApplyConfiguration(System.ServiceModel.ReliableSession reliableSession) { }
        public void InitializeFrom(System.ServiceModel.ReliableSession reliableSession) { }
    }
    public partial class StandardEndpointCollectionElement<TStandardEndpoint, TEndpointConfiguration> : System.ServiceModel.Configuration.EndpointCollectionElement where TStandardEndpoint : System.ServiceModel.Description.ServiceEndpoint where TEndpointConfiguration : System.ServiceModel.Configuration.StandardEndpointElement, new()
    {
        public StandardEndpointCollectionElement() { }
        public override System.Collections.ObjectModel.ReadOnlyCollection<System.ServiceModel.Configuration.StandardEndpointElement> ConfiguredEndpoints { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("", Options=System.Configuration.ConfigurationPropertyOptions.IsDefaultCollection)]
        public System.ServiceModel.Configuration.StandardEndpointElementCollection<TEndpointConfiguration> Endpoints { get { throw null; } }
        public override System.Type EndpointType { get { throw null; } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        public override bool ContainsKey(string name) { throw null; }
        protected internal override System.ServiceModel.Configuration.StandardEndpointElement GetDefaultStandardEndpointElement() { throw null; }
        protected internal override bool TryAdd(string name, System.ServiceModel.Description.ServiceEndpoint endpoint, System.Configuration.Configuration config) { throw null; }
    }
    public abstract partial class StandardEndpointElement : System.Configuration.ConfigurationElement
    {
        protected StandardEndpointElement() { }
        protected internal abstract System.Type EndpointType { get; }
        [System.Configuration.ConfigurationPropertyAttribute("name", Options=System.Configuration.ConfigurationPropertyOptions.IsKey)]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string Name { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        public void ApplyConfiguration(System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Configuration.ChannelEndpointElement channelEndpointElement) { }
        public void ApplyConfiguration(System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Configuration.ServiceEndpointElement serviceEndpointElement) { }
        protected internal abstract System.ServiceModel.Description.ServiceEndpoint CreateServiceEndpoint(System.ServiceModel.Description.ContractDescription contractDescription);
        public void InitializeAndValidate(System.ServiceModel.Configuration.ChannelEndpointElement channelEndpointElement) { }
        public void InitializeAndValidate(System.ServiceModel.Configuration.ServiceEndpointElement serviceEndpointElement) { }
        protected internal virtual void InitializeFrom(System.ServiceModel.Description.ServiceEndpoint endpoint) { }
        protected abstract void OnApplyConfiguration(System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Configuration.ChannelEndpointElement channelEndpointElement);
        protected abstract void OnApplyConfiguration(System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Configuration.ServiceEndpointElement serviceEndpointElement);
        protected abstract void OnInitializeAndValidate(System.ServiceModel.Configuration.ChannelEndpointElement channelEndpointElement);
        protected abstract void OnInitializeAndValidate(System.ServiceModel.Configuration.ServiceEndpointElement serviceEndpointElement);
        [System.Security.SecurityCriticalAttribute]
        protected override void Reset(System.Configuration.ConfigurationElement parentElement) { }
    }
    public sealed partial class StandardEndpointElementCollection<TEndpointConfiguration> : System.ServiceModel.Configuration.ServiceModelEnhancedConfigurationElementCollection<TEndpointConfiguration> where TEndpointConfiguration : System.ServiceModel.Configuration.StandardEndpointElement, new()
    {
        public StandardEndpointElementCollection() { }
        protected override object GetElementKey(System.Configuration.ConfigurationElement element) { throw null; }
    }
    public sealed partial class StandardEndpointsSection : System.Configuration.ConfigurationSection
    {
        public StandardEndpointsSection() { }
        public System.Collections.Generic.List<System.ServiceModel.Configuration.EndpointCollectionElement> EndpointCollections { get { throw null; } }
        public new System.ServiceModel.Configuration.EndpointCollectionElement this[string endpoint] { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("mexEndpoint", Options=System.Configuration.ConfigurationPropertyOptions.None)]
        public System.ServiceModel.Configuration.ServiceMetadataEndpointCollectionElement MexEndpoint { get { throw null; } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        public static System.ServiceModel.Configuration.StandardEndpointsSection GetSection(System.Configuration.Configuration config) { throw null; }
        protected override bool OnDeserializeUnrecognizedElement(string elementName, System.Xml.XmlReader reader) { throw null; }
    }
    public sealed partial class SynchronousReceiveElement : System.ServiceModel.Configuration.BehaviorExtensionElement
    {
        public SynchronousReceiveElement() { }
        public override System.Type BehaviorType { get { throw null; } }
        protected internal override object CreateBehavior() { throw null; }
    }
    public sealed partial class TcpConnectionPoolSettingsElement : System.ServiceModel.Configuration.ServiceModelConfigurationElement
    {
        public TcpConnectionPoolSettingsElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("groupName", DefaultValue="default")]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string GroupName { get { throw null; } set { } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("idleTimeout", DefaultValue="00:02:00")]
        public System.TimeSpan IdleTimeout { get { throw null; } set { } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("leaseTimeout", DefaultValue="00:05:00")]
        public System.TimeSpan LeaseTimeout { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("maxOutboundConnectionsPerEndpoint", DefaultValue=10)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=0)]
        public int MaxOutboundConnectionsPerEndpoint { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
    }
    public sealed partial class TcpTransportElement : System.ServiceModel.Configuration.ConnectionOrientedTransportElement
    {
        public TcpTransportElement() { }
        public override System.Type BindingElementType { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("connectionPoolSettings")]
        public System.ServiceModel.Configuration.TcpConnectionPoolSettingsElement ConnectionPoolSettings { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("extendedProtectionPolicy")]
        public System.Security.Authentication.ExtendedProtection.Configuration.ExtendedProtectionPolicyElement ExtendedProtectionPolicy { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("listenBacklog", DefaultValue=0)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=0)]
        public int ListenBacklog { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("portSharingEnabled", DefaultValue=false)]
        public bool PortSharingEnabled { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("teredoEnabled", DefaultValue=false)]
        public bool TeredoEnabled { get { throw null; } set { } }
        public override void ApplyConfiguration(System.ServiceModel.Channels.BindingElement bindingElement) { }
        public override void CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement from) { }
        protected override System.ServiceModel.Channels.TransportBindingElement CreateDefaultBindingElement() { throw null; }
        protected internal override void InitializeFrom(System.ServiceModel.Channels.BindingElement bindingElement) { }
    }
    public sealed partial class TcpTransportSecurityElement : System.ServiceModel.Configuration.ServiceModelConfigurationElement
    {
        public TcpTransportSecurityElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("clientCredentialType", DefaultValue=System.ServiceModel.TcpClientCredentialType.Windows)]
        public System.ServiceModel.TcpClientCredentialType ClientCredentialType { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("extendedProtectionPolicy")]
        public System.Security.Authentication.ExtendedProtection.Configuration.ExtendedProtectionPolicyElement ExtendedProtectionPolicy { get { throw null; } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("protectionLevel", DefaultValue=System.Net.Security.ProtectionLevel.EncryptAndSign)]
        public System.Net.Security.ProtectionLevel ProtectionLevel { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("sslProtocols", DefaultValue=System.Security.Authentication.SslProtocols.Tls | System.Security.Authentication.SslProtocols.Tls11 | System.Security.Authentication.SslProtocols.Tls12)]
        public System.Security.Authentication.SslProtocols SslProtocols { get { throw null; } }
    }
    public sealed partial class TextMessageEncodingElement : System.ServiceModel.Configuration.BindingElementExtensionElement
    {
        public TextMessageEncodingElement() { }
        public override System.Type BindingElementType { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("maxReadPoolSize", DefaultValue=64)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=1)]
        public int MaxReadPoolSize { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("maxWritePoolSize", DefaultValue=16)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=1)]
        public int MaxWritePoolSize { get { throw null; } set { } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.MessageVersionConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("messageVersion", DefaultValue="Soap12WSAddressing10")]
        public System.ServiceModel.Channels.MessageVersion MessageVersion { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("readerQuotas")]
        public System.ServiceModel.Configuration.XmlDictionaryReaderQuotasElement ReaderQuotas { get { throw null; } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.EncodingConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("writeEncoding", DefaultValue="utf-8")]
        public System.Text.Encoding WriteEncoding { get { throw null; } set { } }
        public override void ApplyConfiguration(System.ServiceModel.Channels.BindingElement bindingElement) { }
        public override void CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement from) { }
        protected internal override System.ServiceModel.Channels.BindingElement CreateBindingElement() { throw null; }
        protected internal override void InitializeFrom(System.ServiceModel.Channels.BindingElement bindingElement) { }
    }
    public sealed partial class TransactedBatchingElement : System.ServiceModel.Configuration.BehaviorExtensionElement
    {
        public TransactedBatchingElement() { }
        public override System.Type BehaviorType { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("maxBatchSize", DefaultValue=0)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=0)]
        public int MaxBatchSize { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        public override void CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement from) { }
        protected internal override object CreateBehavior() { throw null; }
    }
    public partial class TransactionFlowElement : System.ServiceModel.Configuration.BindingElementExtensionElement
    {
        public TransactionFlowElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("allowWildcardAction", DefaultValue=false)]
        public bool AllowWildcardAction { get { throw null; } set { } }
        public override System.Type BindingElementType { get { throw null; } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.TransactionProtocolConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("transactionProtocol", DefaultValue="OleTransactions")]
        public System.ServiceModel.TransactionProtocol TransactionProtocol { get { throw null; } set { } }
        public override void ApplyConfiguration(System.ServiceModel.Channels.BindingElement bindingElement) { }
        public override void CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement from) { }
        protected internal override System.ServiceModel.Channels.BindingElement CreateBindingElement() { throw null; }
        protected internal override void InitializeFrom(System.ServiceModel.Channels.BindingElement bindingElement) { }
    }
    public sealed partial class TransportConfigurationTypeElement : System.Configuration.ConfigurationElement
    {
        public TransportConfigurationTypeElement() { }
        public TransportConfigurationTypeElement(string name) { }
        public TransportConfigurationTypeElement(string name, string transportConfigurationTypeName) { }
        [System.Configuration.ConfigurationPropertyAttribute("name", Options=System.Configuration.ConfigurationPropertyOptions.IsKey | System.Configuration.ConfigurationPropertyOptions.IsRequired)]
        [System.Configuration.StringValidatorAttribute(MinLength=1)]
        public string Name { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("transportConfigurationType", Options=System.Configuration.ConfigurationPropertyOptions.IsRequired)]
        [System.Configuration.StringValidatorAttribute(MinLength=1)]
        public string TransportConfigurationType { get { throw null; } set { } }
    }
    [System.Configuration.ConfigurationCollectionAttribute(typeof(System.ServiceModel.Configuration.TransportConfigurationTypeElement))]
    public sealed partial class TransportConfigurationTypeElementCollection : System.ServiceModel.Configuration.ServiceModelConfigurationElementCollection<System.ServiceModel.Configuration.TransportConfigurationTypeElement>
    {
        public TransportConfigurationTypeElementCollection() { }
        protected override object GetElementKey(System.Configuration.ConfigurationElement element) { throw null; }
    }
    public abstract partial class TransportElement : System.ServiceModel.Configuration.BindingElementExtensionElement
    {
        protected TransportElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("manualAddressing", DefaultValue=false)]
        public bool ManualAddressing { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("maxBufferPoolSize", DefaultValue=(long)524288)]
        [System.Configuration.LongValidatorAttribute(MinValue=(long)1)]
        public long MaxBufferPoolSize { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("maxReceivedMessageSize", DefaultValue=(long)65536)]
        [System.Configuration.LongValidatorAttribute(MinValue=(long)1)]
        public long MaxReceivedMessageSize { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        public override void ApplyConfiguration(System.ServiceModel.Channels.BindingElement bindingElement) { }
        public override void CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement from) { }
        protected internal override System.ServiceModel.Channels.BindingElement CreateBindingElement() { throw null; }
        protected abstract System.ServiceModel.Channels.TransportBindingElement CreateDefaultBindingElement();
        protected internal override void InitializeFrom(System.ServiceModel.Channels.BindingElement bindingElement) { }
    }
    public partial class UseManagedPresentationElement : System.ServiceModel.Configuration.BindingElementExtensionElement
    {
        public UseManagedPresentationElement() { }
        public override System.Type BindingElementType { get { throw null; } }
        protected internal override System.ServiceModel.Channels.BindingElement CreateBindingElement() { throw null; }
    }
    public sealed partial class UseRequestHeadersForMetadataAddressElement : System.ServiceModel.Configuration.BehaviorExtensionElement
    {
        public UseRequestHeadersForMetadataAddressElement() { }
        public override System.Type BehaviorType { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("defaultPorts")]
        public System.ServiceModel.Configuration.DefaultPortElementCollection DefaultPorts { get { throw null; } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        public override void CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement from) { }
        protected internal override object CreateBehavior() { throw null; }
    }
    public sealed partial class UserNameServiceElement : System.Configuration.ConfigurationElement
    {
        public UserNameServiceElement() { }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("cachedLogonTokenLifetime", DefaultValue="00:15:00")]
        public System.TimeSpan CachedLogonTokenLifetime { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("cacheLogonTokens", DefaultValue=false)]
        public bool CacheLogonTokens { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("customUserNamePasswordValidatorType", DefaultValue="")]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string CustomUserNamePasswordValidatorType { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("includeWindowsGroups", DefaultValue=true)]
        public bool IncludeWindowsGroups { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("maxCachedLogonTokens", DefaultValue=128)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=1)]
        public int MaxCachedLogonTokens { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("membershipProviderName", DefaultValue="")]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string MembershipProviderName { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("userNamePasswordValidationMode", DefaultValue=System.ServiceModel.Security.UserNamePasswordValidationMode.Windows)]
        public System.ServiceModel.Security.UserNamePasswordValidationMode UserNamePasswordValidationMode { get { throw null; } set { } }
        public void Copy(System.ServiceModel.Configuration.UserNameServiceElement from) { }
    }
    public sealed partial class UserPrincipalNameElement : System.Configuration.ConfigurationElement
    {
        public UserPrincipalNameElement() { }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("value", DefaultValue="")]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string Value { get { throw null; } set { } }
    }
    public partial class WebSocketTransportSettingsElement : System.ServiceModel.Configuration.ServiceModelConfigurationElement
    {
        public WebSocketTransportSettingsElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("createNotificationOnConnection", DefaultValue=false)]
        public bool CreateNotificationOnConnection { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("disablePayloadMasking", DefaultValue=false)]
        public bool DisablePayloadMasking { get { throw null; } set { } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("keepAliveInterval", DefaultValue="00:00:00")]
        public System.TimeSpan KeepAliveInterval { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("maxPendingConnections", DefaultValue=0)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=0)]
        public int MaxPendingConnections { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("subProtocol", DefaultValue=null)]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public virtual string SubProtocol { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("transportUsage", DefaultValue=System.ServiceModel.Channels.WebSocketTransportUsage.Never)]
        public virtual System.ServiceModel.Channels.WebSocketTransportUsage TransportUsage { get { throw null; } set { } }
        public void ApplyConfiguration(System.ServiceModel.Channels.WebSocketTransportSettings settings) { }
        public void InitializeFrom(System.ServiceModel.Channels.WebSocketTransportSettings settings) { }
    }
    public sealed partial class WindowsClientElement : System.Configuration.ConfigurationElement
    {
        public WindowsClientElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("allowedImpersonationLevel", DefaultValue=System.Security.Principal.TokenImpersonationLevel.Identification)]
        public System.Security.Principal.TokenImpersonationLevel AllowedImpersonationLevel { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("allowNtlm", DefaultValue=true)]
        public bool AllowNtlm { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        public void Copy(System.ServiceModel.Configuration.WindowsClientElement from) { }
    }
    public sealed partial class WindowsServiceElement : System.Configuration.ConfigurationElement
    {
        public WindowsServiceElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("allowAnonymousLogons", DefaultValue=false)]
        public bool AllowAnonymousLogons { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("includeWindowsGroups", DefaultValue=true)]
        public bool IncludeWindowsGroups { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        public void Copy(System.ServiceModel.Configuration.WindowsServiceElement from) { }
    }
    public sealed partial class WindowsStreamSecurityElement : System.ServiceModel.Configuration.BindingElementExtensionElement
    {
        public WindowsStreamSecurityElement() { }
        public override System.Type BindingElementType { get { throw null; } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("protectionLevel", DefaultValue=System.Net.Security.ProtectionLevel.EncryptAndSign)]
        public System.Net.Security.ProtectionLevel ProtectionLevel { get { throw null; } set { } }
        public override void ApplyConfiguration(System.ServiceModel.Channels.BindingElement bindingElement) { }
        public override void CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement from) { }
        protected internal override System.ServiceModel.Channels.BindingElement CreateBindingElement() { throw null; }
        protected internal override void InitializeFrom(System.ServiceModel.Channels.BindingElement bindingElement) { }
    }
    public partial class WS2007FederationHttpBindingCollectionElement : System.ServiceModel.Configuration.StandardBindingCollectionElement<System.ServiceModel.WS2007FederationHttpBinding, System.ServiceModel.Configuration.WS2007FederationHttpBindingElement>
    {
        public WS2007FederationHttpBindingCollectionElement() { }
    }
    public partial class WS2007FederationHttpBindingElement : System.ServiceModel.Configuration.WSFederationHttpBindingElement
    {
        public WS2007FederationHttpBindingElement() { }
        public WS2007FederationHttpBindingElement(string name) { }
        protected override System.Type BindingElementType { get { throw null; } }
    }
    public partial class WS2007HttpBindingCollectionElement : System.ServiceModel.Configuration.StandardBindingCollectionElement<System.ServiceModel.WS2007HttpBinding, System.ServiceModel.Configuration.WS2007HttpBindingElement>
    {
        public WS2007HttpBindingCollectionElement() { }
    }
    public partial class WS2007HttpBindingElement : System.ServiceModel.Configuration.WSHttpBindingElement
    {
        public WS2007HttpBindingElement() { }
        public WS2007HttpBindingElement(string name) { }
        protected override System.Type BindingElementType { get { throw null; } }
    }
    public sealed partial class WsdlImporterElement : System.Configuration.ConfigurationElement
    {
        public WsdlImporterElement() { }
        public WsdlImporterElement(string type) { }
        public WsdlImporterElement(System.Type type) { }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("type", Options=System.Configuration.ConfigurationPropertyOptions.IsKey | System.Configuration.ConfigurationPropertyOptions.IsRequired)]
        [System.Configuration.StringValidatorAttribute(MinLength=1)]
        public string Type { get { throw null; } set { } }
    }
    [System.Configuration.ConfigurationCollectionAttribute(typeof(System.ServiceModel.Configuration.WsdlImporterElement), AddItemName="extension")]
    public sealed partial class WsdlImporterElementCollection : System.ServiceModel.Configuration.ServiceModelEnhancedConfigurationElementCollection<System.ServiceModel.Configuration.WsdlImporterElement>
    {
        public WsdlImporterElementCollection() { }
        protected override object GetElementKey(System.Configuration.ConfigurationElement element) { throw null; }
    }
    public partial class WSDualHttpBindingCollectionElement : System.ServiceModel.Configuration.StandardBindingCollectionElement<System.ServiceModel.WSDualHttpBinding, System.ServiceModel.Configuration.WSDualHttpBindingElement>
    {
        public WSDualHttpBindingCollectionElement() { }
    }
    public partial class WSDualHttpBindingElement : System.ServiceModel.Configuration.StandardBindingElement
    {
        public WSDualHttpBindingElement() { }
        public WSDualHttpBindingElement(string name) { }
        protected override System.Type BindingElementType { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("bypassProxyOnLocal", DefaultValue=false)]
        public bool BypassProxyOnLocal { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("clientBaseAddress", DefaultValue=null)]
        public System.Uri ClientBaseAddress { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("hostNameComparisonMode", DefaultValue=System.ServiceModel.HostNameComparisonMode.StrongWildcard)]
        public System.ServiceModel.HostNameComparisonMode HostNameComparisonMode { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("maxBufferPoolSize", DefaultValue=(long)524288)]
        [System.Configuration.LongValidatorAttribute(MinValue=(long)0)]
        public long MaxBufferPoolSize { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("maxReceivedMessageSize", DefaultValue=(long)65536)]
        [System.Configuration.LongValidatorAttribute(MinValue=(long)1)]
        public long MaxReceivedMessageSize { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("messageEncoding", DefaultValue=System.ServiceModel.WSMessageEncoding.Text)]
        public System.ServiceModel.WSMessageEncoding MessageEncoding { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("proxyAddress", DefaultValue=null)]
        public System.Uri ProxyAddress { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("readerQuotas")]
        public System.ServiceModel.Configuration.XmlDictionaryReaderQuotasElement ReaderQuotas { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("reliableSession")]
        public System.ServiceModel.Configuration.StandardBindingReliableSessionElement ReliableSession { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("security")]
        public System.ServiceModel.Configuration.WSDualHttpSecurityElement Security { get { throw null; } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.EncodingConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("textEncoding", DefaultValue="utf-8")]
        public System.Text.Encoding TextEncoding { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("transactionFlow", DefaultValue=false)]
        public bool TransactionFlow { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("useDefaultWebProxy", DefaultValue=true)]
        public bool UseDefaultWebProxy { get { throw null; } set { } }
        protected internal override void InitializeFrom(System.ServiceModel.Channels.Binding binding) { }
        protected override void OnApplyConfiguration(System.ServiceModel.Channels.Binding binding) { }
    }
    public sealed partial class WSDualHttpSecurityElement : System.ServiceModel.Configuration.ServiceModelConfigurationElement
    {
        public WSDualHttpSecurityElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("message")]
        public System.ServiceModel.Configuration.MessageSecurityOverHttpElement Message { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("mode", DefaultValue=System.ServiceModel.WSDualHttpSecurityMode.Message)]
        public System.ServiceModel.WSDualHttpSecurityMode Mode { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
    }
    public partial class WSFederationHttpBindingCollectionElement : System.ServiceModel.Configuration.StandardBindingCollectionElement<System.ServiceModel.WSFederationHttpBinding, System.ServiceModel.Configuration.WSFederationHttpBindingElement>
    {
        public WSFederationHttpBindingCollectionElement() { }
    }
    public partial class WSFederationHttpBindingElement : System.ServiceModel.Configuration.WSHttpBindingBaseElement
    {
        public WSFederationHttpBindingElement() { }
        public WSFederationHttpBindingElement(string name) { }
        protected override System.Type BindingElementType { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("privacyNoticeAt", DefaultValue=null)]
        public System.Uri PrivacyNoticeAt { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("privacyNoticeVersion", DefaultValue=0)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=0)]
        public int PrivacyNoticeVersion { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("security")]
        public System.ServiceModel.Configuration.WSFederationHttpSecurityElement Security { get { throw null; } }
        protected internal override void InitializeFrom(System.ServiceModel.Channels.Binding binding) { }
        protected override void OnApplyConfiguration(System.ServiceModel.Channels.Binding binding) { }
    }
    public sealed partial class WSFederationHttpSecurityElement : System.ServiceModel.Configuration.ServiceModelConfigurationElement
    {
        public WSFederationHttpSecurityElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("message")]
        public System.ServiceModel.Configuration.FederatedMessageSecurityOverHttpElement Message { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("mode", DefaultValue=System.ServiceModel.WSFederationHttpSecurityMode.Message)]
        public System.ServiceModel.WSFederationHttpSecurityMode Mode { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
    }
    public abstract partial class WSHttpBindingBaseElement : System.ServiceModel.Configuration.StandardBindingElement
    {
        protected WSHttpBindingBaseElement() { }
        protected WSHttpBindingBaseElement(string name) { }
        [System.Configuration.ConfigurationPropertyAttribute("bypassProxyOnLocal", DefaultValue=false)]
        public bool BypassProxyOnLocal { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("hostNameComparisonMode", DefaultValue=System.ServiceModel.HostNameComparisonMode.StrongWildcard)]
        public System.ServiceModel.HostNameComparisonMode HostNameComparisonMode { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("maxBufferPoolSize", DefaultValue=(long)524288)]
        [System.Configuration.LongValidatorAttribute(MinValue=(long)0)]
        public long MaxBufferPoolSize { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("maxReceivedMessageSize", DefaultValue=(long)65536)]
        [System.Configuration.LongValidatorAttribute(MinValue=(long)1)]
        public long MaxReceivedMessageSize { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("messageEncoding", DefaultValue=System.ServiceModel.WSMessageEncoding.Text)]
        public System.ServiceModel.WSMessageEncoding MessageEncoding { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("proxyAddress", DefaultValue=null)]
        public System.Uri ProxyAddress { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("readerQuotas")]
        public System.ServiceModel.Configuration.XmlDictionaryReaderQuotasElement ReaderQuotas { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("reliableSession")]
        public System.ServiceModel.Configuration.StandardBindingOptionalReliableSessionElement ReliableSession { get { throw null; } }
        [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.EncodingConverter")]
        [System.Configuration.ConfigurationPropertyAttribute("textEncoding", DefaultValue="utf-8")]
        public System.Text.Encoding TextEncoding { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("transactionFlow", DefaultValue=false)]
        public bool TransactionFlow { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("useDefaultWebProxy", DefaultValue=true)]
        public bool UseDefaultWebProxy { get { throw null; } set { } }
        protected internal override void InitializeFrom(System.ServiceModel.Channels.Binding binding) { }
        protected override void OnApplyConfiguration(System.ServiceModel.Channels.Binding binding) { }
    }
    public partial class WSHttpBindingCollectionElement : System.ServiceModel.Configuration.StandardBindingCollectionElement<System.ServiceModel.WSHttpBinding, System.ServiceModel.Configuration.WSHttpBindingElement>
    {
        public WSHttpBindingCollectionElement() { }
    }
    public partial class WSHttpBindingElement : System.ServiceModel.Configuration.WSHttpBindingBaseElement
    {
        public WSHttpBindingElement() { }
        public WSHttpBindingElement(string name) { }
        [System.Configuration.ConfigurationPropertyAttribute("allowCookies", DefaultValue=false)]
        public bool AllowCookies { get { throw null; } set { } }
        protected override System.Type BindingElementType { get { throw null; } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("security")]
        public System.ServiceModel.Configuration.WSHttpSecurityElement Security { get { throw null; } }
        protected internal override void InitializeFrom(System.ServiceModel.Channels.Binding binding) { }
        protected override void OnApplyConfiguration(System.ServiceModel.Channels.Binding binding) { }
    }
    [System.Runtime.CompilerServices.TypeForwardedFromAttribute("System.WorkflowServices, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
    public partial class WSHttpContextBindingCollectionElement : System.ServiceModel.Configuration.StandardBindingCollectionElement<System.ServiceModel.WSHttpContextBinding, System.ServiceModel.Configuration.WSHttpContextBindingElement>
    {
        public WSHttpContextBindingCollectionElement() { }
    }
    [System.Runtime.CompilerServices.TypeForwardedFromAttribute("System.WorkflowServices, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
    public partial class WSHttpContextBindingElement : System.ServiceModel.Configuration.WSHttpBindingElement
    {
        public WSHttpContextBindingElement() { }
        public WSHttpContextBindingElement(string name) { }
        protected override System.Type BindingElementType { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("clientCallbackAddress", DefaultValue=null)]
        public System.Uri ClientCallbackAddress { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("contextManagementEnabled", DefaultValue=true)]
        public bool ContextManagementEnabled { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("contextProtectionLevel", DefaultValue=System.Net.Security.ProtectionLevel.Sign)]
        public System.Net.Security.ProtectionLevel ContextProtectionLevel { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        protected internal override void InitializeFrom(System.ServiceModel.Channels.Binding binding) { }
        protected override void OnApplyConfiguration(System.ServiceModel.Channels.Binding binding) { }
    }
    public sealed partial class WSHttpSecurityElement : System.ServiceModel.Configuration.ServiceModelConfigurationElement
    {
        public WSHttpSecurityElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("message")]
        public System.ServiceModel.Configuration.NonDualMessageSecurityOverHttpElement Message { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("mode", DefaultValue=System.ServiceModel.SecurityMode.Message)]
        public System.ServiceModel.SecurityMode Mode { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("transport")]
        public System.ServiceModel.Configuration.WSHttpTransportSecurityElement Transport { get { throw null; } }
    }
    public sealed partial class WSHttpTransportSecurityElement : System.ServiceModel.Configuration.ServiceModelConfigurationElement
    {
        public WSHttpTransportSecurityElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("clientCredentialType", DefaultValue=System.ServiceModel.HttpClientCredentialType.Windows)]
        public System.ServiceModel.HttpClientCredentialType ClientCredentialType { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("extendedProtectionPolicy")]
        public System.Security.Authentication.ExtendedProtection.Configuration.ExtendedProtectionPolicyElement ExtendedProtectionPolicy { get { throw null; } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("proxyCredentialType", DefaultValue=System.ServiceModel.HttpProxyCredentialType.None)]
        public System.ServiceModel.HttpProxyCredentialType ProxyCredentialType { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("realm", DefaultValue="")]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string Realm { get { throw null; } set { } }
    }
    public sealed partial class X509CertificateTrustedIssuerElement : System.Configuration.ConfigurationElement
    {
        public X509CertificateTrustedIssuerElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("findValue", DefaultValue="", Options=System.Configuration.ConfigurationPropertyOptions.IsKey)]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string FindValue { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("storeLocation", DefaultValue=System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine, Options=System.Configuration.ConfigurationPropertyOptions.IsKey)]
        public System.Security.Cryptography.X509Certificates.StoreLocation StoreLocation { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("storeName", DefaultValue=System.Security.Cryptography.X509Certificates.StoreName.My, Options=System.Configuration.ConfigurationPropertyOptions.IsKey)]
        public System.Security.Cryptography.X509Certificates.StoreName StoreName { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("x509FindType", DefaultValue=System.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectDistinguishedName, Options=System.Configuration.ConfigurationPropertyOptions.IsKey)]
        public System.Security.Cryptography.X509Certificates.X509FindType X509FindType { get { throw null; } set { } }
        public void Copy(System.ServiceModel.Configuration.X509CertificateTrustedIssuerElement from) { }
    }
    [System.Configuration.ConfigurationCollectionAttribute(typeof(System.ServiceModel.Configuration.X509CertificateTrustedIssuerElement))]
    public sealed partial class X509CertificateTrustedIssuerElementCollection : System.ServiceModel.Configuration.ServiceModelConfigurationElementCollection<System.ServiceModel.Configuration.X509CertificateTrustedIssuerElement>
    {
        public X509CertificateTrustedIssuerElementCollection() { }
        protected override object GetElementKey(System.Configuration.ConfigurationElement element) { throw null; }
    }
    public sealed partial class X509ClientCertificateAuthenticationElement : System.Configuration.ConfigurationElement
    {
        public X509ClientCertificateAuthenticationElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("certificateValidationMode", DefaultValue=System.ServiceModel.Security.X509CertificateValidationMode.ChainTrust)]
        public System.ServiceModel.Security.X509CertificateValidationMode CertificateValidationMode { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("customCertificateValidatorType", DefaultValue="")]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string CustomCertificateValidatorType { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("includeWindowsGroups", DefaultValue=true)]
        public bool IncludeWindowsGroups { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("mapClientCertificateToWindowsAccount", DefaultValue=false)]
        public bool MapClientCertificateToWindowsAccount { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("revocationMode", DefaultValue=System.Security.Cryptography.X509Certificates.X509RevocationMode.Online)]
        public System.Security.Cryptography.X509Certificates.X509RevocationMode RevocationMode { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("trustedStoreLocation", DefaultValue=System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine)]
        public System.Security.Cryptography.X509Certificates.StoreLocation TrustedStoreLocation { get { throw null; } set { } }
        public void Copy(System.ServiceModel.Configuration.X509ClientCertificateAuthenticationElement from) { }
    }
    public sealed partial class X509ClientCertificateCredentialsElement : System.Configuration.ConfigurationElement
    {
        public X509ClientCertificateCredentialsElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("findValue", DefaultValue="")]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string FindValue { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("storeLocation", DefaultValue=System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine)]
        public System.Security.Cryptography.X509Certificates.StoreLocation StoreLocation { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("storeName", DefaultValue=System.Security.Cryptography.X509Certificates.StoreName.My)]
        public System.Security.Cryptography.X509Certificates.StoreName StoreName { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("x509FindType", DefaultValue=System.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectDistinguishedName)]
        public System.Security.Cryptography.X509Certificates.X509FindType X509FindType { get { throw null; } set { } }
        public void Copy(System.ServiceModel.Configuration.X509ClientCertificateCredentialsElement from) { }
    }
    public sealed partial class X509DefaultServiceCertificateElement : System.Configuration.ConfigurationElement
    {
        public X509DefaultServiceCertificateElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("findValue", DefaultValue="")]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string FindValue { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("storeLocation", DefaultValue=System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser)]
        public System.Security.Cryptography.X509Certificates.StoreLocation StoreLocation { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("storeName", DefaultValue=System.Security.Cryptography.X509Certificates.StoreName.My)]
        public System.Security.Cryptography.X509Certificates.StoreName StoreName { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("x509FindType", DefaultValue=System.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectDistinguishedName)]
        public System.Security.Cryptography.X509Certificates.X509FindType X509FindType { get { throw null; } set { } }
        public void Copy(System.ServiceModel.Configuration.X509DefaultServiceCertificateElement from) { }
    }
    public sealed partial class X509InitiatorCertificateClientElement : System.Configuration.ConfigurationElement
    {
        public X509InitiatorCertificateClientElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("findValue", DefaultValue="")]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string FindValue { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("storeLocation", DefaultValue=System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser)]
        public System.Security.Cryptography.X509Certificates.StoreLocation StoreLocation { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("storeName", DefaultValue=System.Security.Cryptography.X509Certificates.StoreName.My)]
        public System.Security.Cryptography.X509Certificates.StoreName StoreName { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("x509FindType", DefaultValue=System.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectDistinguishedName)]
        public System.Security.Cryptography.X509Certificates.X509FindType X509FindType { get { throw null; } set { } }
        public void Copy(System.ServiceModel.Configuration.X509InitiatorCertificateClientElement from) { }
    }
    public sealed partial class X509InitiatorCertificateServiceElement : System.Configuration.ConfigurationElement
    {
        public X509InitiatorCertificateServiceElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("authentication")]
        public System.ServiceModel.Configuration.X509ClientCertificateAuthenticationElement Authentication { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("certificate")]
        public System.ServiceModel.Configuration.X509ClientCertificateCredentialsElement Certificate { get { throw null; } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        public void Copy(System.ServiceModel.Configuration.X509InitiatorCertificateServiceElement from) { }
    }
    public sealed partial class X509PeerCertificateAuthenticationElement : System.Configuration.ConfigurationElement
    {
        public X509PeerCertificateAuthenticationElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("certificateValidationMode", DefaultValue=System.ServiceModel.Security.X509CertificateValidationMode.PeerOrChainTrust)]
        public System.ServiceModel.Security.X509CertificateValidationMode CertificateValidationMode { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("customCertificateValidatorType", DefaultValue="")]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string CustomCertificateValidatorType { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("revocationMode", DefaultValue=System.Security.Cryptography.X509Certificates.X509RevocationMode.Online)]
        public System.Security.Cryptography.X509Certificates.X509RevocationMode RevocationMode { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("trustedStoreLocation", DefaultValue=System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser)]
        public System.Security.Cryptography.X509Certificates.StoreLocation TrustedStoreLocation { get { throw null; } set { } }
        public void Copy(System.ServiceModel.Configuration.X509PeerCertificateAuthenticationElement from) { }
    }
    public sealed partial class X509PeerCertificateElement : System.Configuration.ConfigurationElement
    {
        public X509PeerCertificateElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("findValue", DefaultValue="")]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string FindValue { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("storeLocation", DefaultValue=System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser)]
        public System.Security.Cryptography.X509Certificates.StoreLocation StoreLocation { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("storeName", DefaultValue=System.Security.Cryptography.X509Certificates.StoreName.My)]
        public System.Security.Cryptography.X509Certificates.StoreName StoreName { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("x509FindType", DefaultValue=System.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectDistinguishedName)]
        public System.Security.Cryptography.X509Certificates.X509FindType X509FindType { get { throw null; } set { } }
        public void Copy(System.ServiceModel.Configuration.X509PeerCertificateElement from) { }
    }
    public sealed partial class X509RecipientCertificateClientElement : System.Configuration.ConfigurationElement
    {
        public X509RecipientCertificateClientElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("authentication")]
        public System.ServiceModel.Configuration.X509ServiceCertificateAuthenticationElement Authentication { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("defaultCertificate")]
        public System.ServiceModel.Configuration.X509DefaultServiceCertificateElement DefaultCertificate { get { throw null; } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("scopedCertificates")]
        public System.ServiceModel.Configuration.X509ScopedServiceCertificateElementCollection ScopedCertificates { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("sslCertificateAuthentication")]
        public System.ServiceModel.Configuration.X509ServiceCertificateAuthenticationElement SslCertificateAuthentication { get { throw null; } }
        public void Copy(System.ServiceModel.Configuration.X509RecipientCertificateClientElement from) { }
    }
    public sealed partial class X509RecipientCertificateServiceElement : System.Configuration.ConfigurationElement
    {
        public X509RecipientCertificateServiceElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("findValue", DefaultValue="")]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string FindValue { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("storeLocation", DefaultValue=System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine)]
        public System.Security.Cryptography.X509Certificates.StoreLocation StoreLocation { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("storeName", DefaultValue=System.Security.Cryptography.X509Certificates.StoreName.My)]
        public System.Security.Cryptography.X509Certificates.StoreName StoreName { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("x509FindType", DefaultValue=System.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectDistinguishedName)]
        public System.Security.Cryptography.X509Certificates.X509FindType X509FindType { get { throw null; } set { } }
        public void Copy(System.ServiceModel.Configuration.X509RecipientCertificateServiceElement from) { }
    }
    public sealed partial class X509ScopedServiceCertificateElement : System.Configuration.ConfigurationElement
    {
        public X509ScopedServiceCertificateElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("findValue", DefaultValue="")]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string FindValue { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("storeLocation", DefaultValue=System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser)]
        public System.Security.Cryptography.X509Certificates.StoreLocation StoreLocation { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("storeName", DefaultValue=System.Security.Cryptography.X509Certificates.StoreName.My)]
        public System.Security.Cryptography.X509Certificates.StoreName StoreName { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("targetUri", DefaultValue=null, Options=System.Configuration.ConfigurationPropertyOptions.IsKey | System.Configuration.ConfigurationPropertyOptions.IsRequired)]
        public System.Uri TargetUri { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("x509FindType", DefaultValue=System.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectDistinguishedName)]
        public System.Security.Cryptography.X509Certificates.X509FindType X509FindType { get { throw null; } set { } }
        public void Copy(System.ServiceModel.Configuration.X509ScopedServiceCertificateElement from) { }
    }
    [System.Configuration.ConfigurationCollectionAttribute(typeof(System.ServiceModel.Configuration.X509ScopedServiceCertificateElement))]
    public sealed partial class X509ScopedServiceCertificateElementCollection : System.ServiceModel.Configuration.ServiceModelConfigurationElementCollection<System.ServiceModel.Configuration.X509ScopedServiceCertificateElement>
    {
        public X509ScopedServiceCertificateElementCollection() { }
        protected override object GetElementKey(System.Configuration.ConfigurationElement element) { throw null; }
    }
    public sealed partial class X509ServiceCertificateAuthenticationElement : System.Configuration.ConfigurationElement
    {
        public X509ServiceCertificateAuthenticationElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("certificateValidationMode", DefaultValue=System.ServiceModel.Security.X509CertificateValidationMode.ChainTrust)]
        public System.ServiceModel.Security.X509CertificateValidationMode CertificateValidationMode { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("customCertificateValidatorType", DefaultValue="")]
        [System.Configuration.StringValidatorAttribute(MinLength=0)]
        public string CustomCertificateValidatorType { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("revocationMode", DefaultValue=System.Security.Cryptography.X509Certificates.X509RevocationMode.Online)]
        public System.Security.Cryptography.X509Certificates.X509RevocationMode RevocationMode { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("trustedStoreLocation", DefaultValue=System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser)]
        public System.Security.Cryptography.X509Certificates.StoreLocation TrustedStoreLocation { get { throw null; } set { } }
        public void Copy(System.ServiceModel.Configuration.X509ServiceCertificateAuthenticationElement from) { }
    }
    public sealed partial class XmlDictionaryReaderQuotasElement : System.ServiceModel.Configuration.ServiceModelConfigurationElement
    {
        public XmlDictionaryReaderQuotasElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("maxArrayLength", DefaultValue=0)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=0)]
        public int MaxArrayLength { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("maxBytesPerRead", DefaultValue=0)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=0)]
        public int MaxBytesPerRead { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("maxDepth", DefaultValue=0)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=0)]
        public int MaxDepth { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("maxNameTableCharCount", DefaultValue=0)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=0)]
        public int MaxNameTableCharCount { get { throw null; } set { } }
        [System.Configuration.ConfigurationPropertyAttribute("maxStringContentLength", DefaultValue=0)]
        [System.Configuration.IntegerValidatorAttribute(MinValue=0)]
        public int MaxStringContentLength { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
    }
    public sealed partial class XmlElementElement : System.Configuration.ConfigurationElement
    {
        public XmlElementElement() { }
        public XmlElementElement(System.Xml.XmlElement element) { }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        [System.Configuration.ConfigurationPropertyAttribute("xmlElement", DefaultValue=null, Options=System.Configuration.ConfigurationPropertyOptions.IsKey)]
        public System.Xml.XmlElement XmlElement { get { throw null; } set { } }
        public void Copy(System.ServiceModel.Configuration.XmlElementElement source) { }
        [System.Security.SecuritySafeCriticalAttribute]
        protected override void DeserializeElement(System.Xml.XmlReader reader, bool serializeCollectionKey) { }
        protected override void PostDeserialize() { }
        protected override bool SerializeToXmlElement(System.Xml.XmlWriter writer, string elementName) { throw null; }
    }
    [System.Configuration.ConfigurationCollectionAttribute(typeof(System.ServiceModel.Configuration.XmlElementElement), AddItemName="xmlElement", CollectionType=System.Configuration.ConfigurationElementCollectionType.BasicMap)]
    public sealed partial class XmlElementElementCollection : System.ServiceModel.Configuration.ServiceModelConfigurationElementCollection<System.ServiceModel.Configuration.XmlElementElement>
    {
        public XmlElementElementCollection() { }
        protected override object GetElementKey(System.Configuration.ConfigurationElement element) { throw null; }
        protected override bool OnDeserializeUnrecognizedElement(string elementName, System.Xml.XmlReader reader) { throw null; }
        protected override void Unmerge(System.Configuration.ConfigurationElement sourceElement, System.Configuration.ConfigurationElement parentElement, System.Configuration.ConfigurationSaveMode saveMode) { }
    }
    public sealed partial class XPathMessageFilterElement : System.Configuration.ConfigurationElement
    {
        public XPathMessageFilterElement() { }
        [System.Configuration.ConfigurationPropertyAttribute("filter", DefaultValue=null, Options=System.Configuration.ConfigurationPropertyOptions.IsKey | System.Configuration.ConfigurationPropertyOptions.IsRequired)]
        public System.ServiceModel.Dispatcher.XPathMessageFilter Filter { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        protected override void DeserializeElement(System.Xml.XmlReader reader, bool serializeCollectionKey) { }
        protected override bool SerializeToXmlElement(System.Xml.XmlWriter writer, string elementName) { throw null; }
    }
    [System.Configuration.ConfigurationCollectionAttribute(typeof(System.ServiceModel.Configuration.XPathMessageFilterElement))]
    public sealed partial class XPathMessageFilterElementCollection : System.ServiceModel.Configuration.ServiceModelConfigurationElementCollection<System.ServiceModel.Configuration.XPathMessageFilterElement>
    {
        public XPathMessageFilterElementCollection() { }
        public override System.ServiceModel.Configuration.XPathMessageFilterElement this[object key] { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
        public override bool ContainsKey(object key) { throw null; }
        protected override object GetElementKey(System.Configuration.ConfigurationElement element) { throw null; }
    }
    public partial class XPathMessageFilterElementComparer : System.Collections.IComparer
    {
        public XPathMessageFilterElementComparer() { }
        int System.Collections.IComparer.Compare(object x, object y) { throw null; }
    }
}
namespace System.ServiceModel.Description
{
    public partial class CallbackDebugBehavior : System.ServiceModel.Description.IEndpointBehavior
    {
        public CallbackDebugBehavior(bool includeExceptionDetailInFaults) { }
        public bool IncludeExceptionDetailInFaults { get { throw null; } set { } }
        void System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Channels.BindingParameterCollection bindingParameters) { }
        void System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Dispatcher.ClientRuntime behavior) { }
        void System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Dispatcher.EndpointDispatcher endpointDispatcher) { }
        void System.ServiceModel.Description.IEndpointBehavior.Validate(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint) { }
    }
    public partial class ClientCredentials : System.ServiceModel.Security.SecurityCredentialsManager, System.ServiceModel.Description.IEndpointBehavior
    {
        public ClientCredentials() { }
        protected ClientCredentials(System.ServiceModel.Description.ClientCredentials other) { }
        public System.ServiceModel.Security.X509CertificateInitiatorClientCredential ClientCertificate { get { throw null; } }
        public System.ServiceModel.Security.HttpDigestClientCredential HttpDigest { get { throw null; } }
        public System.ServiceModel.Security.IssuedTokenClientCredential IssuedToken { get { throw null; } }
        public System.ServiceModel.Security.PeerCredential Peer { get { throw null; } }
        public System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager SecurityTokenHandlerCollectionManager { get { throw null; } set { } }
        public System.ServiceModel.Security.X509CertificateRecipientClientCredential ServiceCertificate { get { throw null; } }
        public bool SupportInteractive { get { throw null; } set { } }
        public bool UseIdentityConfiguration { get { throw null; } set { } }
        public System.ServiceModel.Security.UserNamePasswordClientCredential UserName { get { throw null; } }
        public System.ServiceModel.Security.WindowsClientCredential Windows { get { throw null; } }
        public virtual void ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Dispatcher.ClientRuntime behavior) { }
        public System.ServiceModel.Description.ClientCredentials Clone() { throw null; }
        protected virtual System.ServiceModel.Description.ClientCredentials CloneCore() { throw null; }
        public override System.IdentityModel.Selectors.SecurityTokenManager CreateSecurityTokenManager() { throw null; }
        protected internal virtual System.IdentityModel.Tokens.SecurityToken GetInfoCardSecurityToken(bool requiresInfoCard, System.IdentityModel.Selectors.CardSpacePolicyElement[] chain, System.IdentityModel.Selectors.SecurityTokenSerializer tokenSerializer) { throw null; }
        void System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Channels.BindingParameterCollection bindingParameters) { }
        void System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Dispatcher.EndpointDispatcher endpointDispatcher) { }
        void System.ServiceModel.Description.IEndpointBehavior.Validate(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint) { }
    }
    public partial class ClientViaBehavior : System.ServiceModel.Description.IEndpointBehavior
    {
        public ClientViaBehavior(System.Uri uri) { }
        public System.Uri Uri { get { throw null; } set { } }
        void System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Channels.BindingParameterCollection bindingParameters) { }
        void System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Dispatcher.ClientRuntime behavior) { }
        void System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Dispatcher.EndpointDispatcher endpointDispatcher) { }
        void System.ServiceModel.Description.IEndpointBehavior.Validate(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint) { }
    }
    [System.Diagnostics.DebuggerDisplayAttribute("Name={name}, Namespace={ns}, ContractType={contractType}")]
    public partial class ContractDescription
    {
        public ContractDescription(string name) { }
        public ContractDescription(string name, string ns) { }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public System.Collections.Generic.KeyedByTypeCollection<System.ServiceModel.Description.IContractBehavior> Behaviors { get { throw null; } }
        public System.Type CallbackContractType { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(null)]
        public string ConfigurationName { get { throw null; } set { } }
        public System.Collections.ObjectModel.KeyedCollection<System.Type, System.ServiceModel.Description.IContractBehavior> ContractBehaviors { get { throw null; } }
        public System.Type ContractType { get { throw null; } set { } }
        public bool HasProtectionLevel { get { throw null; } }
        public string Name { get { throw null; } set { } }
        public string Namespace { get { throw null; } set { } }
        public System.ServiceModel.Description.OperationDescriptionCollection Operations { get { throw null; } }
        public System.Net.Security.ProtectionLevel ProtectionLevel { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(System.ServiceModel.SessionMode.Allowed)]
        public System.ServiceModel.SessionMode SessionMode { get { throw null; } set { } }
        public static System.ServiceModel.Description.ContractDescription GetContract(System.Type contractType) { throw null; }
        public static System.ServiceModel.Description.ContractDescription GetContract(System.Type contractType, object serviceImplementation) { throw null; }
        public static System.ServiceModel.Description.ContractDescription GetContract(System.Type contractType, System.Type serviceType) { throw null; }
        public System.Collections.ObjectModel.Collection<System.ServiceModel.Description.ContractDescription> GetInheritedContracts() { throw null; }
        public bool ShouldSerializeProtectionLevel() { throw null; }
    }
    public partial class DataContractSerializerMessageContractImporter : System.ServiceModel.Description.IWsdlImportExtension
    {
        public DataContractSerializerMessageContractImporter() { }
        public bool Enabled { get { throw null; } set { } }
        void System.ServiceModel.Description.IWsdlImportExtension.BeforeImport(System.Web.Services.Description.ServiceDescriptionCollection wsdlDocuments, System.Xml.Schema.XmlSchemaSet xmlSchemas, System.Collections.Generic.ICollection<System.Xml.XmlElement> policy) { }
        void System.ServiceModel.Description.IWsdlImportExtension.ImportContract(System.ServiceModel.Description.WsdlImporter importer, System.ServiceModel.Description.WsdlContractConversionContext contractContext) { }
        void System.ServiceModel.Description.IWsdlImportExtension.ImportEndpoint(System.ServiceModel.Description.WsdlImporter importer, System.ServiceModel.Description.WsdlEndpointConversionContext endpointContext) { }
    }
    public partial class DataContractSerializerOperationBehavior : System.ServiceModel.Description.IOperationBehavior, System.ServiceModel.Description.IWsdlExportExtension
    {
        public DataContractSerializerOperationBehavior(System.ServiceModel.Description.OperationDescription operation) { }
        public DataContractSerializerOperationBehavior(System.ServiceModel.Description.OperationDescription operation, System.ServiceModel.DataContractFormatAttribute dataContractFormatAttribute) { }
        public System.ServiceModel.DataContractFormatAttribute DataContractFormatAttribute { get { throw null; } }
        public System.Runtime.Serialization.DataContractResolver DataContractResolver { get { throw null; } set { } }
        public System.Runtime.Serialization.IDataContractSurrogate DataContractSurrogate { get { throw null; } set { } }
        public bool IgnoreExtensionDataObject { get { throw null; } set { } }
        public int MaxItemsInObjectGraph { get { throw null; } set { } }
        public virtual System.Runtime.Serialization.XmlObjectSerializer CreateSerializer(System.Type type, string name, string ns, System.Collections.Generic.IList<System.Type> knownTypes) { throw null; }
        public virtual System.Runtime.Serialization.XmlObjectSerializer CreateSerializer(System.Type type, System.Xml.XmlDictionaryString name, System.Xml.XmlDictionaryString ns, System.Collections.Generic.IList<System.Type> knownTypes) { throw null; }
        void System.ServiceModel.Description.IOperationBehavior.AddBindingParameters(System.ServiceModel.Description.OperationDescription description, System.ServiceModel.Channels.BindingParameterCollection parameters) { }
        void System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior(System.ServiceModel.Description.OperationDescription description, System.ServiceModel.Dispatcher.ClientOperation proxy) { }
        void System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.OperationDescription description, System.ServiceModel.Dispatcher.DispatchOperation dispatch) { }
        void System.ServiceModel.Description.IOperationBehavior.Validate(System.ServiceModel.Description.OperationDescription description) { }
        void System.ServiceModel.Description.IWsdlExportExtension.ExportContract(System.ServiceModel.Description.WsdlExporter exporter, System.ServiceModel.Description.WsdlContractConversionContext contractContext) { }
        void System.ServiceModel.Description.IWsdlExportExtension.ExportEndpoint(System.ServiceModel.Description.WsdlExporter exporter, System.ServiceModel.Description.WsdlEndpointConversionContext endpointContext) { }
    }
    public partial class DispatcherSynchronizationBehavior : System.ServiceModel.Description.IEndpointBehavior
    {
        public DispatcherSynchronizationBehavior() { }
        public DispatcherSynchronizationBehavior(bool asynchronousSendEnabled, int maxPendingReceives) { }
        public bool AsynchronousSendEnabled { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public int MaxPendingReceives { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        void System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Channels.BindingParameterCollection parameters) { }
        void System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Dispatcher.ClientRuntime behavior) { }
        void System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Dispatcher.EndpointDispatcher endpointDispatcher) { }
        void System.ServiceModel.Description.IEndpointBehavior.Validate(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint) { }
    }
    [System.Diagnostics.DebuggerDisplayAttribute("Name={name}, Action={action}, DetailType={detailType}")]
    public partial class FaultDescription
    {
        public FaultDescription(string action) { }
        public string Action { get { throw null; } }
        public System.Type DetailType { get { throw null; } set { } }
        public bool HasProtectionLevel { get { throw null; } }
        public string Name { get { throw null; } set { } }
        public string Namespace { get { throw null; } set { } }
        public System.Net.Security.ProtectionLevel ProtectionLevel { get { throw null; } set { } }
        public bool ShouldSerializeProtectionLevel() { throw null; }
    }
    public partial class FaultDescriptionCollection : System.Collections.ObjectModel.Collection<System.ServiceModel.Description.FaultDescription>
    {
        internal FaultDescriptionCollection() { }
        public System.ServiceModel.Description.FaultDescription Find(string action) { throw null; }
        public System.Collections.ObjectModel.Collection<System.ServiceModel.Description.FaultDescription> FindAll(string action) { throw null; }
    }
    public partial interface IContractBehavior
    {
        void AddBindingParameters(System.ServiceModel.Description.ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Channels.BindingParameterCollection bindingParameters);
        void ApplyClientBehavior(System.ServiceModel.Description.ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.ClientRuntime clientRuntime);
        void ApplyDispatchBehavior(System.ServiceModel.Description.ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.DispatchRuntime dispatchRuntime);
        void Validate(System.ServiceModel.Description.ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint);
    }
    public partial interface IContractBehaviorAttribute
    {
        System.Type TargetContract { get; }
    }
    public partial interface IEndpointBehavior
    {
        void AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Channels.BindingParameterCollection bindingParameters);
        void ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.ClientRuntime clientRuntime);
        void ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.EndpointDispatcher endpointDispatcher);
        void Validate(System.ServiceModel.Description.ServiceEndpoint endpoint);
    }
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="IMetadataExchange", Name="IMetadataExchange", Namespace="http://schemas.microsoft.com/2006/04/mex")]
    public partial interface IMetadataExchange
    {
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.xmlsoap.org/ws/2004/09/transfer/Get", ReplyAction="http://schemas.xmlsoap.org/ws/2004/09/transfer/GetResponse", AsyncPattern=true)]
        System.IAsyncResult BeginGet(System.ServiceModel.Channels.Message request, System.AsyncCallback callback, object state);
        System.ServiceModel.Channels.Message EndGet(System.IAsyncResult result);
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.xmlsoap.org/ws/2004/09/transfer/Get", ReplyAction="http://schemas.xmlsoap.org/ws/2004/09/transfer/GetResponse")]
        System.ServiceModel.Channels.Message Get(System.ServiceModel.Channels.Message request);
    }
    public partial interface IOperationBehavior
    {
        void AddBindingParameters(System.ServiceModel.Description.OperationDescription operationDescription, System.ServiceModel.Channels.BindingParameterCollection bindingParameters);
        void ApplyClientBehavior(System.ServiceModel.Description.OperationDescription operationDescription, System.ServiceModel.Dispatcher.ClientOperation clientOperation);
        void ApplyDispatchBehavior(System.ServiceModel.Description.OperationDescription operationDescription, System.ServiceModel.Dispatcher.DispatchOperation dispatchOperation);
        void Validate(System.ServiceModel.Description.OperationDescription operationDescription);
    }
    public partial interface IOperationContractGenerationExtension
    {
        void GenerateOperation(System.ServiceModel.Description.OperationContractGenerationContext context);
    }
    public partial interface IPolicyExportExtension
    {
        void ExportPolicy(System.ServiceModel.Description.MetadataExporter exporter, System.ServiceModel.Description.PolicyConversionContext context);
    }
    public partial interface IPolicyImportExtension
    {
        void ImportPolicy(System.ServiceModel.Description.MetadataImporter importer, System.ServiceModel.Description.PolicyConversionContext context);
    }
    public partial interface IServiceBehavior
    {
        void AddBindingParameters(System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase, System.Collections.ObjectModel.Collection<System.ServiceModel.Description.ServiceEndpoint> endpoints, System.ServiceModel.Channels.BindingParameterCollection bindingParameters);
        void ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase);
        void Validate(System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase);
    }
    public partial interface IServiceContractGenerationExtension
    {
        void GenerateContract(System.ServiceModel.Description.ServiceContractGenerationContext context);
    }
    public partial interface IWsdlExportExtension
    {
        void ExportContract(System.ServiceModel.Description.WsdlExporter exporter, System.ServiceModel.Description.WsdlContractConversionContext context);
        void ExportEndpoint(System.ServiceModel.Description.WsdlExporter exporter, System.ServiceModel.Description.WsdlEndpointConversionContext context);
    }
    public partial interface IWsdlImportExtension
    {
        void BeforeImport(System.Web.Services.Description.ServiceDescriptionCollection wsdlDocuments, System.Xml.Schema.XmlSchemaSet xmlSchemas, System.Collections.Generic.ICollection<System.Xml.XmlElement> policy);
        void ImportContract(System.ServiceModel.Description.WsdlImporter importer, System.ServiceModel.Description.WsdlContractConversionContext context);
        void ImportEndpoint(System.ServiceModel.Description.WsdlImporter importer, System.ServiceModel.Description.WsdlEndpointConversionContext context);
    }
    public enum ListenUriMode
    {
        Explicit = 0,
        Unique = 1,
    }
    public partial class MessageBodyDescription
    {
        public MessageBodyDescription() { }
        public System.ServiceModel.Description.MessagePartDescriptionCollection Parts { get { throw null; } }
        [System.ComponentModel.DefaultValueAttribute(null)]
        public System.ServiceModel.Description.MessagePartDescription ReturnValue { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(null)]
        public string WrapperName { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(null)]
        public string WrapperNamespace { get { throw null; } set { } }
    }
    [System.Diagnostics.DebuggerDisplayAttribute("Action={action}, Direction={direction}, MessageType={messageType}")]
    public partial class MessageDescription
    {
        public MessageDescription(string action, System.ServiceModel.Description.MessageDirection direction) { }
        public string Action { get { throw null; } }
        public System.ServiceModel.Description.MessageBodyDescription Body { get { throw null; } }
        public System.ServiceModel.Description.MessageDirection Direction { get { throw null; } }
        public bool HasProtectionLevel { get { throw null; } }
        public System.ServiceModel.Description.MessageHeaderDescriptionCollection Headers { get { throw null; } }
        [System.ComponentModel.DefaultValueAttribute(null)]
        public System.Type MessageType { get { throw null; } set { } }
        public System.ServiceModel.Description.MessagePropertyDescriptionCollection Properties { get { throw null; } }
        public System.Net.Security.ProtectionLevel ProtectionLevel { get { throw null; } set { } }
        public bool ShouldSerializeProtectionLevel() { throw null; }
    }
    public partial class MessageDescriptionCollection : System.Collections.ObjectModel.Collection<System.ServiceModel.Description.MessageDescription>
    {
        internal MessageDescriptionCollection() { }
        public System.ServiceModel.Description.MessageDescription Find(string action) { throw null; }
        public System.Collections.ObjectModel.Collection<System.ServiceModel.Description.MessageDescription> FindAll(string action) { throw null; }
    }
    public enum MessageDirection
    {
        Input = 0,
        Output = 1,
    }
    public partial class MessageHeaderDescription : System.ServiceModel.Description.MessagePartDescription
    {
        public MessageHeaderDescription(string name, string ns) : base (default(string), default(string)) { }
        [System.ComponentModel.DefaultValueAttribute(null)]
        public string Actor { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool MustUnderstand { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool Relay { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool TypedHeader { get { throw null; } set { } }
    }
    public partial class MessageHeaderDescriptionCollection : System.Collections.ObjectModel.KeyedCollection<System.Xml.XmlQualifiedName, System.ServiceModel.Description.MessageHeaderDescription>
    {
        internal MessageHeaderDescriptionCollection() { }
        protected override System.Xml.XmlQualifiedName GetKeyForItem(System.ServiceModel.Description.MessageHeaderDescription item) { throw null; }
    }
    [System.Diagnostics.DebuggerDisplayAttribute("Name={name}, Namespace={ns}, Type={Type}, Index={index}}")]
    public partial class MessagePartDescription
    {
        public MessagePartDescription(string name, string ns) { }
        public bool HasProtectionLevel { get { throw null; } }
        public int Index { get { throw null; } set { } }
        public System.Reflection.MemberInfo MemberInfo { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool Multiple { get { throw null; } set { } }
        public string Name { get { throw null; } }
        public string Namespace { get { throw null; } }
        public System.Net.Security.ProtectionLevel ProtectionLevel { get { throw null; } set { } }
        public System.Type Type { get { throw null; } set { } }
    }
    public partial class MessagePartDescriptionCollection : System.Collections.ObjectModel.KeyedCollection<System.Xml.XmlQualifiedName, System.ServiceModel.Description.MessagePartDescription>
    {
        internal MessagePartDescriptionCollection() { }
        protected override System.Xml.XmlQualifiedName GetKeyForItem(System.ServiceModel.Description.MessagePartDescription item) { throw null; }
    }
    public partial class MessagePropertyDescription : System.ServiceModel.Description.MessagePartDescription
    {
        public MessagePropertyDescription(string name) : base (default(string), default(string)) { }
    }
    public partial class MessagePropertyDescriptionCollection : System.Collections.ObjectModel.KeyedCollection<string, System.ServiceModel.Description.MessagePropertyDescription>
    {
        internal MessagePropertyDescriptionCollection() { }
        protected override string GetKeyForItem(System.ServiceModel.Description.MessagePropertyDescription item) { throw null; }
    }
    public partial class MetadataConversionError
    {
        public MetadataConversionError(string message) { }
        public MetadataConversionError(string message, bool isWarning) { }
        public bool IsWarning { get { throw null; } }
        public string Message { get { throw null; } }
        public override bool Equals(object obj) { throw null; }
        public override int GetHashCode() { throw null; }
    }
    public static partial class MetadataExchangeBindings
    {
        public static System.ServiceModel.Channels.Binding CreateMexHttpBinding() { throw null; }
        public static System.ServiceModel.Channels.Binding CreateMexHttpsBinding() { throw null; }
        public static System.ServiceModel.Channels.Binding CreateMexNamedPipeBinding() { throw null; }
        public static System.ServiceModel.Channels.Binding CreateMexTcpBinding() { throw null; }
    }
    public partial class MetadataExchangeClient
    {
        public MetadataExchangeClient() { }
        public MetadataExchangeClient(System.ServiceModel.Channels.Binding mexBinding) { }
        public MetadataExchangeClient(System.ServiceModel.EndpointAddress address) { }
        public MetadataExchangeClient(string endpointConfigurationName) { }
        public MetadataExchangeClient(System.Uri address, System.ServiceModel.Description.MetadataExchangeClientMode mode) { }
        public System.Net.ICredentials HttpCredentials { get { throw null; } set { } }
        public int MaximumResolvedReferences { get { throw null; } set { } }
        public System.TimeSpan OperationTimeout { get { throw null; } set { } }
        public bool ResolveMetadataReferences { get { throw null; } set { } }
        public System.ServiceModel.Description.ClientCredentials SoapCredentials { get { throw null; } set { } }
        public System.IAsyncResult BeginGetMetadata(System.AsyncCallback callback, object asyncState) { throw null; }
        public System.IAsyncResult BeginGetMetadata(System.ServiceModel.EndpointAddress address, System.AsyncCallback callback, object asyncState) { throw null; }
        public System.IAsyncResult BeginGetMetadata(System.Uri address, System.ServiceModel.Description.MetadataExchangeClientMode mode, System.AsyncCallback callback, object asyncState) { throw null; }
        public System.ServiceModel.Description.MetadataSet EndGetMetadata(System.IAsyncResult result) { throw null; }
        protected internal virtual System.ServiceModel.ChannelFactory<System.ServiceModel.Description.IMetadataExchange> GetChannelFactory(System.ServiceModel.EndpointAddress metadataAddress, string dialect, string identifier) { throw null; }
        public System.ServiceModel.Description.MetadataSet GetMetadata() { throw null; }
        public System.ServiceModel.Description.MetadataSet GetMetadata(System.ServiceModel.EndpointAddress address) { throw null; }
        public System.ServiceModel.Description.MetadataSet GetMetadata(System.ServiceModel.EndpointAddress address, System.Uri via) { throw null; }
        public System.ServiceModel.Description.MetadataSet GetMetadata(System.Uri address, System.ServiceModel.Description.MetadataExchangeClientMode mode) { throw null; }
        public System.Threading.Tasks.Task<System.ServiceModel.Description.MetadataSet> GetMetadataAsync() { throw null; }
        public System.Threading.Tasks.Task<System.ServiceModel.Description.MetadataSet> GetMetadataAsync(System.ServiceModel.EndpointAddress address) { throw null; }
        public System.Threading.Tasks.Task<System.ServiceModel.Description.MetadataSet> GetMetadataAsync(System.ServiceModel.EndpointAddress address, System.Uri via) { throw null; }
        public System.Threading.Tasks.Task<System.ServiceModel.Description.MetadataSet> GetMetadataAsync(System.Uri address, System.ServiceModel.Description.MetadataExchangeClientMode mode) { throw null; }
        protected internal virtual System.Net.HttpWebRequest GetWebRequest(System.Uri location, string dialect, string identifier) { throw null; }
    }
    public enum MetadataExchangeClientMode
    {
        HttpGet = 1,
        MetadataExchange = 0,
    }
    public abstract partial class MetadataExporter
    {
        internal MetadataExporter() { }
        public System.Collections.ObjectModel.Collection<System.ServiceModel.Description.MetadataConversionError> Errors { get { throw null; } }
        public System.ServiceModel.Description.PolicyVersion PolicyVersion { get { throw null; } set { } }
        public System.Collections.Generic.Dictionary<object, object> State { get { throw null; } }
        public abstract void ExportContract(System.ServiceModel.Description.ContractDescription contract);
        public abstract void ExportEndpoint(System.ServiceModel.Description.ServiceEndpoint endpoint);
        protected internal System.ServiceModel.Description.PolicyConversionContext ExportPolicy(System.ServiceModel.Description.ServiceEndpoint endpoint) { throw null; }
        public abstract System.ServiceModel.Description.MetadataSet GetGeneratedMetadata();
    }
    public abstract partial class MetadataImporter
    {
        internal MetadataImporter() { }
        public System.Collections.ObjectModel.Collection<System.ServiceModel.Description.MetadataConversionError> Errors { get { throw null; } }
        public System.Collections.Generic.Dictionary<System.Xml.XmlQualifiedName, System.ServiceModel.Description.ContractDescription> KnownContracts { get { throw null; } }
        public System.Collections.Generic.KeyedByTypeCollection<System.ServiceModel.Description.IPolicyImportExtension> PolicyImportExtensions { get { throw null; } }
        public System.Collections.Generic.Dictionary<object, object> State { get { throw null; } }
        public abstract System.Collections.ObjectModel.Collection<System.ServiceModel.Description.ContractDescription> ImportAllContracts();
        public abstract System.ServiceModel.Description.ServiceEndpointCollection ImportAllEndpoints();
    }
    public sealed partial class MetadataImporterQuotas
    {
        public MetadataImporterQuotas() { }
        public static System.ServiceModel.Description.MetadataImporterQuotas Defaults { get { throw null; } }
        public static System.ServiceModel.Description.MetadataImporterQuotas Max { get { throw null; } }
    }
    [System.Xml.Serialization.XmlRootAttribute(ElementName="Location", Namespace="http://schemas.xmlsoap.org/ws/2004/09/mex")]
    public partial class MetadataLocation
    {
        public MetadataLocation() { }
        public MetadataLocation(string location) { }
        [System.Xml.Serialization.XmlTextAttribute]
        public string Location { get { throw null; } set { } }
    }
    [System.Xml.Serialization.XmlRootAttribute(ElementName="MetadataReference", Namespace="http://schemas.xmlsoap.org/ws/2004/09/mex")]
    public partial class MetadataReference : System.Xml.Serialization.IXmlSerializable
    {
        public MetadataReference() { }
        public MetadataReference(System.ServiceModel.EndpointAddress address, System.ServiceModel.Channels.AddressingVersion addressVersion) { }
        public System.ServiceModel.EndpointAddress Address { get { throw null; } set { } }
        public System.ServiceModel.Channels.AddressingVersion AddressVersion { get { throw null; } set { } }
        System.Xml.Schema.XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema() { throw null; }
        void System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader reader) { }
        void System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter writer) { }
    }
    public static partial class MetadataResolver
    {
        public static System.IAsyncResult BeginResolve(System.Collections.Generic.IEnumerable<System.ServiceModel.Description.ContractDescription> contracts, System.ServiceModel.EndpointAddress address, System.AsyncCallback callback, object asyncState) { throw null; }
        public static System.IAsyncResult BeginResolve(System.Collections.Generic.IEnumerable<System.ServiceModel.Description.ContractDescription> contracts, System.ServiceModel.EndpointAddress address, System.ServiceModel.Description.MetadataExchangeClient client, System.AsyncCallback callback, object asyncState) { throw null; }
        public static System.IAsyncResult BeginResolve(System.Collections.Generic.IEnumerable<System.ServiceModel.Description.ContractDescription> contracts, System.Uri address, System.ServiceModel.Description.MetadataExchangeClientMode mode, System.AsyncCallback callback, object asyncState) { throw null; }
        public static System.IAsyncResult BeginResolve(System.Collections.Generic.IEnumerable<System.ServiceModel.Description.ContractDescription> contracts, System.Uri address, System.ServiceModel.Description.MetadataExchangeClientMode mode, System.ServiceModel.Description.MetadataExchangeClient client, System.AsyncCallback callback, object asyncState) { throw null; }
        public static System.IAsyncResult BeginResolve(System.Type contract, System.ServiceModel.EndpointAddress address, System.AsyncCallback callback, object asyncState) { throw null; }
        public static System.IAsyncResult BeginResolve(System.Type contract, System.Uri address, System.ServiceModel.Description.MetadataExchangeClientMode mode, System.AsyncCallback callback, object asyncState) { throw null; }
        public static System.ServiceModel.Description.ServiceEndpointCollection EndResolve(System.IAsyncResult result) { throw null; }
        public static System.ServiceModel.Description.ServiceEndpointCollection Resolve(System.Collections.Generic.IEnumerable<System.ServiceModel.Description.ContractDescription> contracts, System.ServiceModel.EndpointAddress address) { throw null; }
        public static System.ServiceModel.Description.ServiceEndpointCollection Resolve(System.Collections.Generic.IEnumerable<System.ServiceModel.Description.ContractDescription> contracts, System.ServiceModel.EndpointAddress address, System.ServiceModel.Description.MetadataExchangeClient client) { throw null; }
        public static System.ServiceModel.Description.ServiceEndpointCollection Resolve(System.Collections.Generic.IEnumerable<System.ServiceModel.Description.ContractDescription> contracts, System.Uri address, System.ServiceModel.Description.MetadataExchangeClientMode mode) { throw null; }
        public static System.ServiceModel.Description.ServiceEndpointCollection Resolve(System.Collections.Generic.IEnumerable<System.ServiceModel.Description.ContractDescription> contracts, System.Uri address, System.ServiceModel.Description.MetadataExchangeClientMode mode, System.ServiceModel.Description.MetadataExchangeClient client) { throw null; }
        public static System.ServiceModel.Description.ServiceEndpointCollection Resolve(System.Type contract, System.ServiceModel.EndpointAddress address) { throw null; }
        public static System.ServiceModel.Description.ServiceEndpointCollection Resolve(System.Type contract, System.Uri address, System.ServiceModel.Description.MetadataExchangeClientMode mode) { throw null; }
    }
    [System.Xml.Serialization.XmlRootAttribute(ElementName="MetadataSection", Namespace="http://schemas.xmlsoap.org/ws/2004/09/mex")]
    public partial class MetadataSection
    {
        public MetadataSection() { }
        public MetadataSection(string dialect, string identifier, object metadata) { }
        [System.Xml.Serialization.XmlAnyAttributeAttribute]
        public System.Collections.ObjectModel.Collection<System.Xml.XmlAttribute> Attributes { get { throw null; } }
        [System.Xml.Serialization.XmlAttributeAttribute]
        public string Dialect { get { throw null; } set { } }
        [System.Xml.Serialization.XmlAttributeAttribute]
        public string Identifier { get { throw null; } set { } }
        [System.Xml.Serialization.XmlAnyElementAttribute]
        [System.Xml.Serialization.XmlElementAttribute("definitions", typeof(System.Web.Services.Description.ServiceDescription), Namespace="http://schemas.xmlsoap.org/wsdl/")]
        [System.Xml.Serialization.XmlElementAttribute("Location", typeof(System.ServiceModel.Description.MetadataLocation), Namespace="http://schemas.xmlsoap.org/ws/2004/09/mex")]
        [System.Xml.Serialization.XmlElementAttribute("Metadata", typeof(System.ServiceModel.Description.MetadataSet), Namespace="http://schemas.xmlsoap.org/ws/2004/09/mex")]
        [System.Xml.Serialization.XmlElementAttribute("MetadataReference", typeof(System.ServiceModel.Description.MetadataReference), Namespace="http://schemas.xmlsoap.org/ws/2004/09/mex")]
        [System.Xml.Serialization.XmlElementAttribute("schema", typeof(System.Xml.Schema.XmlSchema), Namespace="http://www.w3.org/2001/XMLSchema")]
        public object Metadata { get { throw null; } set { } }
        public static string MetadataExchangeDialect { get { throw null; } }
        public static string PolicyDialect { get { throw null; } }
        public static string ServiceDescriptionDialect { get { throw null; } }
        public static string XmlSchemaDialect { get { throw null; } }
        public static System.ServiceModel.Description.MetadataSection CreateFromPolicy(System.Xml.XmlElement policy, string identifier) { throw null; }
        public static System.ServiceModel.Description.MetadataSection CreateFromSchema(System.Xml.Schema.XmlSchema schema) { throw null; }
        public static System.ServiceModel.Description.MetadataSection CreateFromServiceDescription(System.Web.Services.Description.ServiceDescription serviceDescription) { throw null; }
    }
    [System.Xml.Serialization.XmlRootAttribute("Metadata", Namespace="http://schemas.xmlsoap.org/ws/2004/09/mex")]
    public partial class MetadataSet : System.Xml.Serialization.IXmlSerializable
    {
        public MetadataSet() { }
        public MetadataSet(System.Collections.Generic.IEnumerable<System.ServiceModel.Description.MetadataSection> sections) { }
        [System.Xml.Serialization.XmlAnyAttributeAttribute]
        public System.Collections.ObjectModel.Collection<System.Xml.XmlAttribute> Attributes { get { throw null; } }
        [System.Xml.Serialization.XmlElementAttribute("MetadataSection", Namespace="http://schemas.xmlsoap.org/ws/2004/09/mex")]
        public System.Collections.ObjectModel.Collection<System.ServiceModel.Description.MetadataSection> MetadataSections { get { throw null; } }
        public static System.ServiceModel.Description.MetadataSet ReadFrom(System.Xml.XmlReader reader) { throw null; }
        System.Xml.Schema.XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema() { throw null; }
        void System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader reader) { }
        void System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter writer) { }
        public void WriteTo(System.Xml.XmlWriter writer) { }
    }
    public partial class MustUnderstandBehavior : System.ServiceModel.Description.IEndpointBehavior
    {
        public MustUnderstandBehavior(bool validate) { }
        public bool ValidateMustUnderstand { get { throw null; } set { } }
        void System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Channels.BindingParameterCollection bindingParameters) { }
        void System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Dispatcher.ClientRuntime behavior) { }
        void System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Dispatcher.EndpointDispatcher endpointDispatcher) { }
        void System.ServiceModel.Description.IEndpointBehavior.Validate(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint) { }
    }
    public partial class OperationContractGenerationContext
    {
        public OperationContractGenerationContext(System.ServiceModel.Description.ServiceContractGenerator serviceContractGenerator, System.ServiceModel.Description.ServiceContractGenerationContext contract, System.ServiceModel.Description.OperationDescription operation, System.CodeDom.CodeTypeDeclaration declaringType, System.CodeDom.CodeMemberMethod method) { }
        public OperationContractGenerationContext(System.ServiceModel.Description.ServiceContractGenerator serviceContractGenerator, System.ServiceModel.Description.ServiceContractGenerationContext contract, System.ServiceModel.Description.OperationDescription operation, System.CodeDom.CodeTypeDeclaration declaringType, System.CodeDom.CodeMemberMethod syncMethod, System.CodeDom.CodeMemberMethod taskMethod) { }
        public OperationContractGenerationContext(System.ServiceModel.Description.ServiceContractGenerator serviceContractGenerator, System.ServiceModel.Description.ServiceContractGenerationContext contract, System.ServiceModel.Description.OperationDescription operation, System.CodeDom.CodeTypeDeclaration declaringType, System.CodeDom.CodeMemberMethod syncMethod, System.CodeDom.CodeMemberMethod beginMethod, System.CodeDom.CodeMemberMethod endMethod) { }
        public OperationContractGenerationContext(System.ServiceModel.Description.ServiceContractGenerator serviceContractGenerator, System.ServiceModel.Description.ServiceContractGenerationContext contract, System.ServiceModel.Description.OperationDescription operation, System.CodeDom.CodeTypeDeclaration declaringType, System.CodeDom.CodeMemberMethod syncMethod, System.CodeDom.CodeMemberMethod beginMethod, System.CodeDom.CodeMemberMethod endMethod, System.CodeDom.CodeMemberMethod taskMethod) { }
        public System.CodeDom.CodeMemberMethod BeginMethod { get { throw null; } }
        public System.ServiceModel.Description.ServiceContractGenerationContext Contract { get { throw null; } }
        public System.CodeDom.CodeTypeDeclaration DeclaringType { get { throw null; } }
        public System.CodeDom.CodeMemberMethod EndMethod { get { throw null; } }
        public bool IsAsync { get { throw null; } }
        public bool IsTask { get { throw null; } }
        public System.ServiceModel.Description.OperationDescription Operation { get { throw null; } }
        public System.ServiceModel.Description.ServiceContractGenerator ServiceContractGenerator { get { throw null; } }
        public System.CodeDom.CodeMemberMethod SyncMethod { get { throw null; } }
        public System.CodeDom.CodeMemberMethod TaskMethod { get { throw null; } }
    }
    [System.Diagnostics.DebuggerDisplayAttribute("Name={name}, IsInitiating={isInitiating}, IsTerminating={isTerminating}")]
    public partial class OperationDescription
    {
        public OperationDescription(string name, System.ServiceModel.Description.ContractDescription declaringContract) { }
        public System.Reflection.MethodInfo BeginMethod { get { throw null; } set { } }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public System.Collections.Generic.KeyedByTypeCollection<System.ServiceModel.Description.IOperationBehavior> Behaviors { get { throw null; } }
        public System.ServiceModel.Description.ContractDescription DeclaringContract { get { throw null; } set { } }
        public System.Reflection.MethodInfo EndMethod { get { throw null; } set { } }
        public System.ServiceModel.Description.FaultDescriptionCollection Faults { get { throw null; } }
        public bool HasProtectionLevel { get { throw null; } }
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool IsInitiating { get { throw null; } set { } }
        public bool IsOneWay { get { throw null; } }
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool IsTerminating { get { throw null; } set { } }
        public System.Collections.ObjectModel.Collection<System.Type> KnownTypes { get { throw null; } }
        public System.ServiceModel.Description.MessageDescriptionCollection Messages { get { throw null; } }
        public string Name { get { throw null; } }
        public System.Collections.ObjectModel.KeyedCollection<System.Type, System.ServiceModel.Description.IOperationBehavior> OperationBehaviors { get { throw null; } }
        public System.Net.Security.ProtectionLevel ProtectionLevel { get { throw null; } set { } }
        public System.Reflection.MethodInfo SyncMethod { get { throw null; } set { } }
        public System.Reflection.MethodInfo TaskMethod { get { throw null; } set { } }
        public bool ShouldSerializeProtectionLevel() { throw null; }
    }
    public partial class OperationDescriptionCollection : System.Collections.ObjectModel.Collection<System.ServiceModel.Description.OperationDescription>
    {
        internal OperationDescriptionCollection() { }
        public System.ServiceModel.Description.OperationDescription Find(string name) { throw null; }
        public System.Collections.ObjectModel.Collection<System.ServiceModel.Description.OperationDescription> FindAll(string name) { throw null; }
        protected override void InsertItem(int index, System.ServiceModel.Description.OperationDescription item) { }
        protected override void SetItem(int index, System.ServiceModel.Description.OperationDescription item) { }
    }
    public static partial class ParameterXPathQueryGenerator
    {
        public static string CreateFromDataContractSerializer(System.Xml.Linq.XName serviceContractName, string operationName, string parameterName, bool isReply, System.Type type, System.Reflection.MemberInfo[] pathToMember, out System.Xml.XmlNamespaceManager namespaces) { throw null; }
    }
    public partial class PolicyAssertionCollection : System.Collections.ObjectModel.Collection<System.Xml.XmlElement>
    {
        public PolicyAssertionCollection() { }
        public PolicyAssertionCollection(System.Collections.Generic.IEnumerable<System.Xml.XmlElement> elements) { }
        public bool Contains(string localName, string namespaceUri) { throw null; }
        public System.Xml.XmlElement Find(string localName, string namespaceUri) { throw null; }
        public System.Collections.ObjectModel.Collection<System.Xml.XmlElement> FindAll(string localName, string namespaceUri) { throw null; }
        protected override void InsertItem(int index, System.Xml.XmlElement item) { }
        public System.Xml.XmlElement Remove(string localName, string namespaceUri) { throw null; }
        public System.Collections.ObjectModel.Collection<System.Xml.XmlElement> RemoveAll(string localName, string namespaceUri) { throw null; }
        protected override void SetItem(int index, System.Xml.XmlElement item) { }
    }
    public abstract partial class PolicyConversionContext
    {
        protected PolicyConversionContext(System.ServiceModel.Description.ServiceEndpoint endpoint) { }
        public abstract System.ServiceModel.Channels.BindingElementCollection BindingElements { get; }
        public System.ServiceModel.Description.ContractDescription Contract { get { throw null; } }
        public abstract System.ServiceModel.Description.PolicyAssertionCollection GetBindingAssertions();
        public abstract System.ServiceModel.Description.PolicyAssertionCollection GetFaultBindingAssertions(System.ServiceModel.Description.FaultDescription fault);
        public abstract System.ServiceModel.Description.PolicyAssertionCollection GetMessageBindingAssertions(System.ServiceModel.Description.MessageDescription message);
        public abstract System.ServiceModel.Description.PolicyAssertionCollection GetOperationBindingAssertions(System.ServiceModel.Description.OperationDescription operation);
    }
    public sealed partial class PolicyVersion
    {
        internal PolicyVersion() { }
        public static System.ServiceModel.Description.PolicyVersion Default { get { throw null; } }
        public string Namespace { get { throw null; } }
        public static System.ServiceModel.Description.PolicyVersion Policy12 { get { throw null; } }
        public static System.ServiceModel.Description.PolicyVersion Policy15 { get { throw null; } }
        public override string ToString() { throw null; }
    }
    public enum PrincipalPermissionMode
    {
        Always = 4,
        Custom = 3,
        None = 0,
        UseAspNetRoles = 2,
        UseWindowsGroups = 1,
    }
    public sealed partial class ServiceAuthenticationBehavior : System.ServiceModel.Description.IServiceBehavior
    {
        public ServiceAuthenticationBehavior() { }
        public System.Net.AuthenticationSchemes AuthenticationSchemes { get { throw null; } set { } }
        public System.ServiceModel.ServiceAuthenticationManager ServiceAuthenticationManager { get { throw null; } set { } }
        public bool ShouldSerializeAuthenticationSchemes() { throw null; }
        public bool ShouldSerializeServiceAuthenticationManager() { throw null; }
        void System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription description, System.ServiceModel.ServiceHostBase serviceHostBase, System.Collections.ObjectModel.Collection<System.ServiceModel.Description.ServiceEndpoint> endpoints, System.ServiceModel.Channels.BindingParameterCollection parameters) { }
        void System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription description, System.ServiceModel.ServiceHostBase serviceHostBase) { }
        void System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription description, System.ServiceModel.ServiceHostBase serviceHostBase) { }
    }
    public sealed partial class ServiceAuthorizationBehavior : System.ServiceModel.Description.IServiceBehavior
    {
        public ServiceAuthorizationBehavior() { }
        public System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.Policy.IAuthorizationPolicy> ExternalAuthorizationPolicies { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool ImpersonateCallerForAllOperations { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool ImpersonateOnSerializingReply { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(System.ServiceModel.Description.PrincipalPermissionMode.UseWindowsGroups)]
        public System.ServiceModel.Description.PrincipalPermissionMode PrincipalPermissionMode { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(null)]
        public System.Web.Security.RoleProvider RoleProvider { get { throw null; } set { } }
        public System.ServiceModel.ServiceAuthorizationManager ServiceAuthorizationManager { get { throw null; } set { } }
        public bool ShouldSerializeExternalAuthorizationPolicies() { throw null; }
        public bool ShouldSerializeServiceAuthorizationManager() { throw null; }
        void System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription description, System.ServiceModel.ServiceHostBase serviceHostBase, System.Collections.ObjectModel.Collection<System.ServiceModel.Description.ServiceEndpoint> endpoints, System.ServiceModel.Channels.BindingParameterCollection parameters) { }
        void System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription description, System.ServiceModel.ServiceHostBase serviceHostBase) { }
        void System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription description, System.ServiceModel.ServiceHostBase serviceHostBase) { }
    }
    public partial class ServiceContractGenerationContext
    {
        public ServiceContractGenerationContext(System.ServiceModel.Description.ServiceContractGenerator serviceContractGenerator, System.ServiceModel.Description.ContractDescription contract, System.CodeDom.CodeTypeDeclaration contractType) { }
        public ServiceContractGenerationContext(System.ServiceModel.Description.ServiceContractGenerator serviceContractGenerator, System.ServiceModel.Description.ContractDescription contract, System.CodeDom.CodeTypeDeclaration contractType, System.CodeDom.CodeTypeDeclaration duplexCallbackType) { }
        public System.ServiceModel.Description.ContractDescription Contract { get { throw null; } }
        public System.CodeDom.CodeTypeDeclaration ContractType { get { throw null; } }
        public System.CodeDom.CodeTypeDeclaration DuplexCallbackType { get { throw null; } }
        public System.Collections.ObjectModel.Collection<System.ServiceModel.Description.OperationContractGenerationContext> Operations { get { throw null; } }
        public System.ServiceModel.Description.ServiceContractGenerator ServiceContractGenerator { get { throw null; } }
    }
    [System.FlagsAttribute]
    public enum ServiceContractGenerationOptions
    {
        AsynchronousMethods = 1,
        ChannelInterface = 2,
        ClientClass = 8,
        EventBasedAsynchronousMethods = 32,
        InternalTypes = 4,
        None = 0,
        TaskBasedAsynchronousMethod = 64,
        TypedMessages = 16,
    }
    public partial class ServiceContractGenerator
    {
        public ServiceContractGenerator() { }
        public ServiceContractGenerator(System.CodeDom.CodeCompileUnit targetCompileUnit) { }
        public ServiceContractGenerator(System.CodeDom.CodeCompileUnit targetCompileUnit, System.Configuration.Configuration targetConfig) { }
        public ServiceContractGenerator(System.Configuration.Configuration targetConfig) { }
        public System.Configuration.Configuration Configuration { get { throw null; } }
        public System.Collections.ObjectModel.Collection<System.ServiceModel.Description.MetadataConversionError> Errors { get { throw null; } }
        public System.Collections.Generic.Dictionary<string, string> NamespaceMappings { get { throw null; } }
        public System.ServiceModel.Description.ServiceContractGenerationOptions Options { get { throw null; } set { } }
        public System.Collections.Generic.Dictionary<System.ServiceModel.Description.ContractDescription, System.Type> ReferencedTypes { get { throw null; } }
        public System.CodeDom.CodeCompileUnit TargetCompileUnit { get { throw null; } }
        public void GenerateBinding(System.ServiceModel.Channels.Binding binding, out string bindingSectionName, out string configurationName) { throw null; }
        public System.CodeDom.CodeTypeReference GenerateServiceContractType(System.ServiceModel.Description.ContractDescription contractDescription) { throw null; }
        public System.CodeDom.CodeTypeReference GenerateServiceEndpoint(System.ServiceModel.Description.ServiceEndpoint endpoint, out System.ServiceModel.Configuration.ChannelEndpointElement channelElement) { throw null; }
    }
    public partial class ServiceCredentials : System.ServiceModel.Security.SecurityCredentialsManager, System.ServiceModel.Description.IServiceBehavior
    {
        public ServiceCredentials() { }
        protected ServiceCredentials(System.ServiceModel.Description.ServiceCredentials other) { }
        public System.ServiceModel.Security.X509CertificateInitiatorServiceCredential ClientCertificate { get { throw null; } }
        public System.ServiceModel.ExceptionMapper ExceptionMapper { get { throw null; } set { } }
        public System.IdentityModel.Configuration.IdentityConfiguration IdentityConfiguration { get { throw null; } set { } }
        public System.ServiceModel.Security.IssuedTokenServiceCredential IssuedTokenAuthentication { get { throw null; } }
        public System.ServiceModel.Security.PeerCredential Peer { get { throw null; } }
        public System.ServiceModel.Security.SecureConversationServiceCredential SecureConversationAuthentication { get { throw null; } }
        public System.ServiceModel.Security.X509CertificateRecipientServiceCredential ServiceCertificate { get { throw null; } }
        public bool UseIdentityConfiguration { get { throw null; } set { } }
        public System.ServiceModel.Security.UserNamePasswordServiceCredential UserNameAuthentication { get { throw null; } }
        public System.ServiceModel.Security.WindowsServiceCredential WindowsAuthentication { get { throw null; } }
        public System.ServiceModel.Description.ServiceCredentials Clone() { throw null; }
        protected virtual System.ServiceModel.Description.ServiceCredentials CloneCore() { throw null; }
        public override System.IdentityModel.Selectors.SecurityTokenManager CreateSecurityTokenManager() { throw null; }
        void System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription description, System.ServiceModel.ServiceHostBase serviceHostBase, System.Collections.ObjectModel.Collection<System.ServiceModel.Description.ServiceEndpoint> endpoints, System.ServiceModel.Channels.BindingParameterCollection parameters) { }
        void System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription description, System.ServiceModel.ServiceHostBase serviceHostBase) { }
        void System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription description, System.ServiceModel.ServiceHostBase serviceHostBase) { }
    }
    public partial class ServiceDebugBehavior : System.ServiceModel.Description.IServiceBehavior
    {
        public ServiceDebugBehavior() { }
        public System.ServiceModel.Channels.Binding HttpHelpPageBinding { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool HttpHelpPageEnabled { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(null)]
        [System.ComponentModel.TypeConverterAttribute(typeof(System.UriTypeConverter))]
        public System.Uri HttpHelpPageUrl { get { throw null; } set { } }
        public System.ServiceModel.Channels.Binding HttpsHelpPageBinding { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool HttpsHelpPageEnabled { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(null)]
        [System.ComponentModel.TypeConverterAttribute(typeof(System.UriTypeConverter))]
        public System.Uri HttpsHelpPageUrl { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool IncludeExceptionDetailInFaults { get { throw null; } set { } }
        void System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription description, System.ServiceModel.ServiceHostBase serviceHostBase, System.Collections.ObjectModel.Collection<System.ServiceModel.Description.ServiceEndpoint> endpoints, System.ServiceModel.Channels.BindingParameterCollection parameters) { }
        void System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription description, System.ServiceModel.ServiceHostBase serviceHostBase) { }
        void System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription description, System.ServiceModel.ServiceHostBase serviceHostBase) { }
    }
    [System.Diagnostics.DebuggerDisplayAttribute("ServiceType={serviceType}")]
    public partial class ServiceDescription
    {
        public ServiceDescription() { }
        public ServiceDescription(System.Collections.Generic.IEnumerable<System.ServiceModel.Description.ServiceEndpoint> endpoints) { }
        public System.Collections.Generic.KeyedByTypeCollection<System.ServiceModel.Description.IServiceBehavior> Behaviors { get { throw null; } }
        public string ConfigurationName { get { throw null; } set { } }
        public System.ServiceModel.Description.ServiceEndpointCollection Endpoints { get { throw null; } }
        public string Name { get { throw null; } set { } }
        public string Namespace { get { throw null; } set { } }
        public System.Type ServiceType { get { throw null; } set { } }
        public static System.ServiceModel.Description.ServiceDescription GetService(object serviceImplementation) { throw null; }
        public static System.ServiceModel.Description.ServiceDescription GetService(System.Type serviceType) { throw null; }
    }
    [System.Diagnostics.DebuggerDisplayAttribute("Address={address}")]
    [System.Diagnostics.DebuggerDisplayAttribute("Name={name}")]
    public partial class ServiceEndpoint
    {
        public ServiceEndpoint(System.ServiceModel.Description.ContractDescription contract) { }
        public ServiceEndpoint(System.ServiceModel.Description.ContractDescription contract, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress address) { }
        public System.ServiceModel.EndpointAddress Address { get { throw null; } set { } }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public System.Collections.Generic.KeyedByTypeCollection<System.ServiceModel.Description.IEndpointBehavior> Behaviors { get { throw null; } }
        public System.ServiceModel.Channels.Binding Binding { get { throw null; } set { } }
        public System.ServiceModel.Description.ContractDescription Contract { get { throw null; } set { } }
        public System.Collections.ObjectModel.KeyedCollection<System.Type, System.ServiceModel.Description.IEndpointBehavior> EndpointBehaviors { get { throw null; } }
        public bool IsSystemEndpoint { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public System.Uri ListenUri { get { throw null; } set { } }
        public System.ServiceModel.Description.ListenUriMode ListenUriMode { get { throw null; } set { } }
        public string Name { get { throw null; } set { } }
    }
    public partial class ServiceEndpointCollection : System.Collections.ObjectModel.Collection<System.ServiceModel.Description.ServiceEndpoint>
    {
        internal ServiceEndpointCollection() { }
        public System.ServiceModel.Description.ServiceEndpoint Find(System.Type contractType) { throw null; }
        public System.ServiceModel.Description.ServiceEndpoint Find(System.Type contractType, System.Xml.XmlQualifiedName bindingName) { throw null; }
        public System.ServiceModel.Description.ServiceEndpoint Find(System.Uri address) { throw null; }
        public System.ServiceModel.Description.ServiceEndpoint Find(System.Xml.XmlQualifiedName contractName) { throw null; }
        public System.ServiceModel.Description.ServiceEndpoint Find(System.Xml.XmlQualifiedName contractName, System.Xml.XmlQualifiedName bindingName) { throw null; }
        public System.Collections.ObjectModel.Collection<System.ServiceModel.Description.ServiceEndpoint> FindAll(System.Type contractType) { throw null; }
        public System.Collections.ObjectModel.Collection<System.ServiceModel.Description.ServiceEndpoint> FindAll(System.Xml.XmlQualifiedName contractName) { throw null; }
        protected override void InsertItem(int index, System.ServiceModel.Description.ServiceEndpoint item) { }
        protected override void SetItem(int index, System.ServiceModel.Description.ServiceEndpoint item) { }
    }
    public partial class ServiceHealthBehavior : System.ServiceModel.Description.ServiceHealthBehaviorBase
    {
        public ServiceHealthBehavior() { }
        protected virtual bool HasXmlSupport { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        protected static void AddHttpProperty(System.ServiceModel.Channels.Message message, System.Net.HttpStatusCode status, bool isXml) { }
        protected static bool EnsureHttpStatusCode(int code) { throw null; }
        protected virtual System.Net.HttpStatusCode GetHttpResponseCode(System.ServiceModel.ServiceHostBase serviceHost, string[] queries) { throw null; }
        protected virtual System.ServiceModel.Description.ServiceHealthSectionCollection GetServiceHealthSections(System.ServiceModel.ServiceHostBase serviceHost) { throw null; }
        protected virtual System.Xml.XmlDocument GetXmlDocument(System.ServiceModel.ServiceHostBase serviceHost) { throw null; }
        public override void HandleHealthRequest(System.ServiceModel.ServiceHostBase serviceHost, System.ServiceModel.Channels.Message httpGetRequest, string[] queries, out System.ServiceModel.Channels.Message replyMessage) { throw null; }
        protected static bool TryParseBooleanQueryParameter(string parameterName, string parameter, bool defaultValue, out bool result) { throw null; }
        protected static bool TryParseHttpStatusCodeQueryParameter(string parameterName, string parameter, System.Net.HttpStatusCode defaultErrorCode, out System.Net.HttpStatusCode result) { throw null; }
    }
    public abstract partial class ServiceHealthBehaviorBase : System.ServiceModel.Description.IServiceBehavior
    {
        protected ServiceHealthBehaviorBase() { }
        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool HealthDetailsEnabled { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public System.ServiceModel.Channels.Binding HttpGetBinding { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool HttpGetEnabled { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        [System.ComponentModel.DefaultValueAttribute(null)]
        [System.ComponentModel.TypeConverterAttribute(typeof(System.UriTypeConverter))]
        public System.Uri HttpGetUrl { get { throw null; } set { } }
        public System.ServiceModel.Channels.Binding HttpsGetBinding { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool HttpsGetEnabled { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        [System.ComponentModel.DefaultValueAttribute(null)]
        [System.ComponentModel.TypeConverterAttribute(typeof(System.UriTypeConverter))]
        public System.Uri HttpsGetUrl { get { throw null; } set { } }
        protected System.DateTimeOffset ServiceStartTime { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        public abstract void HandleHealthRequest(System.ServiceModel.ServiceHostBase serviceHost, System.ServiceModel.Channels.Message httpGetRequest, string[] queries, out System.ServiceModel.Channels.Message replyMessage);
        void System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription description, System.ServiceModel.ServiceHostBase serviceHostBase, System.Collections.ObjectModel.Collection<System.ServiceModel.Description.ServiceEndpoint> endpoints, System.ServiceModel.Channels.BindingParameterCollection parameters) { }
        void System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription description, System.ServiceModel.ServiceHostBase serviceHostBase) { }
        void System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription description, System.ServiceModel.ServiceHostBase serviceHostBase) { }
    }
    public sealed partial class ServiceHealthData
    {
        public ServiceHealthData(string key, string[] values) { }
        public string Key { get { throw null; } set { } }
        public string[] Values { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
    }
    public sealed partial class ServiceHealthDataCollection : System.Collections.ObjectModel.KeyedCollection<string, System.ServiceModel.Description.ServiceHealthData>
    {
        public ServiceHealthDataCollection() { }
        public void Add(string key, string value) { }
        public void Add(string key, string[] values) { }
        protected override string GetKeyForItem(System.ServiceModel.Description.ServiceHealthData element) { throw null; }
    }
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceHealth", Namespace="http://schemas.microsoft.com/net/2018/08/health")]
    public partial class ServiceHealthModel
    {
        public const string Namespace = "http://schemas.microsoft.com/net/2018/08/health";
        public ServiceHealthModel() { }
        public ServiceHealthModel(System.ServiceModel.ServiceHostBase serviceHost) { }
        public ServiceHealthModel(System.ServiceModel.ServiceHostBase serviceHost, System.DateTimeOffset serviceStartTime) { }
        [System.Runtime.Serialization.DataMemberAttribute]
        public System.ServiceModel.Description.ServiceHealthModel.ChannelDispatcherModel[] ChannelDispatchers { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        [System.Runtime.Serialization.DataMemberAttribute]
        public System.DateTimeOffset Date { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        [System.Runtime.Serialization.DataMemberAttribute]
        public System.ServiceModel.Description.ServiceHealthModel.ProcessInformationModel ProcessInformation { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        [System.Runtime.Serialization.DataMemberAttribute]
        public System.ServiceModel.Description.ServiceHealthModel.ProcessThreadsModel ProcessThreads { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        [System.Runtime.Serialization.DataMemberAttribute]
        public System.ServiceModel.Description.ServiceHealthModel.ServiceEndpointModel[] ServiceEndpoints { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        [System.Runtime.Serialization.DataMemberAttribute]
        public System.ServiceModel.Description.ServiceHealthModel.ServicePropertiesModel ServiceProperties { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        [System.Runtime.Serialization.DataContractAttribute(Name="ChannelDispatcher", Namespace="http://schemas.microsoft.com/net/2018/08/health")]
        public partial class ChannelDispatcherModel
        {
            public ChannelDispatcherModel() { }
            public ChannelDispatcherModel(System.ServiceModel.Dispatcher.ChannelDispatcherBase channelDispatcher) { }
            [System.Runtime.Serialization.DataMemberAttribute]
            public string BindingName { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
            [System.Runtime.Serialization.DataMemberAttribute]
            public System.ServiceModel.Description.ServiceHealthModel.CommunicationTimeoutsModel CommunicationTimeouts { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
            [System.Runtime.Serialization.DataMemberAttribute]
            public string ContractName { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
            [System.Runtime.Serialization.DataMemberAttribute]
            public bool IsSystemEndpoint { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
            [System.Runtime.Serialization.DataMemberAttribute]
            public System.Nullable<System.ServiceModel.CommunicationState> ListenerState { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
            [System.Runtime.Serialization.DataMemberAttribute]
            public string ListenerUri { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
            [System.Runtime.Serialization.DataMemberAttribute]
            public string MessageEncoder { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
            [System.Runtime.Serialization.DataMemberAttribute]
            public string[] MessageInspectors { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
            [System.Runtime.Serialization.DataMemberAttribute]
            public System.ServiceModel.Description.ServiceHealthModel.ServiceThrottleModel ServiceThrottle { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
            [System.Runtime.Serialization.DataMemberAttribute]
            public System.Nullable<System.ServiceModel.CommunicationState> State { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        }
        [System.Runtime.Serialization.DataContractAttribute]
        public partial class CommunicationTimeoutsModel
        {
            public CommunicationTimeoutsModel() { }
            public CommunicationTimeoutsModel(System.ServiceModel.IDefaultCommunicationTimeouts timeouts) { }
            [System.Runtime.Serialization.DataMemberAttribute]
            public System.TimeSpan CloseTimeout { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
            [System.Runtime.Serialization.DataMemberAttribute]
            public bool HasTimeouts { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
            [System.Runtime.Serialization.DataMemberAttribute]
            public System.TimeSpan OpenTimeout { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
            [System.Runtime.Serialization.DataMemberAttribute]
            public System.TimeSpan ReceiveTimeout { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
            [System.Runtime.Serialization.DataMemberAttribute]
            public System.TimeSpan SendTimeout { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        }
        [System.Runtime.Serialization.DataContractAttribute(Name="ProcessInformation", Namespace="http://schemas.microsoft.com/net/2018/08/health")]
        public partial class ProcessInformationModel
        {
            public ProcessInformationModel() { }
            public ProcessInformationModel(System.ServiceModel.ServiceHostBase serviceHost) { }
            [System.Runtime.Serialization.DataMemberAttribute]
            public int Bitness { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
            [System.Runtime.Serialization.DataMemberAttribute]
            public string GCMode { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
            [System.Runtime.Serialization.DataMemberAttribute]
            public string ProcessName { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
            [System.Runtime.Serialization.DataMemberAttribute]
            public System.DateTimeOffset ProcessStartDate { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
            [System.Runtime.Serialization.DataMemberAttribute]
            public System.DateTimeOffset ServiceStartDate { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
            [System.Runtime.Serialization.DataMemberAttribute]
            public System.ServiceModel.Description.ServiceHealthModel.ProcessThreadsModel Threads { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
            [System.Runtime.Serialization.DataMemberAttribute]
            public System.TimeSpan Uptime { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
            public void SetServiceStartDate(System.DateTimeOffset serviceStartTime) { }
        }
        [System.Runtime.Serialization.DataContractAttribute(Name="ProcessThreads", Namespace="http://schemas.microsoft.com/net/2018/08/health")]
        public partial class ProcessThreadsModel
        {
            public ProcessThreadsModel() { }
            [System.Runtime.Serialization.DataMemberAttribute]
            public int AvailableCompletionPortThreads { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
            [System.Runtime.Serialization.DataMemberAttribute]
            public int AvailableWorkerThreads { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
            [System.Runtime.Serialization.DataMemberAttribute]
            public int MaxCompletionPortThreads { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
            [System.Runtime.Serialization.DataMemberAttribute]
            public int MaxWorkerThreads { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
            [System.Runtime.Serialization.DataMemberAttribute]
            public int MinCompletionPortThreads { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
            [System.Runtime.Serialization.DataMemberAttribute]
            public int MinWorkerThreads { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
            [System.Runtime.Serialization.DataMemberAttribute]
            public int NativeThreadCount { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        }
        [System.Runtime.Serialization.DataContractAttribute(Name="ServiceEndpoint", Namespace="http://schemas.microsoft.com/net/2018/08/health")]
        public partial class ServiceEndpointModel
        {
            public ServiceEndpointModel() { }
            public ServiceEndpointModel(System.ServiceModel.Description.ServiceEndpoint endpoint) { }
            [System.Runtime.Serialization.DataMemberAttribute]
            public string Address { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
            [System.Runtime.Serialization.DataMemberAttribute]
            public string[] BehaviorNames { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
            [System.Runtime.Serialization.DataMemberAttribute]
            public string BindingName { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
            [System.Runtime.Serialization.DataMemberAttribute]
            public string ContractName { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        }
        [System.Runtime.Serialization.DataContractAttribute(Name="ServiceProperties", Namespace="http://schemas.microsoft.com/net/2018/08/health")]
        public partial class ServicePropertiesModel
        {
            public ServicePropertiesModel() { }
            public ServicePropertiesModel(System.ServiceModel.ServiceHostBase serviceHost) { }
            [System.Runtime.Serialization.DataMemberAttribute]
            public string[] BaseAddresses { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
            [System.Runtime.Serialization.DataMemberAttribute]
            public System.Nullable<System.ServiceModel.ConcurrencyMode> ConcurrencyMode { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
            [System.Runtime.Serialization.DataMemberAttribute]
            public System.Nullable<System.ServiceModel.InstanceContextMode> InstanceContextMode { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
            [System.Runtime.Serialization.DataMemberAttribute]
            public string Name { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
            [System.Runtime.Serialization.DataMemberAttribute]
            public string[] ServiceBehaviorNames { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
            [System.Runtime.Serialization.DataMemberAttribute]
            public System.ServiceModel.Description.ServiceHealthModel.ServiceThrottleModel ServiceThrottle { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
            [System.Runtime.Serialization.DataMemberAttribute]
            public string ServiceTypeName { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
            [System.Runtime.Serialization.DataMemberAttribute]
            public System.ServiceModel.CommunicationState State { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        }
        [System.Runtime.Serialization.DataContractAttribute(Name="ServiceThrottle", Namespace="http://schemas.microsoft.com/net/2018/08/health")]
        public partial class ServiceThrottleModel
        {
            public ServiceThrottleModel() { }
            public ServiceThrottleModel(System.ServiceModel.Dispatcher.ServiceThrottle serviceThrottle) { }
            [System.ComponentModel.DefaultValueAttribute(0)]
            [System.Runtime.Serialization.DataMemberAttribute]
            public int CallsCapacity { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
            [System.ComponentModel.DefaultValueAttribute(0)]
            [System.Runtime.Serialization.DataMemberAttribute]
            public int CallsCount { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
            [System.Runtime.Serialization.DataMemberAttribute]
            public bool HasThrottle { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
            [System.ComponentModel.DefaultValueAttribute(0)]
            [System.Runtime.Serialization.DataMemberAttribute]
            public int InstanceContextsCapacity { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
            [System.ComponentModel.DefaultValueAttribute(0)]
            [System.Runtime.Serialization.DataMemberAttribute]
            public int InstanceContextsCount { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
            [System.ComponentModel.DefaultValueAttribute(0)]
            [System.Runtime.Serialization.DataMemberAttribute]
            public int SessionsCapacity { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
            [System.ComponentModel.DefaultValueAttribute(0)]
            [System.Runtime.Serialization.DataMemberAttribute]
            public int SessionsCount { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        }
    }
    public sealed partial class ServiceHealthSection : System.Collections.ObjectModel.Collection<System.ServiceModel.Description.ServiceHealthDataCollection>
    {
        public ServiceHealthSection() { }
        public ServiceHealthSection(string title) { }
        public string BackgroundColor { get { throw null; } set { } }
        public string ForegroundColor { get { throw null; } set { } }
        public string Title { get { throw null; } set { } }
        public System.ServiceModel.Description.ServiceHealthDataCollection CreateElementsCollection() { throw null; }
    }
    public sealed partial class ServiceHealthSectionCollection : System.Collections.ObjectModel.Collection<System.ServiceModel.Description.ServiceHealthSection>
    {
        public ServiceHealthSectionCollection() { }
        public System.ServiceModel.Description.ServiceHealthSection CreateSection(string title) { throw null; }
        public System.ServiceModel.Description.ServiceHealthSection CreateSection(string title, string backgroundColor) { throw null; }
        public System.ServiceModel.Description.ServiceHealthSection CreateSection(string title, string backgroundColor, string foregroundColor) { throw null; }
    }
    public partial class ServiceMetadataBehavior : System.ServiceModel.Description.IServiceBehavior
    {
        public const string MexContractName = "IMetadataExchange";
        public ServiceMetadataBehavior() { }
        [System.ComponentModel.TypeConverterAttribute(typeof(System.UriTypeConverter))]
        public System.Uri ExternalMetadataLocation { get { throw null; } set { } }
        public System.ServiceModel.Channels.Binding HttpGetBinding { get { throw null; } set { } }
        public bool HttpGetEnabled { get { throw null; } set { } }
        [System.ComponentModel.TypeConverterAttribute(typeof(System.UriTypeConverter))]
        public System.Uri HttpGetUrl { get { throw null; } set { } }
        public System.ServiceModel.Channels.Binding HttpsGetBinding { get { throw null; } set { } }
        public bool HttpsGetEnabled { get { throw null; } set { } }
        [System.ComponentModel.TypeConverterAttribute(typeof(System.UriTypeConverter))]
        public System.Uri HttpsGetUrl { get { throw null; } set { } }
        public System.ServiceModel.Description.MetadataExporter MetadataExporter { get { throw null; } set { } }
        void System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription description, System.ServiceModel.ServiceHostBase serviceHostBase, System.Collections.ObjectModel.Collection<System.ServiceModel.Description.ServiceEndpoint> endpoints, System.ServiceModel.Channels.BindingParameterCollection parameters) { }
        void System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription description, System.ServiceModel.ServiceHostBase serviceHostBase) { }
        void System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription description, System.ServiceModel.ServiceHostBase serviceHostBase) { }
    }
    public sealed partial class ServiceMetadataContractBehavior : System.ServiceModel.Description.IContractBehavior
    {
        public ServiceMetadataContractBehavior() { }
        public ServiceMetadataContractBehavior(bool metadataGenerationDisabled) { }
        public bool MetadataGenerationDisabled { get { throw null; } set { } }
        void System.ServiceModel.Description.IContractBehavior.AddBindingParameters(System.ServiceModel.Description.ContractDescription description, System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Channels.BindingParameterCollection parameters) { }
        void System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior(System.ServiceModel.Description.ContractDescription description, System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.ClientRuntime proxy) { }
        void System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ContractDescription description, System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.DispatchRuntime dispatch) { }
        void System.ServiceModel.Description.IContractBehavior.Validate(System.ServiceModel.Description.ContractDescription description, System.ServiceModel.Description.ServiceEndpoint endpoint) { }
    }
    [System.Diagnostics.DebuggerDisplayAttribute("Address={address}")]
    [System.Diagnostics.DebuggerDisplayAttribute("Name={name}")]
    public partial class ServiceMetadataEndpoint : System.ServiceModel.Description.ServiceEndpoint
    {
        public ServiceMetadataEndpoint() : base (default(System.ServiceModel.Description.ContractDescription)) { }
        public ServiceMetadataEndpoint(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress address) : base (default(System.ServiceModel.Description.ContractDescription)) { }
        public ServiceMetadataEndpoint(System.ServiceModel.EndpointAddress address) : base (default(System.ServiceModel.Description.ContractDescription)) { }
    }
    public partial class ServiceMetadataExtension : System.ServiceModel.IExtension<System.ServiceModel.ServiceHostBase>
    {
        public ServiceMetadataExtension() { }
        public System.ServiceModel.Description.MetadataSet Metadata { get { throw null; } }
        public System.Web.Services.Description.ServiceDescription SingleWsdl { get { throw null; } }
        void System.ServiceModel.IExtension<System.ServiceModel.ServiceHostBase>.Attach(System.ServiceModel.ServiceHostBase owner) { }
        void System.ServiceModel.IExtension<System.ServiceModel.ServiceHostBase>.Detach(System.ServiceModel.ServiceHostBase owner) { }
    }
    public sealed partial class ServiceSecurityAuditBehavior : System.ServiceModel.Description.IServiceBehavior
    {
        public ServiceSecurityAuditBehavior() { }
        public System.ServiceModel.AuditLogLocation AuditLogLocation { get { throw null; } set { } }
        public System.ServiceModel.AuditLevel MessageAuthenticationAuditLevel { get { throw null; } set { } }
        public System.ServiceModel.AuditLevel ServiceAuthorizationAuditLevel { get { throw null; } set { } }
        public bool SuppressAuditFailure { get { throw null; } set { } }
        void System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription description, System.ServiceModel.ServiceHostBase serviceHostBase, System.Collections.ObjectModel.Collection<System.ServiceModel.Description.ServiceEndpoint> endpoints, System.ServiceModel.Channels.BindingParameterCollection parameters) { }
        void System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription description, System.ServiceModel.ServiceHostBase serviceHostBase) { }
        void System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription description, System.ServiceModel.ServiceHostBase serviceHostBase) { }
    }
    public partial class ServiceThrottlingBehavior : System.ServiceModel.Description.IServiceBehavior
    {
        public ServiceThrottlingBehavior() { }
        public int MaxConcurrentCalls { get { throw null; } set { } }
        public int MaxConcurrentInstances { get { throw null; } set { } }
        public int MaxConcurrentSessions { get { throw null; } set { } }
        void System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription description, System.ServiceModel.ServiceHostBase serviceHostBase, System.Collections.ObjectModel.Collection<System.ServiceModel.Description.ServiceEndpoint> endpoints, System.ServiceModel.Channels.BindingParameterCollection parameters) { }
        void System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription description, System.ServiceModel.ServiceHostBase serviceHostBase) { }
        void System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription description, System.ServiceModel.ServiceHostBase serviceHostBase) { }
    }
    public partial class SynchronousReceiveBehavior : System.ServiceModel.Description.IEndpointBehavior
    {
        public SynchronousReceiveBehavior() { }
        void System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Channels.BindingParameterCollection parameters) { }
        void System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Dispatcher.ClientRuntime behavior) { }
        void System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Dispatcher.EndpointDispatcher endpointDispatcher) { }
        void System.ServiceModel.Description.IEndpointBehavior.Validate(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint) { }
    }
    public partial class TransactedBatchingBehavior : System.ServiceModel.Description.IEndpointBehavior
    {
        public TransactedBatchingBehavior(int maxBatchSize) { }
        public int MaxBatchSize { get { throw null; } set { } }
        void System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Channels.BindingParameterCollection bindingParameters) { }
        void System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Dispatcher.ClientRuntime behavior) { }
        void System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Dispatcher.EndpointDispatcher endpointDispatcher) { }
        void System.ServiceModel.Description.IEndpointBehavior.Validate(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint) { }
    }
    public abstract partial class TypedMessageConverter
    {
        protected TypedMessageConverter() { }
        public static System.ServiceModel.Description.TypedMessageConverter Create(System.Type messageContract, string action) { throw null; }
        public static System.ServiceModel.Description.TypedMessageConverter Create(System.Type messageContract, string action, System.ServiceModel.DataContractFormatAttribute formatterAttribute) { throw null; }
        public static System.ServiceModel.Description.TypedMessageConverter Create(System.Type messageContract, string action, System.ServiceModel.XmlSerializerFormatAttribute formatterAttribute) { throw null; }
        public static System.ServiceModel.Description.TypedMessageConverter Create(System.Type messageContract, string action, string defaultNamespace) { throw null; }
        public static System.ServiceModel.Description.TypedMessageConverter Create(System.Type messageContract, string action, string defaultNamespace, System.ServiceModel.DataContractFormatAttribute formatterAttribute) { throw null; }
        public static System.ServiceModel.Description.TypedMessageConverter Create(System.Type messageContract, string action, string defaultNamespace, System.ServiceModel.XmlSerializerFormatAttribute formatterAttribute) { throw null; }
        public abstract object FromMessage(System.ServiceModel.Channels.Message message);
        public abstract System.ServiceModel.Channels.Message ToMessage(object typedMessage);
        public abstract System.ServiceModel.Channels.Message ToMessage(object typedMessage, System.ServiceModel.Channels.MessageVersion version);
    }
    public partial class UseRequestHeadersForMetadataAddressBehavior : System.ServiceModel.Description.IServiceBehavior
    {
        public UseRequestHeadersForMetadataAddressBehavior() { }
        public System.Collections.Generic.IDictionary<string, int> DefaultPortsByScheme { get { throw null; } }
        void System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase, System.Collections.ObjectModel.Collection<System.ServiceModel.Description.ServiceEndpoint> endpoints, System.ServiceModel.Channels.BindingParameterCollection bindingParameters) { }
        void System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase) { }
        void System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase) { }
    }
    public partial class WsdlContractConversionContext
    {
        internal WsdlContractConversionContext() { }
        public System.ServiceModel.Description.ContractDescription Contract { get { throw null; } }
        public System.Web.Services.Description.PortType WsdlPortType { get { throw null; } }
        public System.ServiceModel.Description.FaultDescription GetFaultDescription(System.Web.Services.Description.OperationFault operationFault) { throw null; }
        public System.ServiceModel.Description.MessageDescription GetMessageDescription(System.Web.Services.Description.OperationMessage operationMessage) { throw null; }
        public System.Web.Services.Description.Operation GetOperation(System.ServiceModel.Description.OperationDescription operation) { throw null; }
        public System.ServiceModel.Description.OperationDescription GetOperationDescription(System.Web.Services.Description.Operation operation) { throw null; }
        public System.Web.Services.Description.OperationFault GetOperationFault(System.ServiceModel.Description.FaultDescription fault) { throw null; }
        public System.Web.Services.Description.OperationMessage GetOperationMessage(System.ServiceModel.Description.MessageDescription message) { throw null; }
    }
    public partial class WsdlEndpointConversionContext
    {
        internal WsdlEndpointConversionContext() { }
        public System.ServiceModel.Description.WsdlContractConversionContext ContractConversionContext { get { throw null; } }
        public System.ServiceModel.Description.ServiceEndpoint Endpoint { get { throw null; } }
        public System.Web.Services.Description.Binding WsdlBinding { get { throw null; } }
        public System.Web.Services.Description.Port WsdlPort { get { throw null; } }
        public System.Web.Services.Description.FaultBinding GetFaultBinding(System.ServiceModel.Description.FaultDescription fault) { throw null; }
        public System.ServiceModel.Description.FaultDescription GetFaultDescription(System.Web.Services.Description.FaultBinding faultBinding) { throw null; }
        public System.Web.Services.Description.MessageBinding GetMessageBinding(System.ServiceModel.Description.MessageDescription message) { throw null; }
        public System.ServiceModel.Description.MessageDescription GetMessageDescription(System.Web.Services.Description.MessageBinding messageBinding) { throw null; }
        public System.Web.Services.Description.OperationBinding GetOperationBinding(System.ServiceModel.Description.OperationDescription operation) { throw null; }
        public System.ServiceModel.Description.OperationDescription GetOperationDescription(System.Web.Services.Description.OperationBinding operationBinding) { throw null; }
    }
    public partial class WsdlExporter : System.ServiceModel.Description.MetadataExporter
    {
        public WsdlExporter() { }
        public System.Web.Services.Description.ServiceDescriptionCollection GeneratedWsdlDocuments { get { throw null; } }
        public System.Xml.Schema.XmlSchemaSet GeneratedXmlSchemas { get { throw null; } }
        public override void ExportContract(System.ServiceModel.Description.ContractDescription contract) { }
        public override void ExportEndpoint(System.ServiceModel.Description.ServiceEndpoint endpoint) { }
        public void ExportEndpoints(System.Collections.Generic.IEnumerable<System.ServiceModel.Description.ServiceEndpoint> endpoints, System.Xml.XmlQualifiedName wsdlServiceQName) { }
        public override System.ServiceModel.Description.MetadataSet GetGeneratedMetadata() { throw null; }
    }
    public partial class WsdlImporter : System.ServiceModel.Description.MetadataImporter
    {
        public WsdlImporter(System.ServiceModel.Description.MetadataSet metadata) { }
        public WsdlImporter(System.ServiceModel.Description.MetadataSet metadata, System.Collections.Generic.IEnumerable<System.ServiceModel.Description.IPolicyImportExtension> policyImportExtensions, System.Collections.Generic.IEnumerable<System.ServiceModel.Description.IWsdlImportExtension> wsdlImportExtensions) { }
        public WsdlImporter(System.ServiceModel.Description.MetadataSet metadata, System.Collections.Generic.IEnumerable<System.ServiceModel.Description.IPolicyImportExtension> policyImportExtensions, System.Collections.Generic.IEnumerable<System.ServiceModel.Description.IWsdlImportExtension> wsdlImportExtensions, System.ServiceModel.Description.MetadataImporterQuotas quotas) { }
        public System.Web.Services.Description.ServiceDescriptionCollection WsdlDocuments { get { throw null; } }
        public System.Collections.Generic.KeyedByTypeCollection<System.ServiceModel.Description.IWsdlImportExtension> WsdlImportExtensions { get { throw null; } }
        public System.Xml.Schema.XmlSchemaSet XmlSchemas { get { throw null; } }
        public System.Collections.ObjectModel.Collection<System.ServiceModel.Channels.Binding> ImportAllBindings() { throw null; }
        public override System.Collections.ObjectModel.Collection<System.ServiceModel.Description.ContractDescription> ImportAllContracts() { throw null; }
        public override System.ServiceModel.Description.ServiceEndpointCollection ImportAllEndpoints() { throw null; }
        public System.ServiceModel.Channels.Binding ImportBinding(System.Web.Services.Description.Binding wsdlBinding) { throw null; }
        public System.ServiceModel.Description.ContractDescription ImportContract(System.Web.Services.Description.PortType wsdlPortType) { throw null; }
        public System.ServiceModel.Description.ServiceEndpoint ImportEndpoint(System.Web.Services.Description.Port wsdlPort) { throw null; }
        public System.ServiceModel.Description.ServiceEndpointCollection ImportEndpoints(System.Web.Services.Description.Binding wsdlBinding) { throw null; }
        public System.ServiceModel.Description.ServiceEndpointCollection ImportEndpoints(System.Web.Services.Description.PortType wsdlPortType) { throw null; }
        public System.ServiceModel.Description.ServiceEndpointCollection ImportEndpoints(System.Web.Services.Description.Service wsdlService) { throw null; }
    }
    public partial class XmlSerializerMessageContractImporter : System.ServiceModel.Description.IWsdlImportExtension
    {
        public XmlSerializerMessageContractImporter() { }
        void System.ServiceModel.Description.IWsdlImportExtension.BeforeImport(System.Web.Services.Description.ServiceDescriptionCollection wsdlDocuments, System.Xml.Schema.XmlSchemaSet xmlSchemas, System.Collections.Generic.ICollection<System.Xml.XmlElement> policy) { }
        void System.ServiceModel.Description.IWsdlImportExtension.ImportContract(System.ServiceModel.Description.WsdlImporter importer, System.ServiceModel.Description.WsdlContractConversionContext contractContext) { }
        void System.ServiceModel.Description.IWsdlImportExtension.ImportEndpoint(System.ServiceModel.Description.WsdlImporter importer, System.ServiceModel.Description.WsdlEndpointConversionContext endpointContext) { }
    }
    public partial class XmlSerializerOperationBehavior : System.ServiceModel.Description.IOperationBehavior, System.ServiceModel.Description.IWsdlExportExtension
    {
        public XmlSerializerOperationBehavior(System.ServiceModel.Description.OperationDescription operation) { }
        public XmlSerializerOperationBehavior(System.ServiceModel.Description.OperationDescription operation, System.ServiceModel.XmlSerializerFormatAttribute attribute) { }
        public System.ServiceModel.XmlSerializerFormatAttribute XmlSerializerFormatAttribute { get { throw null; } }
        public System.Collections.ObjectModel.Collection<System.Xml.Serialization.XmlMapping> GetXmlMappings() { throw null; }
        void System.ServiceModel.Description.IOperationBehavior.AddBindingParameters(System.ServiceModel.Description.OperationDescription description, System.ServiceModel.Channels.BindingParameterCollection parameters) { }
        void System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior(System.ServiceModel.Description.OperationDescription description, System.ServiceModel.Dispatcher.ClientOperation proxy) { }
        void System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.OperationDescription description, System.ServiceModel.Dispatcher.DispatchOperation dispatch) { }
        void System.ServiceModel.Description.IOperationBehavior.Validate(System.ServiceModel.Description.OperationDescription description) { }
        void System.ServiceModel.Description.IWsdlExportExtension.ExportContract(System.ServiceModel.Description.WsdlExporter exporter, System.ServiceModel.Description.WsdlContractConversionContext contractContext) { }
        void System.ServiceModel.Description.IWsdlExportExtension.ExportEndpoint(System.ServiceModel.Description.WsdlExporter exporter, System.ServiceModel.Description.WsdlEndpointConversionContext endpointContext) { }
    }
}
namespace System.ServiceModel.Diagnostics
{
    public enum PerformanceCounterScope
    {
        All = 2,
        Default = 3,
        Off = 0,
        ServiceOnly = 1,
    }
}
namespace System.ServiceModel.Dispatcher
{
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class ActionMessageFilter : System.ServiceModel.Dispatcher.MessageFilter
    {
        public ActionMessageFilter(params string[] actions) { }
        public System.Collections.ObjectModel.ReadOnlyCollection<string> Actions { get { throw null; } }
        protected internal override System.ServiceModel.Dispatcher.IMessageFilterTable<FilterData> CreateFilterTable<FilterData>() { throw null; }
        public override bool Match(System.ServiceModel.Channels.Message message) { throw null; }
        public override bool Match(System.ServiceModel.Channels.MessageBuffer messageBuffer) { throw null; }
    }
    public partial class ChannelDispatcher : System.ServiceModel.Dispatcher.ChannelDispatcherBase
    {
        public ChannelDispatcher(System.ServiceModel.Channels.IChannelListener listener) { }
        public ChannelDispatcher(System.ServiceModel.Channels.IChannelListener listener, string bindingName) { }
        public ChannelDispatcher(System.ServiceModel.Channels.IChannelListener listener, string bindingName, System.ServiceModel.IDefaultCommunicationTimeouts timeouts) { }
        public bool AsynchronousTransactedAcceptEnabled { get { throw null; } set { } }
        public string BindingName { get { throw null; } }
        public System.Collections.Generic.SynchronizedCollection<System.ServiceModel.Dispatcher.IChannelInitializer> ChannelInitializers { get { throw null; } }
        protected override System.TimeSpan DefaultCloseTimeout { get { throw null; } }
        protected override System.TimeSpan DefaultOpenTimeout { get { throw null; } }
        public System.Collections.Generic.SynchronizedCollection<System.ServiceModel.Dispatcher.EndpointDispatcher> Endpoints { get { throw null; } }
        public System.Collections.ObjectModel.Collection<System.ServiceModel.Dispatcher.IErrorHandler> ErrorHandlers { get { throw null; } }
        public override System.ServiceModel.ServiceHostBase Host { get { throw null; } }
        public bool IncludeExceptionDetailInFaults { get { throw null; } set { } }
        public bool IsTransactedAccept { get { throw null; } }
        public bool IsTransactedReceive { get { throw null; } set { } }
        public override System.ServiceModel.Channels.IChannelListener Listener { get { throw null; } }
        public bool ManualAddressing { get { throw null; } set { } }
        public int MaxPendingReceives { get { throw null; } set { } }
        public int MaxTransactedBatchSize { get { throw null; } set { } }
        public System.ServiceModel.Channels.MessageVersion MessageVersion { get { throw null; } set { } }
        public bool ReceiveContextEnabled { get { throw null; } set { } }
        public bool ReceiveSynchronously { get { throw null; } set { } }
        public bool SendAsynchronously { get { throw null; } set { } }
        public System.ServiceModel.Dispatcher.ServiceThrottle ServiceThrottle { get { throw null; } set { } }
        public System.Transactions.IsolationLevel TransactionIsolationLevel { get { throw null; } set { } }
        public System.TimeSpan TransactionTimeout { get { throw null; } set { } }
        protected override void Attach(System.ServiceModel.ServiceHostBase host) { }
        public override void CloseInput() { }
        protected override void Detach(System.ServiceModel.ServiceHostBase host) { }
        protected override void OnAbort() { }
        protected override System.IAsyncResult OnBeginClose(System.TimeSpan timeout, System.AsyncCallback callback, object state) { throw null; }
        protected override System.IAsyncResult OnBeginOpen(System.TimeSpan timeout, System.AsyncCallback callback, object state) { throw null; }
        protected override void OnClose(System.TimeSpan timeout) { }
        protected override void OnClosed() { }
        protected override void OnEndClose(System.IAsyncResult result) { }
        protected override void OnEndOpen(System.IAsyncResult result) { }
        protected override void OnOpen(System.TimeSpan timeout) { }
        protected override void OnOpened() { }
        protected override void OnOpening() { }
    }
    public abstract partial class ChannelDispatcherBase : System.ServiceModel.Channels.CommunicationObject
    {
        protected ChannelDispatcherBase() { }
        public abstract System.ServiceModel.ServiceHostBase Host { get; }
        public abstract System.ServiceModel.Channels.IChannelListener Listener { get; }
        protected virtual void Attach(System.ServiceModel.ServiceHostBase host) { }
        public virtual void CloseInput() { }
        protected virtual void Detach(System.ServiceModel.ServiceHostBase host) { }
    }
    public partial class ChannelDispatcherCollection : System.Collections.Generic.SynchronizedCollection<System.ServiceModel.Dispatcher.ChannelDispatcherBase>
    {
        internal ChannelDispatcherCollection() { }
        protected override void ClearItems() { }
        protected override void InsertItem(int index, System.ServiceModel.Dispatcher.ChannelDispatcherBase item) { }
        protected override void RemoveItem(int index) { }
        protected override void SetItem(int index, System.ServiceModel.Dispatcher.ChannelDispatcherBase item) { }
    }
    public sealed partial class ClientOperation : System.ServiceModel.Dispatcher.ClientOperationCompatBase
    {
        public ClientOperation(System.ServiceModel.Dispatcher.ClientRuntime parent, string name, string action) { }
        public ClientOperation(System.ServiceModel.Dispatcher.ClientRuntime parent, string name, string action, string replyAction) { }
        public string Action { get { throw null; } }
        public System.Reflection.MethodInfo BeginMethod { get { throw null; } set { } }
        public System.Collections.Generic.ICollection<System.ServiceModel.Dispatcher.IParameterInspector> ClientParameterInspectors { get { throw null; } }
        public bool DeserializeReply { get { throw null; } set { } }
        public System.Reflection.MethodInfo EndMethod { get { throw null; } set { } }
        public System.Collections.Generic.SynchronizedCollection<System.ServiceModel.Dispatcher.FaultContractInfo> FaultContractInfos { get { throw null; } }
        public System.ServiceModel.Dispatcher.IClientMessageFormatter Formatter { get { throw null; } set { } }
        public bool IsInitiating { get { throw null; } set { } }
        public bool IsOneWay { get { throw null; } set { } }
        public bool IsTerminating { get { throw null; } set { } }
        public string Name { get { throw null; } }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public new System.Collections.Generic.SynchronizedCollection<System.ServiceModel.Dispatcher.IParameterInspector> ParameterInspectors { get { throw null; } }
        public System.ServiceModel.Dispatcher.ClientRuntime Parent { get { throw null; } }
        public string ReplyAction { get { throw null; } }
        public bool SerializeRequest { get { throw null; } set { } }
        public System.Reflection.MethodInfo SyncMethod { get { throw null; } set { } }
        public System.Reflection.MethodInfo TaskMethod { get { throw null; } set { } }
        public System.Type TaskTResult { get { throw null; } set { } }
    }
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
    public partial class ClientOperationCompatBase
    {
        internal ClientOperationCompatBase() { }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)]
        public System.Collections.Generic.IList<System.ServiceModel.Dispatcher.IParameterInspector> ParameterInspectors { get { throw null; } }
    }
    public sealed partial class ClientRuntime : System.ServiceModel.Dispatcher.ClientRuntimeCompatBase
    {
        internal ClientRuntime() { }
        public System.Type CallbackClientType { get { throw null; } set { } }
        public System.ServiceModel.Dispatcher.DispatchRuntime CallbackDispatchRuntime { get { throw null; } }
        public System.Collections.Generic.SynchronizedCollection<System.ServiceModel.Dispatcher.IChannelInitializer> ChannelInitializers { get { throw null; } }
        public System.Collections.Generic.ICollection<System.ServiceModel.Dispatcher.IClientMessageInspector> ClientMessageInspectors { get { throw null; } }
        public System.Collections.Generic.ICollection<System.ServiceModel.Dispatcher.ClientOperation> ClientOperations { get { throw null; } }
        public System.Type ContractClientType { get { throw null; } set { } }
        public string ContractName { get { throw null; } }
        public string ContractNamespace { get { throw null; } }
        public System.Collections.Generic.SynchronizedCollection<System.ServiceModel.Dispatcher.IInteractiveChannelInitializer> InteractiveChannelInitializers { get { throw null; } }
        public bool ManualAddressing { get { throw null; } set { } }
        public int MaxFaultSize { get { throw null; } set { } }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public new System.Collections.Generic.SynchronizedCollection<System.ServiceModel.Dispatcher.IClientMessageInspector> MessageInspectors { get { throw null; } }
        public bool MessageVersionNoneFaultsEnabled { get { throw null; } set { } }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public new System.Collections.Generic.SynchronizedKeyedCollection<string, System.ServiceModel.Dispatcher.ClientOperation> Operations { get { throw null; } }
        public System.ServiceModel.Dispatcher.IClientOperationSelector OperationSelector { get { throw null; } set { } }
        public System.ServiceModel.Dispatcher.ClientOperation UnhandledClientOperation { get { throw null; } }
        public bool ValidateMustUnderstand { get { throw null; } set { } }
        public System.Uri Via { get { throw null; } set { } }
    }
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
    public partial class ClientRuntimeCompatBase
    {
        internal ClientRuntimeCompatBase() { }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)]
        public System.Collections.Generic.IList<System.ServiceModel.Dispatcher.IClientMessageInspector> MessageInspectors { get { throw null; } }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)]
        public System.Collections.ObjectModel.KeyedCollection<string, System.ServiceModel.Dispatcher.ClientOperation> Operations { get { throw null; } }
    }
    public sealed partial class DispatchOperation
    {
        public DispatchOperation(System.ServiceModel.Dispatcher.DispatchRuntime parent, string name, string action) { }
        public DispatchOperation(System.ServiceModel.Dispatcher.DispatchRuntime parent, string name, string action, string replyAction) { }
        public string Action { get { throw null; } }
        public bool AutoDisposeParameters { get { throw null; } set { } }
        public System.Collections.Generic.SynchronizedCollection<System.ServiceModel.Dispatcher.ICallContextInitializer> CallContextInitializers { get { throw null; } }
        public bool DeserializeRequest { get { throw null; } set { } }
        public System.Collections.Generic.SynchronizedCollection<System.ServiceModel.Dispatcher.FaultContractInfo> FaultContractInfos { get { throw null; } }
        public System.ServiceModel.Dispatcher.IDispatchMessageFormatter Formatter { get { throw null; } set { } }
        public System.ServiceModel.ImpersonationOption Impersonation { get { throw null; } set { } }
        public System.ServiceModel.Dispatcher.IOperationInvoker Invoker { get { throw null; } set { } }
        public bool IsInsideTransactedReceiveScope { get { throw null; } set { } }
        public bool IsOneWay { get { throw null; } }
        public bool IsTerminating { get { throw null; } set { } }
        public string Name { get { throw null; } }
        public System.Collections.Generic.SynchronizedCollection<System.ServiceModel.Dispatcher.IParameterInspector> ParameterInspectors { get { throw null; } }
        public System.ServiceModel.Dispatcher.DispatchRuntime Parent { get { throw null; } }
        public bool ReleaseInstanceAfterCall { get { throw null; } set { } }
        public bool ReleaseInstanceBeforeCall { get { throw null; } set { } }
        public string ReplyAction { get { throw null; } }
        public bool SerializeReply { get { throw null; } set { } }
        public bool TransactionAutoComplete { get { throw null; } set { } }
        public bool TransactionRequired { get { throw null; } set { } }
    }
    public sealed partial class DispatchRuntime
    {
        internal DispatchRuntime() { }
        public bool AutomaticInputSessionShutdown { get { throw null; } set { } }
        public System.ServiceModel.Dispatcher.ClientRuntime CallbackClientRuntime { get { throw null; } }
        public System.ServiceModel.Dispatcher.ChannelDispatcher ChannelDispatcher { get { throw null; } }
        public System.ServiceModel.ConcurrencyMode ConcurrencyMode { get { throw null; } set { } }
        public System.ServiceModel.Dispatcher.EndpointDispatcher EndpointDispatcher { get { throw null; } }
        public bool EnsureOrderedDispatch { get { throw null; } set { } }
        public System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.Policy.IAuthorizationPolicy> ExternalAuthorizationPolicies { get { throw null; } set { } }
        public bool IgnoreTransactionMessageProperty { get { throw null; } set { } }
        public bool ImpersonateCallerForAllOperations { get { throw null; } set { } }
        public bool ImpersonateOnSerializingReply { get { throw null; } set { } }
        public System.Collections.Generic.SynchronizedCollection<System.ServiceModel.Dispatcher.IInputSessionShutdown> InputSessionShutdownHandlers { get { throw null; } }
        public System.Collections.Generic.SynchronizedCollection<System.ServiceModel.Dispatcher.IInstanceContextInitializer> InstanceContextInitializers { get { throw null; } }
        public System.ServiceModel.Dispatcher.IInstanceContextProvider InstanceContextProvider { get { throw null; } set { } }
        public System.ServiceModel.Dispatcher.IInstanceProvider InstanceProvider { get { throw null; } set { } }
        public System.ServiceModel.AuditLevel MessageAuthenticationAuditLevel { get { throw null; } set { } }
        public System.Collections.Generic.SynchronizedCollection<System.ServiceModel.Dispatcher.IDispatchMessageInspector> MessageInspectors { get { throw null; } }
        public System.Collections.Generic.SynchronizedKeyedCollection<string, System.ServiceModel.Dispatcher.DispatchOperation> Operations { get { throw null; } }
        public System.ServiceModel.Dispatcher.IDispatchOperationSelector OperationSelector { get { throw null; } set { } }
        public bool PreserveMessage { get { throw null; } set { } }
        public System.ServiceModel.Description.PrincipalPermissionMode PrincipalPermissionMode { get { throw null; } set { } }
        public bool ReleaseServiceInstanceOnTransactionComplete { get { throw null; } set { } }
        public System.Web.Security.RoleProvider RoleProvider { get { throw null; } set { } }
        public System.ServiceModel.AuditLogLocation SecurityAuditLogLocation { get { throw null; } set { } }
        public System.ServiceModel.ServiceAuthenticationManager ServiceAuthenticationManager { get { throw null; } set { } }
        public System.ServiceModel.AuditLevel ServiceAuthorizationAuditLevel { get { throw null; } set { } }
        public System.ServiceModel.ServiceAuthorizationManager ServiceAuthorizationManager { get { throw null; } set { } }
        public System.ServiceModel.InstanceContext SingletonInstanceContext { get { throw null; } set { } }
        public bool SuppressAuditFailure { get { throw null; } set { } }
        public System.Threading.SynchronizationContext SynchronizationContext { get { throw null; } set { } }
        public bool TransactionAutoCompleteOnSessionClose { get { throw null; } set { } }
        public System.Type Type { get { throw null; } set { } }
        public System.ServiceModel.Dispatcher.DispatchOperation UnhandledDispatchOperation { get { throw null; } set { } }
        public bool ValidateMustUnderstand { get { throw null; } set { } }
    }
    public partial class EndpointAddressMessageFilter : System.ServiceModel.Dispatcher.MessageFilter
    {
        public EndpointAddressMessageFilter(System.ServiceModel.EndpointAddress address) { }
        public EndpointAddressMessageFilter(System.ServiceModel.EndpointAddress address, bool includeHostNameInComparison) { }
        public System.ServiceModel.EndpointAddress Address { get { throw null; } }
        public bool IncludeHostNameInComparison { get { throw null; } }
        protected internal override System.ServiceModel.Dispatcher.IMessageFilterTable<FilterData> CreateFilterTable<FilterData>() { throw null; }
        public override bool Match(System.ServiceModel.Channels.Message message) { throw null; }
        public override bool Match(System.ServiceModel.Channels.MessageBuffer messageBuffer) { throw null; }
    }
    public partial class EndpointDispatcher
    {
        public EndpointDispatcher(System.ServiceModel.EndpointAddress address, string contractName, string contractNamespace) { }
        public EndpointDispatcher(System.ServiceModel.EndpointAddress address, string contractName, string contractNamespace, bool isSystemEndpoint) { }
        public System.ServiceModel.Dispatcher.MessageFilter AddressFilter { get { throw null; } set { } }
        public System.ServiceModel.Dispatcher.ChannelDispatcher ChannelDispatcher { get { throw null; } }
        public System.ServiceModel.Dispatcher.MessageFilter ContractFilter { get { throw null; } set { } }
        public string ContractName { get { throw null; } }
        public string ContractNamespace { get { throw null; } }
        public System.ServiceModel.Dispatcher.DispatchRuntime DispatchRuntime { get { throw null; } }
        public System.ServiceModel.EndpointAddress EndpointAddress { get { throw null; } }
        public int FilterPriority { get { throw null; } set { } }
        public bool IsSystemEndpoint { get { throw null; } }
    }
    public abstract partial class ExceptionHandler
    {
        protected ExceptionHandler() { }
        public static System.ServiceModel.Dispatcher.ExceptionHandler AlwaysHandle { get { throw null; } }
        public static System.ServiceModel.Dispatcher.ExceptionHandler AsynchronousThreadExceptionHandler { [System.Runtime.ConstrainedExecution.ReliabilityContractAttribute(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)]get { throw null; } [System.Security.SecuritySafeCriticalAttribute][System.Security.Permissions.SecurityPermissionAttribute(System.Security.Permissions.SecurityAction.LinkDemand, UnmanagedCode=true)]set { } }
        public static System.ServiceModel.Dispatcher.ExceptionHandler TransportExceptionHandler { get { throw null; } set { } }
        public abstract bool HandleException(System.Exception exception);
    }
    public partial class FaultContractInfo
    {
        public FaultContractInfo(string action, System.Type detail) { }
        public string Action { get { throw null; } }
        public System.Type Detail { get { throw null; } }
    }
    [System.SerializableAttribute]
    public partial class FilterInvalidBodyAccessException : System.ServiceModel.Dispatcher.InvalidBodyAccessException
    {
        public FilterInvalidBodyAccessException() : base (default(System.Runtime.Serialization.SerializationInfo), default(System.Runtime.Serialization.StreamingContext)) { }
        protected FilterInvalidBodyAccessException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base (default(System.Runtime.Serialization.SerializationInfo), default(System.Runtime.Serialization.StreamingContext)) { }
        public FilterInvalidBodyAccessException(string message) : base (default(System.Runtime.Serialization.SerializationInfo), default(System.Runtime.Serialization.StreamingContext)) { }
        public FilterInvalidBodyAccessException(string message, System.Collections.ObjectModel.Collection<System.ServiceModel.Dispatcher.MessageFilter> filters) : base (default(System.Runtime.Serialization.SerializationInfo), default(System.Runtime.Serialization.StreamingContext)) { }
        public FilterInvalidBodyAccessException(string message, System.Exception innerException) : base (default(System.Runtime.Serialization.SerializationInfo), default(System.Runtime.Serialization.StreamingContext)) { }
        public FilterInvalidBodyAccessException(string message, System.Exception innerException, System.Collections.ObjectModel.Collection<System.ServiceModel.Dispatcher.MessageFilter> filters) : base (default(System.Runtime.Serialization.SerializationInfo), default(System.Runtime.Serialization.StreamingContext)) { }
        public System.Collections.ObjectModel.Collection<System.ServiceModel.Dispatcher.MessageFilter> Filters { get { throw null; } }
    }
    public partial interface ICallContextInitializer
    {
        void AfterInvoke(object correlationState);
        object BeforeInvoke(System.ServiceModel.InstanceContext instanceContext, System.ServiceModel.IClientChannel channel, System.ServiceModel.Channels.Message message);
    }
    public partial interface IChannelInitializer
    {
        void Initialize(System.ServiceModel.IClientChannel channel);
    }
    public partial interface IClientMessageFormatter
    {
        object DeserializeReply(System.ServiceModel.Channels.Message message, object[] parameters);
        System.ServiceModel.Channels.Message SerializeRequest(System.ServiceModel.Channels.MessageVersion messageVersion, object[] parameters);
    }
    public partial interface IClientMessageInspector
    {
        void AfterReceiveReply(ref System.ServiceModel.Channels.Message reply, object correlationState);
        object BeforeSendRequest(ref System.ServiceModel.Channels.Message request, System.ServiceModel.IClientChannel channel);
    }
    public partial interface IClientOperationSelector
    {
        bool AreParametersRequiredForSelection { get; }
        string SelectOperation(System.Reflection.MethodBase method, object[] parameters);
    }
    public partial interface IDispatchMessageFormatter
    {
        void DeserializeRequest(System.ServiceModel.Channels.Message message, object[] parameters);
        System.ServiceModel.Channels.Message SerializeReply(System.ServiceModel.Channels.MessageVersion messageVersion, object[] parameters, object result);
    }
    public partial interface IDispatchMessageInspector
    {
        object AfterReceiveRequest(ref System.ServiceModel.Channels.Message request, System.ServiceModel.IClientChannel channel, System.ServiceModel.InstanceContext instanceContext);
        void BeforeSendReply(ref System.ServiceModel.Channels.Message reply, object correlationState);
    }
    public partial interface IDispatchOperationSelector
    {
        string SelectOperation(ref System.ServiceModel.Channels.Message message);
    }
    public partial interface IErrorHandler
    {
        bool HandleError(System.Exception error);
        void ProvideFault(System.Exception error, System.ServiceModel.Channels.MessageVersion version, ref System.ServiceModel.Channels.Message fault);
    }
    public partial interface IInputSessionShutdown
    {
        void ChannelFaulted(System.ServiceModel.IDuplexContextChannel channel);
        void DoneReceiving(System.ServiceModel.IDuplexContextChannel channel);
    }
    public partial interface IInstanceContextInitializer
    {
        void Initialize(System.ServiceModel.InstanceContext instanceContext, System.ServiceModel.Channels.Message message);
    }
    public partial interface IInstanceContextProvider
    {
        System.ServiceModel.InstanceContext GetExistingInstanceContext(System.ServiceModel.Channels.Message message, System.ServiceModel.IContextChannel channel);
        void InitializeInstanceContext(System.ServiceModel.InstanceContext instanceContext, System.ServiceModel.Channels.Message message, System.ServiceModel.IContextChannel channel);
        bool IsIdle(System.ServiceModel.InstanceContext instanceContext);
        void NotifyIdle(System.ServiceModel.Dispatcher.InstanceContextIdleCallback callback, System.ServiceModel.InstanceContext instanceContext);
    }
    public partial interface IInstanceProvider
    {
        object GetInstance(System.ServiceModel.InstanceContext instanceContext);
        object GetInstance(System.ServiceModel.InstanceContext instanceContext, System.ServiceModel.Channels.Message message);
        void ReleaseInstance(System.ServiceModel.InstanceContext instanceContext, object instance);
    }
    public partial interface IInteractiveChannelInitializer
    {
        System.IAsyncResult BeginDisplayInitializationUI(System.ServiceModel.IClientChannel channel, System.AsyncCallback callback, object state);
        void EndDisplayInitializationUI(System.IAsyncResult result);
    }
    public partial interface IMessageFilterTable<TFilterData> : System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageFilter, TFilterData>>, System.Collections.Generic.IDictionary<System.ServiceModel.Dispatcher.MessageFilter, TFilterData>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageFilter, TFilterData>>, System.Collections.IEnumerable
    {
        bool GetMatchingFilter(System.ServiceModel.Channels.Message message, out System.ServiceModel.Dispatcher.MessageFilter filter);
        bool GetMatchingFilter(System.ServiceModel.Channels.MessageBuffer messageBuffer, out System.ServiceModel.Dispatcher.MessageFilter filter);
        bool GetMatchingFilters(System.ServiceModel.Channels.Message message, System.Collections.Generic.ICollection<System.ServiceModel.Dispatcher.MessageFilter> results);
        bool GetMatchingFilters(System.ServiceModel.Channels.MessageBuffer messageBuffer, System.Collections.Generic.ICollection<System.ServiceModel.Dispatcher.MessageFilter> results);
        bool GetMatchingValue(System.ServiceModel.Channels.Message message, out TFilterData value);
        bool GetMatchingValue(System.ServiceModel.Channels.MessageBuffer messageBuffer, out TFilterData value);
        bool GetMatchingValues(System.ServiceModel.Channels.Message message, System.Collections.Generic.ICollection<TFilterData> results);
        bool GetMatchingValues(System.ServiceModel.Channels.MessageBuffer messageBuffer, System.Collections.Generic.ICollection<TFilterData> results);
    }
    public delegate void InstanceContextIdleCallback(System.ServiceModel.InstanceContext instanceContext);
    [System.SerializableAttribute]
    public abstract partial class InvalidBodyAccessException : System.SystemException
    {
        protected InvalidBodyAccessException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
        protected InvalidBodyAccessException(string message) { }
        protected InvalidBodyAccessException(string message, System.Exception innerException) { }
    }
    public partial interface IOperationInvoker
    {
        bool IsSynchronous { get; }
        object[] AllocateInputs();
        object Invoke(object instance, object[] inputs, out object[] outputs);
        System.IAsyncResult InvokeBegin(object instance, object[] inputs, System.AsyncCallback callback, object state);
        object InvokeEnd(object instance, out object[] outputs, System.IAsyncResult result);
    }
    public partial interface IParameterInspector
    {
        void AfterCall(string operationName, object[] outputs, object returnValue, object correlationState);
        object BeforeCall(string operationName, object[] inputs);
    }
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class MatchAllMessageFilter : System.ServiceModel.Dispatcher.MessageFilter
    {
        public MatchAllMessageFilter() { }
        public override bool Match(System.ServiceModel.Channels.Message message) { throw null; }
        public override bool Match(System.ServiceModel.Channels.MessageBuffer messageBuffer) { throw null; }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class MatchNoneMessageFilter : System.ServiceModel.Dispatcher.MessageFilter
    {
        public MatchNoneMessageFilter() { }
        public override bool Match(System.ServiceModel.Channels.Message message) { throw null; }
        public override bool Match(System.ServiceModel.Channels.MessageBuffer messageBuffer) { throw null; }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.ServiceModel.Dispatcher.ActionMessageFilter))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.ServiceModel.Dispatcher.MatchAllMessageFilter))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.ServiceModel.Dispatcher.MatchNoneMessageFilter))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.ServiceModel.Dispatcher.XPathMessageFilter))]
    public abstract partial class MessageFilter
    {
        protected MessageFilter() { }
        protected internal virtual System.ServiceModel.Dispatcher.IMessageFilterTable<FilterData> CreateFilterTable<FilterData>() { throw null; }
        public abstract bool Match(System.ServiceModel.Channels.Message message);
        public abstract bool Match(System.ServiceModel.Channels.MessageBuffer buffer);
    }
    [System.SerializableAttribute]
    public partial class MessageFilterException : System.ServiceModel.CommunicationException
    {
        public MessageFilterException() { }
        protected MessageFilterException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
        public MessageFilterException(string message) { }
        public MessageFilterException(string message, System.Collections.ObjectModel.Collection<System.ServiceModel.Dispatcher.MessageFilter> filters) { }
        public MessageFilterException(string message, System.Exception innerException) { }
        public MessageFilterException(string message, System.Exception innerException, System.Collections.ObjectModel.Collection<System.ServiceModel.Dispatcher.MessageFilter> filters) { }
        public System.Collections.ObjectModel.Collection<System.ServiceModel.Dispatcher.MessageFilter> Filters { get { throw null; } }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class MessageFilterTable<TFilterData> : System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageFilter, TFilterData>>, System.Collections.Generic.IDictionary<System.ServiceModel.Dispatcher.MessageFilter, TFilterData>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageFilter, TFilterData>>, System.Collections.IEnumerable, System.ServiceModel.Dispatcher.IMessageFilterTable<TFilterData>
    {
        public MessageFilterTable() { }
        public MessageFilterTable(int defaultPriority) { }
        public int Count { get { throw null; } }
        [System.Runtime.Serialization.DataMemberAttribute]
        public int DefaultPriority { get { throw null; } set { } }
        public bool IsReadOnly { get { throw null; } }
        public TFilterData this[System.ServiceModel.Dispatcher.MessageFilter filter] { get { throw null; } set { } }
        public System.Collections.Generic.ICollection<System.ServiceModel.Dispatcher.MessageFilter> Keys { get { throw null; } }
        public System.Collections.Generic.ICollection<TFilterData> Values { get { throw null; } }
        public void Add(System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageFilter, TFilterData> item) { }
        public void Add(System.ServiceModel.Dispatcher.MessageFilter filter, TFilterData data) { }
        public void Add(System.ServiceModel.Dispatcher.MessageFilter filter, TFilterData data, int priority) { }
        public void Clear() { }
        public bool Contains(System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageFilter, TFilterData> item) { throw null; }
        public bool ContainsKey(System.ServiceModel.Dispatcher.MessageFilter filter) { throw null; }
        public void CopyTo(System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageFilter, TFilterData>[] array, int arrayIndex) { }
        protected virtual System.ServiceModel.Dispatcher.IMessageFilterTable<TFilterData> CreateFilterTable(System.ServiceModel.Dispatcher.MessageFilter filter) { throw null; }
        public System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageFilter, TFilterData>> GetEnumerator() { throw null; }
        public bool GetMatchingFilter(System.ServiceModel.Channels.Message message, out System.ServiceModel.Dispatcher.MessageFilter filter) { throw null; }
        public bool GetMatchingFilter(System.ServiceModel.Channels.MessageBuffer buffer, out System.ServiceModel.Dispatcher.MessageFilter filter) { throw null; }
        public bool GetMatchingFilters(System.ServiceModel.Channels.Message message, System.Collections.Generic.ICollection<System.ServiceModel.Dispatcher.MessageFilter> results) { throw null; }
        public bool GetMatchingFilters(System.ServiceModel.Channels.MessageBuffer buffer, System.Collections.Generic.ICollection<System.ServiceModel.Dispatcher.MessageFilter> results) { throw null; }
        public bool GetMatchingValue(System.ServiceModel.Channels.Message message, out TFilterData data) { throw null; }
        public bool GetMatchingValue(System.ServiceModel.Channels.MessageBuffer buffer, out TFilterData data) { throw null; }
        public bool GetMatchingValues(System.ServiceModel.Channels.Message message, System.Collections.Generic.ICollection<TFilterData> results) { throw null; }
        public bool GetMatchingValues(System.ServiceModel.Channels.MessageBuffer buffer, System.Collections.Generic.ICollection<TFilterData> results) { throw null; }
        public int GetPriority(System.ServiceModel.Dispatcher.MessageFilter filter) { throw null; }
        public bool Remove(System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageFilter, TFilterData> item) { throw null; }
        public bool Remove(System.ServiceModel.Dispatcher.MessageFilter filter) { throw null; }
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { throw null; }
        public bool TryGetValue(System.ServiceModel.Dispatcher.MessageFilter filter, out TFilterData data) { throw null; }
    }
    public abstract partial class MessageQuery
    {
        protected MessageQuery() { }
        public virtual System.ServiceModel.Dispatcher.MessageQueryCollection CreateMessageQueryCollection() { throw null; }
        public abstract TResult Evaluate<TResult>(System.ServiceModel.Channels.Message message);
        public abstract TResult Evaluate<TResult>(System.ServiceModel.Channels.MessageBuffer buffer);
    }
    public abstract partial class MessageQueryCollection : System.Collections.ObjectModel.Collection<System.ServiceModel.Dispatcher.MessageQuery>
    {
        protected MessageQueryCollection() { }
        public abstract System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageQuery, TResult>> Evaluate<TResult>(System.ServiceModel.Channels.Message message);
        public abstract System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageQuery, TResult>> Evaluate<TResult>(System.ServiceModel.Channels.MessageBuffer buffer);
    }
    public partial class MessageQueryTable<TItem> : System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageQuery, TItem>>, System.Collections.Generic.IDictionary<System.ServiceModel.Dispatcher.MessageQuery, TItem>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageQuery, TItem>>, System.Collections.IEnumerable
    {
        public MessageQueryTable() { }
        public int Count { get { throw null; } }
        public bool IsReadOnly { get { throw null; } }
        public TItem this[System.ServiceModel.Dispatcher.MessageQuery key] { get { throw null; } set { } }
        public System.Collections.Generic.ICollection<System.ServiceModel.Dispatcher.MessageQuery> Keys { get { throw null; } }
        public System.Collections.Generic.ICollection<TItem> Values { get { throw null; } }
        public void Add(System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageQuery, TItem> item) { }
        public void Add(System.ServiceModel.Dispatcher.MessageQuery key, TItem value) { }
        public void Clear() { }
        public bool Contains(System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageQuery, TItem> item) { throw null; }
        public bool ContainsKey(System.ServiceModel.Dispatcher.MessageQuery key) { throw null; }
        public void CopyTo(System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageQuery, TItem>[] array, int arrayIndex) { }
        public System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageQuery, TResult>> Evaluate<TResult>(System.ServiceModel.Channels.Message message) { throw null; }
        public System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageQuery, TResult>> Evaluate<TResult>(System.ServiceModel.Channels.MessageBuffer buffer) { throw null; }
        public System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageQuery, TItem>> GetEnumerator() { throw null; }
        public bool Remove(System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageQuery, TItem> item) { throw null; }
        public bool Remove(System.ServiceModel.Dispatcher.MessageQuery key) { throw null; }
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { throw null; }
        public bool TryGetValue(System.ServiceModel.Dispatcher.MessageQuery key, out TItem value) { throw null; }
    }
    [System.SerializableAttribute]
    public partial class MultipleFilterMatchesException : System.SystemException
    {
        public MultipleFilterMatchesException() { }
        protected MultipleFilterMatchesException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
        public MultipleFilterMatchesException(string message) { }
        public MultipleFilterMatchesException(string message, System.Collections.ObjectModel.Collection<System.ServiceModel.Dispatcher.MessageFilter> filters) { }
        public MultipleFilterMatchesException(string message, System.Exception innerException) { }
        public MultipleFilterMatchesException(string message, System.Exception innerException, System.Collections.ObjectModel.Collection<System.ServiceModel.Dispatcher.MessageFilter> filters) { }
        public System.Collections.ObjectModel.Collection<System.ServiceModel.Dispatcher.MessageFilter> Filters { get { throw null; } }
    }
    [System.SerializableAttribute]
    public partial class NavigatorInvalidBodyAccessException : System.ServiceModel.Dispatcher.InvalidBodyAccessException
    {
        public NavigatorInvalidBodyAccessException() : base (default(System.Runtime.Serialization.SerializationInfo), default(System.Runtime.Serialization.StreamingContext)) { }
        protected NavigatorInvalidBodyAccessException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base (default(System.Runtime.Serialization.SerializationInfo), default(System.Runtime.Serialization.StreamingContext)) { }
        public NavigatorInvalidBodyAccessException(string message) : base (default(System.Runtime.Serialization.SerializationInfo), default(System.Runtime.Serialization.StreamingContext)) { }
        public NavigatorInvalidBodyAccessException(string message, System.Exception innerException) : base (default(System.Runtime.Serialization.SerializationInfo), default(System.Runtime.Serialization.StreamingContext)) { }
    }
    public partial class PrefixEndpointAddressMessageFilter : System.ServiceModel.Dispatcher.MessageFilter
    {
        public PrefixEndpointAddressMessageFilter(System.ServiceModel.EndpointAddress address) { }
        public PrefixEndpointAddressMessageFilter(System.ServiceModel.EndpointAddress address, bool includeHostNameInComparison) { }
        public System.ServiceModel.EndpointAddress Address { get { throw null; } }
        public bool IncludeHostNameInComparison { get { throw null; } }
        protected internal override System.ServiceModel.Dispatcher.IMessageFilterTable<FilterData> CreateFilterTable<FilterData>() { throw null; }
        public override bool Match(System.ServiceModel.Channels.Message message) { throw null; }
        public override bool Match(System.ServiceModel.Channels.MessageBuffer messageBuffer) { throw null; }
    }
    public abstract partial class SeekableXPathNavigator : System.Xml.XPath.XPathNavigator
    {
        protected SeekableXPathNavigator() { }
        public abstract long CurrentPosition { get; set; }
        public abstract System.Xml.XmlNodeOrder ComparePosition(long firstPosition, long secondPosition);
        public abstract string GetLocalName(long nodePosition);
        public abstract string GetName(long nodePosition);
        public abstract string GetNamespace(long nodePosition);
        public abstract System.Xml.XPath.XPathNodeType GetNodeType(long nodePosition);
        public abstract string GetValue(long nodePosition);
    }
    public sealed partial class ServiceThrottle
    {
        internal ServiceThrottle() { }
        public int MaxConcurrentCalls { get { throw null; } set { } }
        public int MaxConcurrentInstances { get { throw null; } set { } }
        public int MaxConcurrentSessions { get { throw null; } set { } }
    }
    [System.ComponentModel.TypeConverterAttribute(typeof(System.ServiceModel.XamlIntegration.XPathMessageContextTypeConverter))]
    public partial class XPathMessageContext : System.Xml.Xsl.XsltContext
    {
        public XPathMessageContext() { }
        public XPathMessageContext(System.Xml.NameTable table) { }
        public override bool Whitespace { get { throw null; } }
        public override int CompareDocument(string baseUri, string nextBaseUri) { throw null; }
        public override bool PreserveWhitespace(System.Xml.XPath.XPathNavigator node) { throw null; }
        public override System.Xml.Xsl.IXsltContextFunction ResolveFunction(string prefix, string name, System.Xml.XPath.XPathResultType[] argTypes) { throw null; }
        public override System.Xml.Xsl.IXsltContextVariable ResolveVariable(string prefix, string name) { throw null; }
    }
    [System.Xml.Serialization.XmlRootAttribute(ElementName="XPathMessageFilter", Namespace="http://schemas.microsoft.com/serviceModel/2004/05/xpathfilter")]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("StaticGetSchema")]
    public partial class XPathMessageFilter : System.ServiceModel.Dispatcher.MessageFilter, System.Xml.Serialization.IXmlSerializable
    {
        public XPathMessageFilter() { }
        public XPathMessageFilter(string xpath) { }
        public XPathMessageFilter(string xpath, System.Xml.XmlNamespaceManager namespaces) { }
        public XPathMessageFilter(string xpath, System.Xml.Xsl.XsltContext context) { }
        public XPathMessageFilter(System.Xml.XmlReader reader) { }
        public XPathMessageFilter(System.Xml.XmlReader reader, System.Xml.XmlNamespaceManager namespaces) { }
        public XPathMessageFilter(System.Xml.XmlReader reader, System.Xml.Xsl.XsltContext context) { }
        public System.Xml.XmlNamespaceManager Namespaces { get { throw null; } }
        public int NodeQuota { get { throw null; } set { } }
        public string XPath { get { throw null; } }
        protected internal override System.ServiceModel.Dispatcher.IMessageFilterTable<FilterData> CreateFilterTable<FilterData>() { throw null; }
        public override bool Match(System.ServiceModel.Channels.Message message) { throw null; }
        public override bool Match(System.ServiceModel.Channels.MessageBuffer messageBuffer) { throw null; }
        public bool Match(System.ServiceModel.Dispatcher.SeekableXPathNavigator navigator) { throw null; }
        public bool Match(System.Xml.XPath.XPathNavigator navigator) { throw null; }
        protected virtual System.Xml.Schema.XmlSchema OnGetSchema() { throw null; }
        protected virtual void OnReadXml(System.Xml.XmlReader reader) { }
        protected virtual void OnWriteXml(System.Xml.XmlWriter writer) { }
        protected void ReadXPath(System.Xml.XmlReader reader, System.Xml.XmlNamespaceManager namespaces) { }
        public static System.Xml.Schema.XmlSchemaType StaticGetSchema(System.Xml.Schema.XmlSchemaSet schemas) { throw null; }
        System.Xml.Schema.XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema() { throw null; }
        void System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader reader) { }
        void System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter writer) { }
        public void TrimToSize() { }
        protected void WriteXPath(System.Xml.XmlWriter writer, System.Xml.IXmlNamespaceResolver resolver) { }
        public void WriteXPathTo(System.Xml.XmlWriter writer, string prefix, string localName, string ns, bool writeNamespaces) { }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class XPathMessageFilterTable<TFilterData> : System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageFilter, TFilterData>>, System.Collections.Generic.IDictionary<System.ServiceModel.Dispatcher.MessageFilter, TFilterData>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageFilter, TFilterData>>, System.Collections.IEnumerable, System.ServiceModel.Dispatcher.IMessageFilterTable<TFilterData>
    {
        public XPathMessageFilterTable() { }
        public XPathMessageFilterTable(int capacity) { }
        public int Count { get { throw null; } }
        public bool IsReadOnly { get { throw null; } }
        public TFilterData this[System.ServiceModel.Dispatcher.MessageFilter filter] { get { throw null; } set { } }
        public System.Collections.Generic.ICollection<System.ServiceModel.Dispatcher.MessageFilter> Keys { get { throw null; } }
        [System.Runtime.Serialization.DataMemberAttribute]
        public int NodeQuota { get { throw null; } set { } }
        public System.Collections.Generic.ICollection<TFilterData> Values { get { throw null; } }
        public void Add(System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageFilter, TFilterData> item) { }
        public void Add(System.ServiceModel.Dispatcher.MessageFilter filter, TFilterData data) { }
        public void Add(System.ServiceModel.Dispatcher.XPathMessageFilter filter, TFilterData data) { }
        public void Clear() { }
        public bool Contains(System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageFilter, TFilterData> item) { throw null; }
        public bool ContainsKey(System.ServiceModel.Dispatcher.MessageFilter filter) { throw null; }
        public void CopyTo(System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageFilter, TFilterData>[] array, int arrayIndex) { }
        public System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageFilter, TFilterData>> GetEnumerator() { throw null; }
        public bool GetMatchingFilter(System.ServiceModel.Channels.Message message, out System.ServiceModel.Dispatcher.MessageFilter filter) { throw null; }
        public bool GetMatchingFilter(System.ServiceModel.Channels.MessageBuffer messageBuffer, out System.ServiceModel.Dispatcher.MessageFilter filter) { throw null; }
        public bool GetMatchingFilter(System.ServiceModel.Dispatcher.SeekableXPathNavigator navigator, out System.ServiceModel.Dispatcher.MessageFilter filter) { throw null; }
        public bool GetMatchingFilter(System.Xml.XPath.XPathNavigator navigator, out System.ServiceModel.Dispatcher.MessageFilter filter) { throw null; }
        public bool GetMatchingFilters(System.ServiceModel.Channels.Message message, System.Collections.Generic.ICollection<System.ServiceModel.Dispatcher.MessageFilter> results) { throw null; }
        public bool GetMatchingFilters(System.ServiceModel.Channels.MessageBuffer messageBuffer, System.Collections.Generic.ICollection<System.ServiceModel.Dispatcher.MessageFilter> results) { throw null; }
        public bool GetMatchingFilters(System.ServiceModel.Dispatcher.SeekableXPathNavigator navigator, System.Collections.Generic.ICollection<System.ServiceModel.Dispatcher.MessageFilter> results) { throw null; }
        public bool GetMatchingFilters(System.Xml.XPath.XPathNavigator navigator, System.Collections.Generic.ICollection<System.ServiceModel.Dispatcher.MessageFilter> results) { throw null; }
        public bool GetMatchingValue(System.ServiceModel.Channels.Message message, out TFilterData data) { throw null; }
        public bool GetMatchingValue(System.ServiceModel.Channels.MessageBuffer messageBuffer, out TFilterData data) { throw null; }
        public bool GetMatchingValue(System.ServiceModel.Dispatcher.SeekableXPathNavigator navigator, out TFilterData data) { throw null; }
        public bool GetMatchingValue(System.Xml.XPath.XPathNavigator navigator, out TFilterData data) { throw null; }
        public bool GetMatchingValues(System.ServiceModel.Channels.Message message, System.Collections.Generic.ICollection<TFilterData> results) { throw null; }
        public bool GetMatchingValues(System.ServiceModel.Channels.MessageBuffer messageBuffer, System.Collections.Generic.ICollection<TFilterData> results) { throw null; }
        public bool GetMatchingValues(System.ServiceModel.Dispatcher.SeekableXPathNavigator navigator, System.Collections.Generic.ICollection<TFilterData> results) { throw null; }
        public bool GetMatchingValues(System.Xml.XPath.XPathNavigator navigator, System.Collections.Generic.ICollection<TFilterData> results) { throw null; }
        public bool Remove(System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageFilter, TFilterData> item) { throw null; }
        public bool Remove(System.ServiceModel.Dispatcher.MessageFilter filter) { throw null; }
        public bool Remove(System.ServiceModel.Dispatcher.XPathMessageFilter filter) { throw null; }
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { throw null; }
        public void TrimToSize() { }
        public bool TryGetValue(System.ServiceModel.Dispatcher.MessageFilter filter, out TFilterData data) { throw null; }
    }
    public partial class XPathMessageQueryCollection : System.ServiceModel.Dispatcher.MessageQueryCollection
    {
        public XPathMessageQueryCollection() { }
        public override System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageQuery, TResult>> Evaluate<TResult>(System.ServiceModel.Channels.Message message) { throw null; }
        public override System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageQuery, TResult>> Evaluate<TResult>(System.ServiceModel.Channels.MessageBuffer buffer) { throw null; }
        protected override void InsertItem(int index, System.ServiceModel.Dispatcher.MessageQuery item) { }
        protected override void RemoveItem(int index) { }
        protected override void SetItem(int index, System.ServiceModel.Dispatcher.MessageQuery item) { }
    }
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(string[]))]
    [System.SerializableAttribute]
    public partial class XPathNavigatorException : System.Xml.XPath.XPathException
    {
        public XPathNavigatorException() { }
        protected XPathNavigatorException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
        public XPathNavigatorException(string message) { }
        public XPathNavigatorException(string message, System.Exception innerException) { }
    }
    public sealed partial class XPathResult : System.IDisposable
    {
        internal XPathResult() { }
        public System.Xml.XPath.XPathResultType ResultType { get { throw null; } }
        public void Dispose() { }
        public bool GetResultAsBoolean() { throw null; }
        public System.Xml.XPath.XPathNodeIterator GetResultAsNodeset() { throw null; }
        public double GetResultAsNumber() { throw null; }
        public string GetResultAsString() { throw null; }
    }
}
namespace System.ServiceModel.MsmqIntegration
{
    public partial class MsmqIntegrationBinding : System.ServiceModel.MsmqBindingBase
    {
        public MsmqIntegrationBinding() { }
        public MsmqIntegrationBinding(System.ServiceModel.MsmqIntegration.MsmqIntegrationSecurityMode securityMode) { }
        public MsmqIntegrationBinding(string configurationName) { }
        public System.ServiceModel.MsmqIntegration.MsmqIntegrationSecurity Security { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(System.ServiceModel.MsmqIntegration.MsmqMessageSerializationFormat.Xml)]
        public System.ServiceModel.MsmqIntegration.MsmqMessageSerializationFormat SerializationFormat { get { throw null; } set { } }
        public override System.ServiceModel.Channels.BindingElementCollection CreateBindingElements() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeSecurity() { throw null; }
    }
    public sealed partial class MsmqIntegrationBindingElement : System.ServiceModel.Channels.MsmqBindingElementBase
    {
        public MsmqIntegrationBindingElement() { }
        public override string Scheme { get { throw null; } }
        public System.ServiceModel.MsmqIntegration.MsmqMessageSerializationFormat SerializationFormat { get { throw null; } set { } }
        public System.Type[] TargetSerializationTypes { get { throw null; } set { } }
        public override System.ServiceModel.Channels.IChannelFactory<TChannel> BuildChannelFactory<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override System.ServiceModel.Channels.IChannelListener<TChannel> BuildChannelListener<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override bool CanBuildChannelFactory<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override bool CanBuildChannelListener<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override System.ServiceModel.Channels.BindingElement Clone() { throw null; }
        public override T GetProperty<T>(System.ServiceModel.Channels.BindingContext context) { throw null; }
    }
    public sealed partial class MsmqIntegrationMessageProperty
    {
        public const string Name = "MsmqIntegrationMessageProperty";
        public MsmqIntegrationMessageProperty() { }
        public System.Nullable<System.Messaging.AcknowledgeTypes> AcknowledgeType { get { throw null; } set { } }
        public System.Nullable<System.Messaging.Acknowledgment> Acknowledgment { get { throw null; } }
        public System.Uri AdministrationQueue { get { throw null; } set { } }
        public System.Nullable<int> AppSpecific { get { throw null; } set { } }
        public System.Nullable<System.DateTime> ArrivedTime { get { throw null; } }
        public System.Nullable<bool> Authenticated { get { throw null; } }
        public object Body { get { throw null; } set { } }
        public System.Nullable<int> BodyType { get { throw null; } set { } }
        public string CorrelationId { get { throw null; } set { } }
        public System.Uri DestinationQueue { get { throw null; } }
        public byte[] Extension { get { throw null; } set { } }
        public string Id { get { throw null; } }
        public string Label { get { throw null; } set { } }
        public System.Nullable<System.Messaging.MessageType> MessageType { get { throw null; } }
        public System.Nullable<System.Messaging.MessagePriority> Priority { get { throw null; } set { } }
        public System.Uri ResponseQueue { get { throw null; } set { } }
        public byte[] SenderId { get { throw null; } }
        public System.Nullable<System.DateTime> SentTime { get { throw null; } }
        public System.Nullable<System.TimeSpan> TimeToReachQueue { get { throw null; } set { } }
        public static System.ServiceModel.MsmqIntegration.MsmqIntegrationMessageProperty Get(System.ServiceModel.Channels.Message message) { throw null; }
    }
    public sealed partial class MsmqIntegrationSecurity
    {
        public MsmqIntegrationSecurity() { }
        [System.ComponentModel.DefaultValueAttribute(System.ServiceModel.MsmqIntegration.MsmqIntegrationSecurityMode.Transport)]
        public System.ServiceModel.MsmqIntegration.MsmqIntegrationSecurityMode Mode { get { throw null; } set { } }
        public System.ServiceModel.MsmqTransportSecurity Transport { get { throw null; } set { } }
    }
    public enum MsmqIntegrationSecurityMode
    {
        None = 0,
        Transport = 1,
    }
    public enum MsmqMessageSerializationFormat
    {
        ActiveX = 2,
        Binary = 1,
        ByteArray = 3,
        Stream = 4,
        Xml = 0,
    }
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public sealed partial class MsmqMessage<T>
    {
        public MsmqMessage(T body) { }
        public System.Nullable<System.Messaging.AcknowledgeTypes> AcknowledgeType { get { throw null; } set { } }
        public System.Nullable<System.Messaging.Acknowledgment> Acknowledgment { get { throw null; } }
        public System.Uri AdministrationQueue { get { throw null; } set { } }
        public System.Nullable<int> AppSpecific { get { throw null; } set { } }
        public System.Nullable<System.DateTime> ArrivedTime { get { throw null; } }
        public System.Nullable<bool> Authenticated { get { throw null; } }
        public T Body { get { throw null; } set { } }
        public System.Nullable<int> BodyType { get { throw null; } set { } }
        public string CorrelationId { get { throw null; } set { } }
        public System.Uri DestinationQueue { get { throw null; } }
        public byte[] Extension { get { throw null; } set { } }
        public string Id { get { throw null; } }
        public string Label { get { throw null; } set { } }
        public System.Nullable<System.Messaging.MessageType> MessageType { get { throw null; } }
        public System.Nullable<System.Messaging.MessagePriority> Priority { get { throw null; } set { } }
        public System.Uri ResponseQueue { get { throw null; } set { } }
        public byte[] SenderId { get { throw null; } }
        public System.Nullable<System.DateTime> SentTime { get { throw null; } }
        public System.Nullable<System.TimeSpan> TimeToReachQueue { get { throw null; } set { } }
    }
}
namespace System.ServiceModel.PeerResolvers
{
    [System.ObsoleteAttribute("PeerChannel feature is obsolete and will be removed in the future.", false)]
    [System.ServiceModel.ServiceBehaviorAttribute(UseSynchronizationContext=false, InstanceContextMode=System.ServiceModel.InstanceContextMode.Single, ConcurrencyMode=System.ServiceModel.ConcurrencyMode.Multiple)]
    public partial class CustomPeerResolverService : System.ServiceModel.PeerResolvers.IPeerResolverContract
    {
        public CustomPeerResolverService() { }
        public System.TimeSpan CleanupInterval { get { throw null; } set { } }
        public bool ControlShape { get { throw null; } set { } }
        public System.TimeSpan RefreshInterval { get { throw null; } set { } }
        public virtual void Close() { }
        public virtual System.ServiceModel.PeerResolvers.ServiceSettingsResponseInfo GetServiceSettings() { throw null; }
        public virtual void Open() { }
        public virtual System.ServiceModel.PeerResolvers.RefreshResponseInfo Refresh(System.ServiceModel.PeerResolvers.RefreshInfo refreshInfo) { throw null; }
        public virtual System.ServiceModel.PeerResolvers.RegisterResponseInfo Register(System.Guid clientId, string meshId, System.ServiceModel.PeerNodeAddress address) { throw null; }
        public virtual System.ServiceModel.PeerResolvers.RegisterResponseInfo Register(System.ServiceModel.PeerResolvers.RegisterInfo registerInfo) { throw null; }
        public virtual System.ServiceModel.PeerResolvers.ResolveResponseInfo Resolve(System.ServiceModel.PeerResolvers.ResolveInfo resolveInfo) { throw null; }
        public virtual void Unregister(System.ServiceModel.PeerResolvers.UnregisterInfo unregisterInfo) { }
        public virtual System.ServiceModel.PeerResolvers.RegisterResponseInfo Update(System.ServiceModel.PeerResolvers.UpdateInfo updateInfo) { throw null; }
    }
    [System.ServiceModel.ServiceContractAttribute(Name="IPeerResolverContract", Namespace="http://schemas.microsoft.com/net/2006/05/peer/resolver", SessionMode=System.ServiceModel.SessionMode.Allowed)]
    public partial interface IPeerResolverContract
    {
        [System.ServiceModel.OperationContractAttribute(IsOneWay=false, Name="GetServiceInfo", Action="http://schemas.microsoft.com/net/2006/05/peer/resolver/GetServiceSettings", ReplyAction="http://schemas.microsoft.com/net/2006/05/peer/resolver/GetServiceSettingsResponse")]
        System.ServiceModel.PeerResolvers.ServiceSettingsResponseInfo GetServiceSettings();
        [System.ServiceModel.OperationContractAttribute(IsOneWay=false, Name="Refresh", Action="http://schemas.microsoft.com/net/2006/05/peer/resolver/Refresh", ReplyAction="http://schemas.microsoft.com/net/2006/05/peer/resolver/RefreshResponse")]
        System.ServiceModel.PeerResolvers.RefreshResponseInfo Refresh(System.ServiceModel.PeerResolvers.RefreshInfo refreshInfo);
        [System.ServiceModel.OperationContractAttribute(IsOneWay=false, Name="Register", Action="http://schemas.microsoft.com/net/2006/05/peer/resolver/Register", ReplyAction="http://schemas.microsoft.com/net/2006/05/peer/resolver/RegisterResponse")]
        System.ServiceModel.PeerResolvers.RegisterResponseInfo Register(System.ServiceModel.PeerResolvers.RegisterInfo registerInfo);
        [System.ServiceModel.OperationContractAttribute(IsOneWay=false, Name="Resolve", Action="http://schemas.microsoft.com/net/2006/05/peer/resolver/Resolve", ReplyAction="http://schemas.microsoft.com/net/2006/05/peer/resolver/ResolveResponse")]
        System.ServiceModel.PeerResolvers.ResolveResponseInfo Resolve(System.ServiceModel.PeerResolvers.ResolveInfo resolveInfo);
        [System.ServiceModel.OperationContractAttribute(IsOneWay=false, Name="Unregister", Action="http://schemas.microsoft.com/net/2006/05/peer/resolver/Unregister")]
        void Unregister(System.ServiceModel.PeerResolvers.UnregisterInfo unregisterInfo);
        [System.ServiceModel.OperationContractAttribute(IsOneWay=false, Name="Update", Action="http://schemas.microsoft.com/net/2006/05/peer/resolver/Update", ReplyAction="http://schemas.microsoft.com/net/2006/05/peer/resolver/UpdateResponse")]
        System.ServiceModel.PeerResolvers.RegisterResponseInfo Update(System.ServiceModel.PeerResolvers.UpdateInfo updateInfo);
    }
    public partial class PeerCustomResolverSettings
    {
        public PeerCustomResolverSettings() { }
        public System.ServiceModel.EndpointAddress Address { get { throw null; } set { } }
        public System.ServiceModel.Channels.Binding Binding { get { throw null; } set { } }
        public bool IsBindingSpecified { get { throw null; } }
        public System.ServiceModel.PeerResolver Resolver { get { throw null; } set { } }
    }
    public enum PeerReferralPolicy
    {
        DoNotShare = 2,
        Service = 0,
        Share = 1,
    }
    public enum PeerResolverMode
    {
        Auto = 0,
        Custom = 2,
        Pnrp = 1,
    }
    public partial class PeerResolverSettings
    {
        public PeerResolverSettings() { }
        public System.ServiceModel.PeerResolvers.PeerCustomResolverSettings Custom { get { throw null; } }
        public System.ServiceModel.PeerResolvers.PeerResolverMode Mode { get { throw null; } set { } }
        public System.ServiceModel.PeerResolvers.PeerReferralPolicy ReferralPolicy { get { throw null; } set { } }
    }
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class RefreshInfo
    {
        public RefreshInfo() { }
        public RefreshInfo(string meshId, System.Guid regId) { }
        public string MeshId { get { throw null; } }
        public System.Guid RegistrationId { get { throw null; } }
        public bool HasBody() { throw null; }
    }
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class RefreshResponseInfo
    {
        public RefreshResponseInfo() { }
        public RefreshResponseInfo(System.TimeSpan registrationLifetime, System.ServiceModel.PeerResolvers.RefreshResult result) { }
        public System.TimeSpan RegistrationLifetime { get { throw null; } set { } }
        public System.ServiceModel.PeerResolvers.RefreshResult Result { get { throw null; } set { } }
        public bool HasBody() { throw null; }
    }
    public enum RefreshResult
    {
        RegistrationNotFound = 1,
        Success = 0,
    }
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class RegisterInfo
    {
        public RegisterInfo() { }
        public RegisterInfo(System.Guid client, string meshId, System.ServiceModel.PeerNodeAddress address) { }
        public System.Guid ClientId { get { throw null; } }
        public string MeshId { get { throw null; } }
        public System.ServiceModel.PeerNodeAddress NodeAddress { get { throw null; } }
        public bool HasBody() { throw null; }
    }
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class RegisterResponseInfo
    {
        public RegisterResponseInfo() { }
        public RegisterResponseInfo(System.Guid registrationId, System.TimeSpan registrationLifetime) { }
        public System.Guid RegistrationId { get { throw null; } set { } }
        public System.TimeSpan RegistrationLifetime { get { throw null; } set { } }
        public bool HasBody() { throw null; }
    }
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class ResolveInfo
    {
        public ResolveInfo() { }
        public ResolveInfo(System.Guid clientId, string meshId, int maxAddresses) { }
        public System.Guid ClientId { get { throw null; } }
        public int MaxAddresses { get { throw null; } }
        public string MeshId { get { throw null; } }
        public bool HasBody() { throw null; }
    }
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class ResolveResponseInfo
    {
        public ResolveResponseInfo() { }
        public ResolveResponseInfo(System.ServiceModel.PeerNodeAddress[] addresses) { }
        public System.Collections.Generic.IList<System.ServiceModel.PeerNodeAddress> Addresses { get { throw null; } set { } }
        public bool HasBody() { throw null; }
    }
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class ServiceSettingsResponseInfo
    {
        public ServiceSettingsResponseInfo() { }
        public ServiceSettingsResponseInfo(bool control) { }
        public bool ControlMeshShape { get { throw null; } set { } }
        public bool HasBody() { throw null; }
    }
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class UnregisterInfo
    {
        public UnregisterInfo() { }
        public UnregisterInfo(string meshId, System.Guid registrationId) { }
        public string MeshId { get { throw null; } }
        public System.Guid RegistrationId { get { throw null; } }
        public bool HasBody() { throw null; }
    }
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class UpdateInfo
    {
        public UpdateInfo() { }
        public UpdateInfo(System.Guid registrationId, System.Guid client, string meshId, System.ServiceModel.PeerNodeAddress address) { }
        public System.Guid ClientId { get { throw null; } }
        public string MeshId { get { throw null; } }
        public System.ServiceModel.PeerNodeAddress NodeAddress { get { throw null; } }
        public System.Guid RegistrationId { get { throw null; } }
        public bool HasBody() { throw null; }
    }
}
namespace System.ServiceModel.Security
{
    public partial class Basic128SecurityAlgorithmSuite : System.ServiceModel.Security.SecurityAlgorithmSuite
    {
        public Basic128SecurityAlgorithmSuite() { }
        public override string DefaultAsymmetricKeyWrapAlgorithm { get { throw null; } }
        public override string DefaultAsymmetricSignatureAlgorithm { get { throw null; } }
        public override string DefaultCanonicalizationAlgorithm { get { throw null; } }
        public override string DefaultDigestAlgorithm { get { throw null; } }
        public override string DefaultEncryptionAlgorithm { get { throw null; } }
        public override int DefaultEncryptionKeyDerivationLength { get { throw null; } }
        public override int DefaultSignatureKeyDerivationLength { get { throw null; } }
        public override int DefaultSymmetricKeyLength { get { throw null; } }
        public override string DefaultSymmetricKeyWrapAlgorithm { get { throw null; } }
        public override string DefaultSymmetricSignatureAlgorithm { get { throw null; } }
        public override bool IsAsymmetricKeyLengthSupported(int length) { throw null; }
        public override bool IsSymmetricKeyLengthSupported(int length) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class Basic192SecurityAlgorithmSuite : System.ServiceModel.Security.SecurityAlgorithmSuite
    {
        public Basic192SecurityAlgorithmSuite() { }
        public override string DefaultAsymmetricKeyWrapAlgorithm { get { throw null; } }
        public override string DefaultAsymmetricSignatureAlgorithm { get { throw null; } }
        public override string DefaultCanonicalizationAlgorithm { get { throw null; } }
        public override string DefaultDigestAlgorithm { get { throw null; } }
        public override string DefaultEncryptionAlgorithm { get { throw null; } }
        public override int DefaultEncryptionKeyDerivationLength { get { throw null; } }
        public override int DefaultSignatureKeyDerivationLength { get { throw null; } }
        public override int DefaultSymmetricKeyLength { get { throw null; } }
        public override string DefaultSymmetricKeyWrapAlgorithm { get { throw null; } }
        public override string DefaultSymmetricSignatureAlgorithm { get { throw null; } }
        public override bool IsAsymmetricKeyLengthSupported(int length) { throw null; }
        public override bool IsSymmetricKeyLengthSupported(int length) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class Basic256SecurityAlgorithmSuite : System.ServiceModel.Security.SecurityAlgorithmSuite
    {
        public Basic256SecurityAlgorithmSuite() { }
        public override string DefaultAsymmetricKeyWrapAlgorithm { get { throw null; } }
        public override string DefaultAsymmetricSignatureAlgorithm { get { throw null; } }
        public override string DefaultCanonicalizationAlgorithm { get { throw null; } }
        public override string DefaultDigestAlgorithm { get { throw null; } }
        public override string DefaultEncryptionAlgorithm { get { throw null; } }
        public override int DefaultEncryptionKeyDerivationLength { get { throw null; } }
        public override int DefaultSignatureKeyDerivationLength { get { throw null; } }
        public override int DefaultSymmetricKeyLength { get { throw null; } }
        public override string DefaultSymmetricKeyWrapAlgorithm { get { throw null; } }
        public override string DefaultSymmetricSignatureAlgorithm { get { throw null; } }
        public override bool IsAsymmetricKeyLengthSupported(int length) { throw null; }
        public override bool IsSymmetricKeyLengthSupported(int length) { throw null; }
        public override string ToString() { throw null; }
    }
    public abstract partial class BasicSecurityProfileVersion
    {
        internal BasicSecurityProfileVersion() { }
        public static System.ServiceModel.Security.BasicSecurityProfileVersion BasicSecurityProfile10 { get { throw null; } }
    }
    public partial class ChannelProtectionRequirements
    {
        public ChannelProtectionRequirements() { }
        public ChannelProtectionRequirements(System.ServiceModel.Security.ChannelProtectionRequirements other) { }
        public System.ServiceModel.Security.ScopedMessagePartSpecification IncomingEncryptionParts { get { throw null; } }
        public System.ServiceModel.Security.ScopedMessagePartSpecification IncomingSignatureParts { get { throw null; } }
        public bool IsReadOnly { get { throw null; } }
        public System.ServiceModel.Security.ScopedMessagePartSpecification OutgoingEncryptionParts { get { throw null; } }
        public System.ServiceModel.Security.ScopedMessagePartSpecification OutgoingSignatureParts { get { throw null; } }
        public void Add(System.ServiceModel.Security.ChannelProtectionRequirements protectionRequirements) { }
        public void Add(System.ServiceModel.Security.ChannelProtectionRequirements protectionRequirements, bool channelScopeOnly) { }
        public System.ServiceModel.Security.ChannelProtectionRequirements CreateInverse() { throw null; }
        public void MakeReadOnly() { }
    }
    public partial class DataProtectionSecurityStateEncoder : System.ServiceModel.Security.SecurityStateEncoder
    {
        public DataProtectionSecurityStateEncoder() { }
        public DataProtectionSecurityStateEncoder(bool useCurrentUserProtectionScope) { }
        public DataProtectionSecurityStateEncoder(bool useCurrentUserProtectionScope, byte[] entropy) { }
        public bool UseCurrentUserProtectionScope { get { throw null; } }
        protected internal override byte[] DecodeSecurityState(byte[] data) { throw null; }
        protected internal override byte[] EncodeSecurityState(byte[] data) { throw null; }
        public byte[] GetEntropy() { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class DispatchContext
    {
        public DispatchContext() { }
        public System.Security.Claims.ClaimsPrincipal Principal { get { throw null; } set { } }
        public string RequestAction { get { throw null; } set { } }
        public System.IdentityModel.Protocols.WSTrust.WSTrustMessage RequestMessage { get { throw null; } set { } }
        public string ResponseAction { get { throw null; } set { } }
        public System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse ResponseMessage { get { throw null; } set { } }
        public System.IdentityModel.SecurityTokenService SecurityTokenService { get { throw null; } set { } }
        public string TrustNamespace { get { throw null; } set { } }
    }
    [System.SerializableAttribute]
    public partial class ExpiredSecurityTokenException : System.ServiceModel.Security.MessageSecurityException
    {
        public ExpiredSecurityTokenException() { }
        protected ExpiredSecurityTokenException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
        public ExpiredSecurityTokenException(string message) { }
        public ExpiredSecurityTokenException(string message, System.Exception innerException) { }
    }
    public sealed partial class HttpDigestClientCredential
    {
        internal HttpDigestClientCredential() { }
        public System.Security.Principal.TokenImpersonationLevel AllowedImpersonationLevel { get { throw null; } set { } }
        public System.Net.NetworkCredential ClientCredential { get { throw null; } set { } }
    }
    public abstract partial class IdentityVerifier
    {
        protected IdentityVerifier() { }
        public abstract bool CheckAccess(System.ServiceModel.EndpointIdentity identity, System.IdentityModel.Policy.AuthorizationContext authContext);
        public static System.ServiceModel.Security.IdentityVerifier CreateDefault() { throw null; }
        public abstract bool TryGetIdentity(System.ServiceModel.EndpointAddress reference, out System.ServiceModel.EndpointIdentity identity);
    }
    public partial interface IEndpointIdentityProvider
    {
        System.ServiceModel.EndpointIdentity GetIdentityOfSelf(System.IdentityModel.Selectors.SecurityTokenRequirement tokenRequirement);
    }
    public partial class ImpersonateOnSerializingReplyMessageProperty : System.ServiceModel.Channels.IMessageProperty
    {
        internal ImpersonateOnSerializingReplyMessageProperty() { }
        public static string Name { get { throw null; } }
        public System.ServiceModel.Channels.IMessageProperty CreateCopy() { throw null; }
        [System.Security.SecuritySafeCriticalAttribute]
        public void StartImpersonation(out System.IDisposable impersonationContext, out System.Security.Principal.IPrincipal originalPrincipal, out bool isThreadPrincipalSet) { throw null; }
        [System.Security.SecuritySafeCriticalAttribute]
        public void StopImpersonation(System.IDisposable impersonationContext, System.Security.Principal.IPrincipal originalPrincipal, bool isThreadPrincipalSet) { }
        public static bool TryGet(System.ServiceModel.Channels.Message message, out System.ServiceModel.Security.ImpersonateOnSerializingReplyMessageProperty property) { throw null; }
        public static bool TryGet(System.ServiceModel.Channels.MessageProperties properties, out System.ServiceModel.Security.ImpersonateOnSerializingReplyMessageProperty property) { throw null; }
    }
    public partial class InfocardInteractiveChannelInitializer : System.ServiceModel.Dispatcher.IInteractiveChannelInitializer
    {
        public InfocardInteractiveChannelInitializer(System.ServiceModel.Description.ClientCredentials credentials, System.ServiceModel.Channels.Binding binding) { }
        public System.ServiceModel.Channels.Binding Binding { get { throw null; } }
        public virtual System.IAsyncResult BeginDisplayInitializationUI(System.ServiceModel.IClientChannel channel, System.AsyncCallback callback, object state) { throw null; }
        public virtual void EndDisplayInitializationUI(System.IAsyncResult result) { }
    }
    public partial interface ISecureConversationSession : System.ServiceModel.Channels.ISession, System.ServiceModel.Security.ISecuritySession
    {
        bool TryReadSessionTokenIdentifier(System.Xml.XmlReader reader);
        void WriteSessionTokenIdentifier(System.Xml.XmlDictionaryWriter writer);
    }
    public partial interface ISecuritySession : System.ServiceModel.Channels.ISession
    {
        System.ServiceModel.EndpointIdentity RemoteIdentity { get; }
    }
    public sealed partial class IssuedTokenClientCredential
    {
        internal IssuedTokenClientCredential() { }
        public bool CacheIssuedTokens { get { throw null; } set { } }
        public System.ServiceModel.Security.SecurityKeyEntropyMode DefaultKeyEntropyMode { get { throw null; } set { } }
        public int IssuedTokenRenewalThresholdPercentage { get { throw null; } set { } }
        public System.Collections.Generic.Dictionary<System.Uri, System.Collections.Generic.KeyedByTypeCollection<System.ServiceModel.Description.IEndpointBehavior>> IssuerChannelBehaviors { get { throw null; } }
        public System.ServiceModel.EndpointAddress LocalIssuerAddress { get { throw null; } set { } }
        public System.ServiceModel.Channels.Binding LocalIssuerBinding { get { throw null; } set { } }
        public System.Collections.Generic.KeyedByTypeCollection<System.ServiceModel.Description.IEndpointBehavior> LocalIssuerChannelBehaviors { get { throw null; } }
        public System.TimeSpan MaxIssuedTokenCachingTime { get { throw null; } set { } }
    }
    public partial class IssuedTokenServiceCredential
    {
        internal IssuedTokenServiceCredential() { }
        public System.Collections.Generic.IList<string> AllowedAudienceUris { get { throw null; } }
        public bool AllowUntrustedRsaIssuers { get { throw null; } set { } }
        public System.IdentityModel.Selectors.AudienceUriMode AudienceUriMode { get { throw null; } set { } }
        public System.ServiceModel.Security.X509CertificateValidationMode CertificateValidationMode { get { throw null; } set { } }
        public System.IdentityModel.Selectors.X509CertificateValidator CustomCertificateValidator { get { throw null; } set { } }
        public System.Collections.Generic.IList<System.Security.Cryptography.X509Certificates.X509Certificate2> KnownCertificates { get { throw null; } }
        public System.Security.Cryptography.X509Certificates.X509RevocationMode RevocationMode { get { throw null; } set { } }
        public System.IdentityModel.Tokens.SamlSerializer SamlSerializer { get { throw null; } set { } }
        public System.Security.Cryptography.X509Certificates.StoreLocation TrustedStoreLocation { get { throw null; } set { } }
    }
    [System.ServiceModel.ServiceContractAttribute(Name="IWSTrust13Async", Namespace="http://schemas.microsoft.com/ws/2008/06/identity/securitytokenservice")]
    public partial interface IWSTrust13AsyncContract
    {
        [System.ServiceModel.OperationContractAttribute(Name="Trust13CancelAsync", AsyncPattern=true, Action="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Cancel", ReplyAction="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RSTR/CancelFinal")]
        System.IAsyncResult BeginTrust13Cancel(System.ServiceModel.Channels.Message request, System.AsyncCallback callback, object state);
        [System.ServiceModel.OperationContractAttribute(Name="Trust13CancelResponseAsync", AsyncPattern=true, Action="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RSTR/Cancel", ReplyAction="*")]
        System.IAsyncResult BeginTrust13CancelResponse(System.ServiceModel.Channels.Message request, System.AsyncCallback callback, object state);
        [System.ServiceModel.OperationContractAttribute(Name="Trust13IssueAsync", AsyncPattern=true, Action="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue", ReplyAction="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RSTRC/IssueFinal")]
        System.IAsyncResult BeginTrust13Issue(System.ServiceModel.Channels.Message request, System.AsyncCallback callback, object state);
        [System.ServiceModel.OperationContractAttribute(Name="Trust13IssueResponseAsync", AsyncPattern=true, Action="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RSTR/Issue", ReplyAction="*")]
        System.IAsyncResult BeginTrust13IssueResponse(System.ServiceModel.Channels.Message request, System.AsyncCallback callback, object state);
        [System.ServiceModel.OperationContractAttribute(Name="Trust13RenewAsync", AsyncPattern=true, Action="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Renew", ReplyAction="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RSTR/RenewFinal")]
        System.IAsyncResult BeginTrust13Renew(System.ServiceModel.Channels.Message request, System.AsyncCallback callback, object state);
        [System.ServiceModel.OperationContractAttribute(Name="Trust13RenewResponseAsync", AsyncPattern=true, Action="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RSTR/Renew", ReplyAction="*")]
        System.IAsyncResult BeginTrust13RenewResponse(System.ServiceModel.Channels.Message request, System.AsyncCallback callback, object state);
        [System.ServiceModel.OperationContractAttribute(Name="Trust13ValidateAsync", AsyncPattern=true, Action="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Validate", ReplyAction="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RSTR/ValidateFinal")]
        System.IAsyncResult BeginTrust13Validate(System.ServiceModel.Channels.Message request, System.AsyncCallback callback, object state);
        [System.ServiceModel.OperationContractAttribute(Name="Trust13ValidateResponseAsync", AsyncPattern=true, Action="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RSTR/Validate", ReplyAction="*")]
        System.IAsyncResult BeginTrust13ValidateResponse(System.ServiceModel.Channels.Message request, System.AsyncCallback callback, object state);
        System.ServiceModel.Channels.Message EndTrust13Cancel(System.IAsyncResult ar);
        System.ServiceModel.Channels.Message EndTrust13CancelResponse(System.IAsyncResult ar);
        System.ServiceModel.Channels.Message EndTrust13Issue(System.IAsyncResult ar);
        System.ServiceModel.Channels.Message EndTrust13IssueResponse(System.IAsyncResult ar);
        System.ServiceModel.Channels.Message EndTrust13Renew(System.IAsyncResult ar);
        System.ServiceModel.Channels.Message EndTrust13RenewResponse(System.IAsyncResult ar);
        System.ServiceModel.Channels.Message EndTrust13Validate(System.IAsyncResult ar);
        System.ServiceModel.Channels.Message EndTrust13ValidateResponse(System.IAsyncResult ar);
    }
    [System.ServiceModel.ServiceContractAttribute(Name="IWSTrust13Sync", Namespace="http://schemas.microsoft.com/ws/2008/06/identity/securitytokenservice")]
    public partial interface IWSTrust13SyncContract
    {
        [System.ServiceModel.OperationContractAttribute(Name="Trust13Cancel", Action="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Cancel", ReplyAction="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RSTR/CancelFinal")]
        System.ServiceModel.Channels.Message ProcessTrust13Cancel(System.ServiceModel.Channels.Message message);
        [System.ServiceModel.OperationContractAttribute(Name="Trust13CancelResponse", Action="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RSTR/Cancel", ReplyAction="*")]
        System.ServiceModel.Channels.Message ProcessTrust13CancelResponse(System.ServiceModel.Channels.Message message);
        [System.ServiceModel.OperationContractAttribute(Name="Trust13Issue", Action="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue", ReplyAction="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RSTRC/IssueFinal")]
        System.ServiceModel.Channels.Message ProcessTrust13Issue(System.ServiceModel.Channels.Message message);
        [System.ServiceModel.OperationContractAttribute(Name="Trust13IssueResponse", Action="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RSTR/Issue", ReplyAction="*")]
        System.ServiceModel.Channels.Message ProcessTrust13IssueResponse(System.ServiceModel.Channels.Message message);
        [System.ServiceModel.OperationContractAttribute(Name="Trust13Renew", Action="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Renew", ReplyAction="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RSTR/RenewFinal")]
        System.ServiceModel.Channels.Message ProcessTrust13Renew(System.ServiceModel.Channels.Message message);
        [System.ServiceModel.OperationContractAttribute(Name="Trust13RenewResponse", Action="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RSTR/Renew", ReplyAction="*")]
        System.ServiceModel.Channels.Message ProcessTrust13RenewResponse(System.ServiceModel.Channels.Message message);
        [System.ServiceModel.OperationContractAttribute(Name="Trust13Validate", Action="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Validate", ReplyAction="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RSTR/ValidateFinal")]
        System.ServiceModel.Channels.Message ProcessTrust13Validate(System.ServiceModel.Channels.Message message);
        [System.ServiceModel.OperationContractAttribute(Name="Trust13ValidateResponse", Action="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RSTR/Validate", ReplyAction="*")]
        System.ServiceModel.Channels.Message ProcessTrust13ValidateResponse(System.ServiceModel.Channels.Message message);
    }
    [System.Runtime.InteropServices.ComVisibleAttribute(false)]
    [System.ServiceModel.ServiceContractAttribute]
    public partial interface IWSTrustChannelContract : System.ServiceModel.Security.IWSTrustContract
    {
        System.IAsyncResult BeginCancel(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, System.AsyncCallback callback, object state);
        System.IAsyncResult BeginIssue(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, System.AsyncCallback callback, object asyncState);
        System.IAsyncResult BeginRenew(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, System.AsyncCallback callback, object state);
        System.IAsyncResult BeginValidate(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, System.AsyncCallback callback, object state);
        System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse Cancel(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request);
        void EndCancel(System.IAsyncResult result, out System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse response);
        System.IdentityModel.Tokens.SecurityToken EndIssue(System.IAsyncResult result, out System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse response);
        void EndRenew(System.IAsyncResult result, out System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse response);
        void EndValidate(System.IAsyncResult result, out System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse response);
        System.IdentityModel.Tokens.SecurityToken Issue(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request);
        System.IdentityModel.Tokens.SecurityToken Issue(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, out System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse response);
        System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse Renew(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request);
        System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse Validate(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request);
    }
    [System.ServiceModel.ServiceContractAttribute]
    public partial interface IWSTrustContract
    {
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Name="Cancel", Action="*", ReplyAction="*")]
        System.IAsyncResult BeginCancel(System.ServiceModel.Channels.Message message, System.AsyncCallback callback, object asyncState);
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Name="Issue", Action="*", ReplyAction="*")]
        System.IAsyncResult BeginIssue(System.ServiceModel.Channels.Message message, System.AsyncCallback callback, object asyncState);
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Name="Renew", Action="*", ReplyAction="*")]
        System.IAsyncResult BeginRenew(System.ServiceModel.Channels.Message message, System.AsyncCallback callback, object asyncState);
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Name="Validate", Action="*", ReplyAction="*")]
        System.IAsyncResult BeginValidate(System.ServiceModel.Channels.Message message, System.AsyncCallback callback, object asyncState);
        [System.ServiceModel.OperationContractAttribute(Name="Cancel", Action="*", ReplyAction="*")]
        System.ServiceModel.Channels.Message Cancel(System.ServiceModel.Channels.Message message);
        System.ServiceModel.Channels.Message EndCancel(System.IAsyncResult asyncResult);
        System.ServiceModel.Channels.Message EndIssue(System.IAsyncResult asyncResult);
        System.ServiceModel.Channels.Message EndRenew(System.IAsyncResult asyncResult);
        System.ServiceModel.Channels.Message EndValidate(System.IAsyncResult asyncResult);
        [System.ServiceModel.OperationContractAttribute(Name="Issue", Action="*", ReplyAction="*")]
        System.ServiceModel.Channels.Message Issue(System.ServiceModel.Channels.Message message);
        [System.ServiceModel.OperationContractAttribute(Name="Renew", Action="*", ReplyAction="*")]
        System.ServiceModel.Channels.Message Renew(System.ServiceModel.Channels.Message message);
        [System.ServiceModel.OperationContractAttribute(Name="Validate", Action="*", ReplyAction="*")]
        System.ServiceModel.Channels.Message Validate(System.ServiceModel.Channels.Message message);
    }
    [System.ServiceModel.ServiceContractAttribute(Name="IWSTrustFeb2005Async", Namespace="http://schemas.microsoft.com/ws/2008/06/identity/securitytokenservice")]
    public partial interface IWSTrustFeb2005AsyncContract
    {
        [System.ServiceModel.OperationContractAttribute(Name="TrustFeb2005CancelAsync", AsyncPattern=true, Action="http://schemas.xmlsoap.org/ws/2005/02/trust/RST/Cancel", ReplyAction="http://schemas.xmlsoap.org/ws/2005/02/trust/RSTR/Cancel")]
        System.IAsyncResult BeginTrustFeb2005Cancel(System.ServiceModel.Channels.Message request, System.AsyncCallback callback, object state);
        [System.ServiceModel.OperationContractAttribute(Name="TrustFeb2005CancelResponseAsync", AsyncPattern=true, Action="http://schemas.xmlsoap.org/ws/2005/02/trust/RSTR/Cancel", ReplyAction="http://schemas.xmlsoap.org/ws/2005/02/trust/RSTR/Cancel")]
        System.IAsyncResult BeginTrustFeb2005CancelResponse(System.ServiceModel.Channels.Message request, System.AsyncCallback callback, object state);
        [System.ServiceModel.OperationContractAttribute(Name="TrustFeb2005IssueAsync", AsyncPattern=true, Action="http://schemas.xmlsoap.org/ws/2005/02/trust/RST/Issue", ReplyAction="http://schemas.xmlsoap.org/ws/2005/02/trust/RSTR/Issue")]
        System.IAsyncResult BeginTrustFeb2005Issue(System.ServiceModel.Channels.Message request, System.AsyncCallback callback, object state);
        [System.ServiceModel.OperationContractAttribute(Name="TrustFeb2005IssueResponseAsync", AsyncPattern=true, Action="http://schemas.xmlsoap.org/ws/2005/02/trust/RSTR/Issue", ReplyAction="http://schemas.xmlsoap.org/ws/2005/02/trust/RSTR/Issue")]
        System.IAsyncResult BeginTrustFeb2005IssueResponse(System.ServiceModel.Channels.Message request, System.AsyncCallback callback, object state);
        [System.ServiceModel.OperationContractAttribute(Name="TrustFeb2005RenewAsync", AsyncPattern=true, Action="http://schemas.xmlsoap.org/ws/2005/02/trust/RST/Renew", ReplyAction="http://schemas.xmlsoap.org/ws/2005/02/trust/RSTR/Renew")]
        System.IAsyncResult BeginTrustFeb2005Renew(System.ServiceModel.Channels.Message request, System.AsyncCallback callback, object state);
        [System.ServiceModel.OperationContractAttribute(Name="TrustFeb2005RenewResponseAsync", AsyncPattern=true, Action="http://schemas.xmlsoap.org/ws/2005/02/trust/RSTR/Renew", ReplyAction="http://schemas.xmlsoap.org/ws/2005/02/trust/RSTR/Renew")]
        System.IAsyncResult BeginTrustFeb2005RenewResponse(System.ServiceModel.Channels.Message request, System.AsyncCallback callback, object state);
        [System.ServiceModel.OperationContractAttribute(Name="TrustFeb2005ValidateAsync", AsyncPattern=true, Action="http://schemas.xmlsoap.org/ws/2005/02/trust/RST/Validate", ReplyAction="http://schemas.xmlsoap.org/ws/2005/02/trust/RSTR/Validate")]
        System.IAsyncResult BeginTrustFeb2005Validate(System.ServiceModel.Channels.Message request, System.AsyncCallback callback, object state);
        [System.ServiceModel.OperationContractAttribute(Name="TrustFeb2005ValidateResponseAsync", AsyncPattern=true, Action="http://schemas.xmlsoap.org/ws/2005/02/trust/RSTR/Validate", ReplyAction="http://schemas.xmlsoap.org/ws/2005/02/trust/RSTR/Validate")]
        System.IAsyncResult BeginTrustFeb2005ValidateResponse(System.ServiceModel.Channels.Message request, System.AsyncCallback callback, object state);
        System.ServiceModel.Channels.Message EndTrustFeb2005Cancel(System.IAsyncResult ar);
        System.ServiceModel.Channels.Message EndTrustFeb2005CancelResponse(System.IAsyncResult ar);
        System.ServiceModel.Channels.Message EndTrustFeb2005Issue(System.IAsyncResult ar);
        System.ServiceModel.Channels.Message EndTrustFeb2005IssueResponse(System.IAsyncResult ar);
        System.ServiceModel.Channels.Message EndTrustFeb2005Renew(System.IAsyncResult ar);
        System.ServiceModel.Channels.Message EndTrustFeb2005RenewResponse(System.IAsyncResult ar);
        System.ServiceModel.Channels.Message EndTrustFeb2005Validate(System.IAsyncResult ar);
        System.ServiceModel.Channels.Message EndTrustFeb2005ValidateResponse(System.IAsyncResult ar);
    }
    [System.ServiceModel.ServiceContractAttribute(Name="IWSTrustFeb2005Sync", Namespace="http://schemas.microsoft.com/ws/2008/06/identity/securitytokenservice")]
    public partial interface IWSTrustFeb2005SyncContract
    {
        [System.ServiceModel.OperationContractAttribute(Name="TrustFeb2005Cancel", Action="http://schemas.xmlsoap.org/ws/2005/02/trust/RST/Cancel", ReplyAction="http://schemas.xmlsoap.org/ws/2005/02/trust/RSTR/Cancel")]
        System.ServiceModel.Channels.Message ProcessTrustFeb2005Cancel(System.ServiceModel.Channels.Message message);
        [System.ServiceModel.OperationContractAttribute(Name="TrustFeb2005CancelResponse", Action="http://schemas.xmlsoap.org/ws/2005/02/trust/RSTR/Cancel", ReplyAction="http://schemas.xmlsoap.org/ws/2005/02/trust/RSTR/Cancel")]
        System.ServiceModel.Channels.Message ProcessTrustFeb2005CancelResponse(System.ServiceModel.Channels.Message message);
        [System.ServiceModel.OperationContractAttribute(Name="TrustFeb2005Issue", Action="http://schemas.xmlsoap.org/ws/2005/02/trust/RST/Issue", ReplyAction="http://schemas.xmlsoap.org/ws/2005/02/trust/RSTR/Issue")]
        System.ServiceModel.Channels.Message ProcessTrustFeb2005Issue(System.ServiceModel.Channels.Message message);
        [System.ServiceModel.OperationContractAttribute(Name="TrustFeb2005IssueResponse", Action="http://schemas.xmlsoap.org/ws/2005/02/trust/RSTR/Issue", ReplyAction="http://schemas.xmlsoap.org/ws/2005/02/trust/RSTR/Issue")]
        System.ServiceModel.Channels.Message ProcessTrustFeb2005IssueResponse(System.ServiceModel.Channels.Message message);
        [System.ServiceModel.OperationContractAttribute(Name="TrustFeb2005Renew", Action="http://schemas.xmlsoap.org/ws/2005/02/trust/RST/Renew", ReplyAction="http://schemas.xmlsoap.org/ws/2005/02/trust/RSTR/Renew")]
        System.ServiceModel.Channels.Message ProcessTrustFeb2005Renew(System.ServiceModel.Channels.Message message);
        [System.ServiceModel.OperationContractAttribute(Name="TrustFeb2005RenewResponse", Action="http://schemas.xmlsoap.org/ws/2005/02/trust/RSTR/Renew", ReplyAction="http://schemas.xmlsoap.org/ws/2005/02/trust/RSTR/Renew")]
        System.ServiceModel.Channels.Message ProcessTrustFeb2005RenewResponse(System.ServiceModel.Channels.Message message);
        [System.ServiceModel.OperationContractAttribute(Name="TrustFeb2005Validate", Action="http://schemas.xmlsoap.org/ws/2005/02/trust/RST/Validate", ReplyAction="http://schemas.xmlsoap.org/ws/2005/02/trust/RSTR/Validate")]
        System.ServiceModel.Channels.Message ProcessTrustFeb2005Validate(System.ServiceModel.Channels.Message message);
        [System.ServiceModel.OperationContractAttribute(Name="TrustFeb2005ValidateResponse", Action="http://schemas.xmlsoap.org/ws/2005/02/trust/RSTR/Validate", ReplyAction="http://schemas.xmlsoap.org/ws/2005/02/trust/RSTR/Validate")]
        System.ServiceModel.Channels.Message ProcessTrustFeb2005ValidateResponse(System.ServiceModel.Channels.Message message);
    }
    public partial class MessagePartSpecification
    {
        public MessagePartSpecification() { }
        public MessagePartSpecification(bool isBodyIncluded) { }
        public MessagePartSpecification(bool isBodyIncluded, params System.Xml.XmlQualifiedName[] headerTypes) { }
        public MessagePartSpecification(params System.Xml.XmlQualifiedName[] headerTypes) { }
        public System.Collections.Generic.ICollection<System.Xml.XmlQualifiedName> HeaderTypes { get { throw null; } }
        public bool IsBodyIncluded { get { throw null; } set { } }
        public bool IsReadOnly { get { throw null; } }
        public static System.ServiceModel.Security.MessagePartSpecification NoParts { get { throw null; } }
        public void Clear() { }
        public void MakeReadOnly() { }
        public void Union(System.ServiceModel.Security.MessagePartSpecification specification) { }
    }
    public enum MessageProtectionOrder
    {
        EncryptBeforeSign = 2,
        SignBeforeEncrypt = 0,
        SignBeforeEncryptAndEncryptSignature = 1,
    }
    [System.SerializableAttribute]
    public partial class MessageSecurityException : System.ServiceModel.CommunicationException
    {
        public MessageSecurityException() { }
        protected MessageSecurityException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
        public MessageSecurityException(string message) { }
        public MessageSecurityException(string message, System.Exception innerException) { }
    }
    public abstract partial class NonceCache
    {
        protected NonceCache() { }
        public int CacheSize { get { throw null; } set { } }
        public System.TimeSpan CachingTimeSpan { get { throw null; } set { } }
        public abstract bool CheckNonce(byte[] nonce);
        public abstract bool TryAddNonce(byte[] nonce);
    }
    public partial class PeerCredential
    {
        internal PeerCredential() { }
        public System.Security.Cryptography.X509Certificates.X509Certificate2 Certificate { get { throw null; } set { } }
        public string MeshPassword { get { throw null; } set { } }
        public System.ServiceModel.Security.X509PeerCertificateAuthentication MessageSenderAuthentication { get { throw null; } set { } }
        public System.ServiceModel.Security.X509PeerCertificateAuthentication PeerAuthentication { get { throw null; } set { } }
        public void SetCertificate(System.Security.Cryptography.X509Certificates.StoreLocation storeLocation, System.Security.Cryptography.X509Certificates.StoreName storeName, System.Security.Cryptography.X509Certificates.X509FindType findType, object findValue) { }
        public void SetCertificate(string subjectName, System.Security.Cryptography.X509Certificates.StoreLocation storeLocation, System.Security.Cryptography.X509Certificates.StoreName storeName) { }
    }
    public partial class ScopedMessagePartSpecification
    {
        public ScopedMessagePartSpecification() { }
        public ScopedMessagePartSpecification(System.ServiceModel.Security.ScopedMessagePartSpecification other) { }
        public System.Collections.Generic.ICollection<string> Actions { get { throw null; } }
        public System.ServiceModel.Security.MessagePartSpecification ChannelParts { get { throw null; } }
        public bool IsReadOnly { get { throw null; } }
        public void AddParts(System.ServiceModel.Security.MessagePartSpecification parts) { }
        public void AddParts(System.ServiceModel.Security.MessagePartSpecification parts, string action) { }
        public void MakeReadOnly() { }
        public bool TryGetParts(string action, bool excludeChannelScope, out System.ServiceModel.Security.MessagePartSpecification parts) { throw null; }
        public bool TryGetParts(string action, out System.ServiceModel.Security.MessagePartSpecification parts) { throw null; }
    }
    public sealed partial class SecureConversationServiceCredential
    {
        internal SecureConversationServiceCredential() { }
        public System.Collections.ObjectModel.Collection<System.Type> SecurityContextClaimTypes { get { throw null; } }
        public System.ServiceModel.Security.SecurityStateEncoder SecurityStateEncoder { get { throw null; } set { } }
    }
    public abstract partial class SecureConversationVersion
    {
        internal SecureConversationVersion() { }
        public static System.ServiceModel.Security.SecureConversationVersion Default { get { throw null; } }
        public System.Xml.XmlDictionaryString Namespace { get { throw null; } }
        public System.Xml.XmlDictionaryString Prefix { get { throw null; } }
        public static System.ServiceModel.Security.SecureConversationVersion WSSecureConversation13 { get { throw null; } }
        public static System.ServiceModel.Security.SecureConversationVersion WSSecureConversationFeb2005 { get { throw null; } }
    }
    [System.SerializableAttribute]
    public partial class SecurityAccessDeniedException : System.ServiceModel.CommunicationException
    {
        public SecurityAccessDeniedException() { }
        protected SecurityAccessDeniedException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
        public SecurityAccessDeniedException(string message) { }
        public SecurityAccessDeniedException(string message, System.Exception innerException) { }
    }
    [System.ComponentModel.TypeConverterAttribute("System.ServiceModel.Configuration.SecurityAlgorithmSuiteConverter")]
    public abstract partial class SecurityAlgorithmSuite
    {
        protected SecurityAlgorithmSuite() { }
        public static System.ServiceModel.Security.SecurityAlgorithmSuite Basic128 { get { throw null; } }
        public static System.ServiceModel.Security.SecurityAlgorithmSuite Basic128Rsa15 { get { throw null; } }
        public static System.ServiceModel.Security.SecurityAlgorithmSuite Basic128Sha256 { get { throw null; } }
        public static System.ServiceModel.Security.SecurityAlgorithmSuite Basic128Sha256Rsa15 { get { throw null; } }
        public static System.ServiceModel.Security.SecurityAlgorithmSuite Basic192 { get { throw null; } }
        public static System.ServiceModel.Security.SecurityAlgorithmSuite Basic192Rsa15 { get { throw null; } }
        public static System.ServiceModel.Security.SecurityAlgorithmSuite Basic192Sha256 { get { throw null; } }
        public static System.ServiceModel.Security.SecurityAlgorithmSuite Basic192Sha256Rsa15 { get { throw null; } }
        public static System.ServiceModel.Security.SecurityAlgorithmSuite Basic256 { get { throw null; } }
        public static System.ServiceModel.Security.SecurityAlgorithmSuite Basic256Rsa15 { get { throw null; } }
        public static System.ServiceModel.Security.SecurityAlgorithmSuite Basic256Sha256 { get { throw null; } }
        public static System.ServiceModel.Security.SecurityAlgorithmSuite Basic256Sha256Rsa15 { get { throw null; } }
        public static System.ServiceModel.Security.SecurityAlgorithmSuite Default { get { throw null; } }
        public abstract string DefaultAsymmetricKeyWrapAlgorithm { get; }
        public abstract string DefaultAsymmetricSignatureAlgorithm { get; }
        public abstract string DefaultCanonicalizationAlgorithm { get; }
        public abstract string DefaultDigestAlgorithm { get; }
        public abstract string DefaultEncryptionAlgorithm { get; }
        public abstract int DefaultEncryptionKeyDerivationLength { get; }
        public abstract int DefaultSignatureKeyDerivationLength { get; }
        public abstract int DefaultSymmetricKeyLength { get; }
        public abstract string DefaultSymmetricKeyWrapAlgorithm { get; }
        public abstract string DefaultSymmetricSignatureAlgorithm { get; }
        public static System.ServiceModel.Security.SecurityAlgorithmSuite TripleDes { get { throw null; } }
        public static System.ServiceModel.Security.SecurityAlgorithmSuite TripleDesRsa15 { get { throw null; } }
        public static System.ServiceModel.Security.SecurityAlgorithmSuite TripleDesSha256 { get { throw null; } }
        public static System.ServiceModel.Security.SecurityAlgorithmSuite TripleDesSha256Rsa15 { get { throw null; } }
        public abstract bool IsAsymmetricKeyLengthSupported(int length);
        public virtual bool IsAsymmetricKeyWrapAlgorithmSupported(string algorithm) { throw null; }
        public virtual bool IsAsymmetricSignatureAlgorithmSupported(string algorithm) { throw null; }
        public virtual bool IsCanonicalizationAlgorithmSupported(string algorithm) { throw null; }
        public virtual bool IsDigestAlgorithmSupported(string algorithm) { throw null; }
        public virtual bool IsEncryptionAlgorithmSupported(string algorithm) { throw null; }
        public virtual bool IsEncryptionKeyDerivationAlgorithmSupported(string algorithm) { throw null; }
        public virtual bool IsSignatureKeyDerivationAlgorithmSupported(string algorithm) { throw null; }
        public abstract bool IsSymmetricKeyLengthSupported(int length);
        public virtual bool IsSymmetricKeyWrapAlgorithmSupported(string algorithm) { throw null; }
        public virtual bool IsSymmetricSignatureAlgorithmSupported(string algorithm) { throw null; }
    }
    public abstract partial class SecurityCredentialsManager
    {
        protected SecurityCredentialsManager() { }
        public abstract System.IdentityModel.Selectors.SecurityTokenManager CreateSecurityTokenManager();
    }
    public enum SecurityKeyEntropyMode
    {
        ClientEntropy = 0,
        CombinedEntropy = 2,
        ServerEntropy = 1,
    }
    public partial class SecurityMessageProperty : System.IDisposable, System.ServiceModel.Channels.IMessageProperty
    {
        public SecurityMessageProperty() { }
        public System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.Policy.IAuthorizationPolicy> ExternalAuthorizationPolicies { get { throw null; } set { } }
        public bool HasIncomingSupportingTokens { get { throw null; } }
        public System.Collections.ObjectModel.Collection<System.ServiceModel.Security.SupportingTokenSpecification> IncomingSupportingTokens { get { throw null; } }
        public System.ServiceModel.Security.SecurityTokenSpecification InitiatorToken { get { throw null; } set { } }
        public System.Collections.ObjectModel.Collection<System.ServiceModel.Security.SupportingTokenSpecification> OutgoingSupportingTokens { get { throw null; } }
        public System.ServiceModel.Security.SecurityTokenSpecification ProtectionToken { get { throw null; } set { } }
        public System.ServiceModel.Security.SecurityTokenSpecification RecipientToken { get { throw null; } set { } }
        public string SenderIdPrefix { get { throw null; } set { } }
        public System.ServiceModel.ServiceSecurityContext ServiceSecurityContext { get { throw null; } set { } }
        public System.ServiceModel.Security.SecurityTokenSpecification TransportToken { get { throw null; } set { } }
        public System.ServiceModel.Channels.IMessageProperty CreateCopy() { throw null; }
        public void Dispose() { }
        public static System.ServiceModel.Security.SecurityMessageProperty GetOrCreate(System.ServiceModel.Channels.Message message) { throw null; }
    }
    [System.SerializableAttribute]
    public partial class SecurityNegotiationException : System.ServiceModel.CommunicationException
    {
        public SecurityNegotiationException() { }
        protected SecurityNegotiationException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
        public SecurityNegotiationException(string message) { }
        public SecurityNegotiationException(string message, System.Exception innerException) { }
    }
    public abstract partial class SecurityPolicyVersion
    {
        internal SecurityPolicyVersion() { }
        public string Namespace { get { throw null; } }
        public string Prefix { get { throw null; } }
        public static System.ServiceModel.Security.SecurityPolicyVersion WSSecurityPolicy11 { get { throw null; } }
        public static System.ServiceModel.Security.SecurityPolicyVersion WSSecurityPolicy12 { get { throw null; } }
    }
    public abstract partial class SecurityStateEncoder
    {
        protected SecurityStateEncoder() { }
        protected internal abstract byte[] DecodeSecurityState(byte[] data);
        protected internal abstract byte[] EncodeSecurityState(byte[] data);
    }
    public enum SecurityTokenAttachmentMode
    {
        Endorsing = 1,
        Signed = 0,
        SignedEncrypted = 3,
        SignedEndorsing = 2,
    }
    public partial class SecurityTokenSpecification
    {
        public SecurityTokenSpecification(System.IdentityModel.Tokens.SecurityToken token, System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.Policy.IAuthorizationPolicy> tokenPolicies) { }
        public System.IdentityModel.Tokens.SecurityToken SecurityToken { get { throw null; } }
        public System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.Policy.IAuthorizationPolicy> SecurityTokenPolicies { get { throw null; } }
    }
    public abstract partial class SecurityVersion
    {
        internal SecurityVersion() { }
        public static System.ServiceModel.Security.SecurityVersion WSSecurity10 { get { throw null; } }
        public static System.ServiceModel.Security.SecurityVersion WSSecurity11 { get { throw null; } }
    }
    public partial class ServiceCredentialsSecurityTokenManager : System.IdentityModel.Selectors.SecurityTokenManager, System.ServiceModel.Security.IEndpointIdentityProvider
    {
        public ServiceCredentialsSecurityTokenManager(System.ServiceModel.Description.ServiceCredentials parent) { }
        public System.ServiceModel.Description.ServiceCredentials ServiceCredentials { get { throw null; } }
        protected System.IdentityModel.Selectors.SecurityTokenAuthenticator CreateSecureConversationTokenAuthenticator(System.ServiceModel.Security.Tokens.RecipientServiceModelSecurityTokenRequirement recipientRequirement, bool preserveBootstrapTokens, out System.IdentityModel.Selectors.SecurityTokenResolver sctResolver) { throw null; }
        public override System.IdentityModel.Selectors.SecurityTokenAuthenticator CreateSecurityTokenAuthenticator(System.IdentityModel.Selectors.SecurityTokenRequirement tokenRequirement, out System.IdentityModel.Selectors.SecurityTokenResolver outOfBandTokenResolver) { throw null; }
        public override System.IdentityModel.Selectors.SecurityTokenProvider CreateSecurityTokenProvider(System.IdentityModel.Selectors.SecurityTokenRequirement requirement) { throw null; }
        public override System.IdentityModel.Selectors.SecurityTokenSerializer CreateSecurityTokenSerializer(System.IdentityModel.Selectors.SecurityTokenVersion version) { throw null; }
        public virtual System.ServiceModel.EndpointIdentity GetIdentityOfSelf(System.IdentityModel.Selectors.SecurityTokenRequirement tokenRequirement) { throw null; }
        protected bool IsIssuedSecurityTokenRequirement(System.IdentityModel.Selectors.SecurityTokenRequirement requirement) { throw null; }
    }
    public partial class SimpleSecurityTokenProvider : System.IdentityModel.Selectors.SecurityTokenProvider
    {
        public SimpleSecurityTokenProvider(System.IdentityModel.Tokens.SecurityToken token, System.IdentityModel.Selectors.SecurityTokenRequirement tokenRequirement) { }
        protected override System.IdentityModel.Tokens.SecurityToken GetTokenCore(System.TimeSpan timeout) { throw null; }
    }
    public partial class SspiSecurityTokenProvider : System.IdentityModel.Selectors.SecurityTokenProvider
    {
        public SspiSecurityTokenProvider(System.Net.NetworkCredential credential, bool extractGroupsForWindowsAccounts, bool allowUnauthenticatedCallers) { }
        public SspiSecurityTokenProvider(System.Net.NetworkCredential credential, bool allowNtlm, System.Security.Principal.TokenImpersonationLevel impersonationLevel) { }
        protected override System.IdentityModel.Tokens.SecurityToken GetTokenCore(System.TimeSpan timeout) { throw null; }
    }
    public partial class SupportingTokenSpecification : System.ServiceModel.Security.SecurityTokenSpecification
    {
        public SupportingTokenSpecification(System.IdentityModel.Tokens.SecurityToken token, System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.Policy.IAuthorizationPolicy> tokenPolicies, System.ServiceModel.Security.SecurityTokenAttachmentMode attachmentMode) : base (default(System.IdentityModel.Tokens.SecurityToken), default(System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.Policy.IAuthorizationPolicy>)) { }
        public SupportingTokenSpecification(System.IdentityModel.Tokens.SecurityToken token, System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.Policy.IAuthorizationPolicy> tokenPolicies, System.ServiceModel.Security.SecurityTokenAttachmentMode attachmentMode, System.ServiceModel.Security.Tokens.SecurityTokenParameters tokenParameters) : base (default(System.IdentityModel.Tokens.SecurityToken), default(System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.Policy.IAuthorizationPolicy>)) { }
        public System.ServiceModel.Security.SecurityTokenAttachmentMode SecurityTokenAttachmentMode { get { throw null; } }
    }
    public partial class TripleDesSecurityAlgorithmSuite : System.ServiceModel.Security.SecurityAlgorithmSuite
    {
        public TripleDesSecurityAlgorithmSuite() { }
        public override string DefaultAsymmetricKeyWrapAlgorithm { get { throw null; } }
        public override string DefaultAsymmetricSignatureAlgorithm { get { throw null; } }
        public override string DefaultCanonicalizationAlgorithm { get { throw null; } }
        public override string DefaultDigestAlgorithm { get { throw null; } }
        public override string DefaultEncryptionAlgorithm { get { throw null; } }
        public override int DefaultEncryptionKeyDerivationLength { get { throw null; } }
        public override int DefaultSignatureKeyDerivationLength { get { throw null; } }
        public override int DefaultSymmetricKeyLength { get { throw null; } }
        public override string DefaultSymmetricKeyWrapAlgorithm { get { throw null; } }
        public override string DefaultSymmetricSignatureAlgorithm { get { throw null; } }
        public override bool IsAsymmetricKeyLengthSupported(int length) { throw null; }
        public override bool IsSymmetricKeyLengthSupported(int length) { throw null; }
        public override string ToString() { throw null; }
    }
    public abstract partial class TrustVersion
    {
        internal TrustVersion() { }
        public static System.ServiceModel.Security.TrustVersion Default { get { throw null; } }
        public System.Xml.XmlDictionaryString Namespace { get { throw null; } }
        public System.Xml.XmlDictionaryString Prefix { get { throw null; } }
        public static System.ServiceModel.Security.TrustVersion WSTrust13 { get { throw null; } }
        public static System.ServiceModel.Security.TrustVersion WSTrustFeb2005 { get { throw null; } }
    }
    public sealed partial class UserNamePasswordClientCredential
    {
        internal UserNamePasswordClientCredential() { }
        public string Password { get { throw null; } set { } }
        public string UserName { get { throw null; } set { } }
    }
    public sealed partial class UserNamePasswordServiceCredential
    {
        internal UserNamePasswordServiceCredential() { }
        public System.TimeSpan CachedLogonTokenLifetime { get { throw null; } set { } }
        public bool CacheLogonTokens { get { throw null; } set { } }
        public System.IdentityModel.Selectors.UserNamePasswordValidator CustomUserNamePasswordValidator { get { throw null; } set { } }
        public bool IncludeWindowsGroups { get { throw null; } set { } }
        public int MaxCachedLogonTokens { get { throw null; } set { } }
        public System.Web.Security.MembershipProvider MembershipProvider { get { throw null; } set { } }
        public System.ServiceModel.Security.UserNamePasswordValidationMode UserNamePasswordValidationMode { get { throw null; } set { } }
    }
    public enum UserNamePasswordValidationMode
    {
        Custom = 2,
        MembershipProvider = 1,
        Windows = 0,
    }
    public sealed partial class WindowsClientCredential
    {
        internal WindowsClientCredential() { }
        public System.Security.Principal.TokenImpersonationLevel AllowedImpersonationLevel { get { throw null; } set { } }
        [System.ObsoleteAttribute("This property is deprecated and is maintained for backward compatibility only. The local machine policy will be used to determine if NTLM should be used.")]
        public bool AllowNtlm { get { throw null; } set { } }
        public System.Net.NetworkCredential ClientCredential { get { throw null; } set { } }
    }
    public sealed partial class WindowsServiceCredential
    {
        internal WindowsServiceCredential() { }
        public bool AllowAnonymousLogons { get { throw null; } set { } }
        public bool IncludeWindowsGroups { get { throw null; } set { } }
    }
    public partial class WSSecurityTokenSerializer : System.IdentityModel.Selectors.SecurityTokenSerializer
    {
        public WSSecurityTokenSerializer() { }
        public WSSecurityTokenSerializer(bool emitBspRequiredAttributes) { }
        public WSSecurityTokenSerializer(System.ServiceModel.Security.SecurityVersion securityVersion) { }
        public WSSecurityTokenSerializer(System.ServiceModel.Security.SecurityVersion securityVersion, bool emitBspRequiredAttributes) { }
        public WSSecurityTokenSerializer(System.ServiceModel.Security.SecurityVersion securityVersion, bool emitBspRequiredAttributes, System.IdentityModel.Tokens.SamlSerializer samlSerializer) { }
        public WSSecurityTokenSerializer(System.ServiceModel.Security.SecurityVersion securityVersion, bool emitBspRequiredAttributes, System.IdentityModel.Tokens.SamlSerializer samlSerializer, System.ServiceModel.Security.SecurityStateEncoder securityStateEncoder, System.Collections.Generic.IEnumerable<System.Type> knownTypes) { }
        public WSSecurityTokenSerializer(System.ServiceModel.Security.SecurityVersion securityVersion, bool emitBspRequiredAttributes, System.IdentityModel.Tokens.SamlSerializer samlSerializer, System.ServiceModel.Security.SecurityStateEncoder securityStateEncoder, System.Collections.Generic.IEnumerable<System.Type> knownTypes, int maximumKeyDerivationOffset, int maximumKeyDerivationLabelLength, int maximumKeyDerivationNonceLength) { }
        public WSSecurityTokenSerializer(System.ServiceModel.Security.SecurityVersion securityVersion, System.ServiceModel.Security.TrustVersion trustVersion, System.ServiceModel.Security.SecureConversationVersion secureConversationVersion, bool emitBspRequiredAttributes, System.IdentityModel.Tokens.SamlSerializer samlSerializer, System.ServiceModel.Security.SecurityStateEncoder securityStateEncoder, System.Collections.Generic.IEnumerable<System.Type> knownTypes) { }
        public WSSecurityTokenSerializer(System.ServiceModel.Security.SecurityVersion securityVersion, System.ServiceModel.Security.TrustVersion trustVersion, System.ServiceModel.Security.SecureConversationVersion secureConversationVersion, bool emitBspRequiredAttributes, System.IdentityModel.Tokens.SamlSerializer samlSerializer, System.ServiceModel.Security.SecurityStateEncoder securityStateEncoder, System.Collections.Generic.IEnumerable<System.Type> knownTypes, int maximumKeyDerivationOffset, int maximumKeyDerivationLabelLength, int maximumKeyDerivationNonceLength) { }
        public static System.ServiceModel.Security.WSSecurityTokenSerializer DefaultInstance { get { throw null; } }
        public bool EmitBspRequiredAttributes { get { throw null; } }
        public int MaximumKeyDerivationLabelLength { get { throw null; } }
        public int MaximumKeyDerivationNonceLength { get { throw null; } }
        public int MaximumKeyDerivationOffset { get { throw null; } }
        public System.ServiceModel.Security.SecurityVersion SecurityVersion { get { throw null; } }
        protected override bool CanReadKeyIdentifierClauseCore(System.Xml.XmlReader reader) { throw null; }
        protected override bool CanReadKeyIdentifierCore(System.Xml.XmlReader reader) { throw null; }
        protected override bool CanReadTokenCore(System.Xml.XmlReader reader) { throw null; }
        protected override bool CanWriteKeyIdentifierClauseCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause keyIdentifierClause) { throw null; }
        protected override bool CanWriteKeyIdentifierCore(System.IdentityModel.Tokens.SecurityKeyIdentifier keyIdentifier) { throw null; }
        protected override bool CanWriteTokenCore(System.IdentityModel.Tokens.SecurityToken token) { throw null; }
        public virtual System.IdentityModel.Tokens.SecurityKeyIdentifierClause CreateKeyIdentifierClauseFromTokenXml(System.Xml.XmlElement element, System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle tokenReferenceStyle) { throw null; }
        protected internal virtual string GetTokenTypeUri(System.Type tokenType) { throw null; }
        protected override System.IdentityModel.Tokens.SecurityKeyIdentifierClause ReadKeyIdentifierClauseCore(System.Xml.XmlReader reader) { throw null; }
        protected override System.IdentityModel.Tokens.SecurityKeyIdentifier ReadKeyIdentifierCore(System.Xml.XmlReader reader) { throw null; }
        protected override System.IdentityModel.Tokens.SecurityToken ReadTokenCore(System.Xml.XmlReader reader, System.IdentityModel.Selectors.SecurityTokenResolver tokenResolver) { throw null; }
        public virtual bool TryCreateKeyIdentifierClauseFromTokenXml(System.Xml.XmlElement element, System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle tokenReferenceStyle, out System.IdentityModel.Tokens.SecurityKeyIdentifierClause securityKeyIdentifierClause) { throw null; }
        protected override void WriteKeyIdentifierClauseCore(System.Xml.XmlWriter writer, System.IdentityModel.Tokens.SecurityKeyIdentifierClause keyIdentifierClause) { }
        protected override void WriteKeyIdentifierCore(System.Xml.XmlWriter writer, System.IdentityModel.Tokens.SecurityKeyIdentifier keyIdentifier) { }
        protected override void WriteTokenCore(System.Xml.XmlWriter writer, System.IdentityModel.Tokens.SecurityToken token) { }
    }
    public partial class WSTrustChannel : System.ServiceModel.Channels.IChannel, System.ServiceModel.ICommunicationObject, System.ServiceModel.Security.IWSTrustChannelContract, System.ServiceModel.Security.IWSTrustContract
    {
        public WSTrustChannel(System.ServiceModel.Security.WSTrustChannelFactory factory, System.ServiceModel.Security.IWSTrustChannelContract inner, System.ServiceModel.Security.TrustVersion trustVersion, System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext context, System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer requestSerializer, System.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer responseSerializer) { }
        public System.ServiceModel.Channels.IChannel Channel { get { throw null; } protected set { } }
        public System.ServiceModel.Security.WSTrustChannelFactory ChannelFactory { get { throw null; } protected set { } }
        public System.ServiceModel.Security.IWSTrustChannelContract Contract { get { throw null; } protected set { } }
        public System.ServiceModel.CommunicationState State { get { throw null; } }
        public System.ServiceModel.Security.TrustVersion TrustVersion { get { throw null; } protected set { } }
        public System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer WSTrustRequestSerializer { get { throw null; } protected set { } }
        public System.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer WSTrustResponseSerializer { get { throw null; } protected set { } }
        public System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext WSTrustSerializationContext { get { throw null; } protected set { } }
        public event System.EventHandler Closed { add { } remove { } }
        public event System.EventHandler Closing { add { } remove { } }
        public event System.EventHandler Faulted { add { } remove { } }
        public event System.EventHandler Opened { add { } remove { } }
        public event System.EventHandler Opening { add { } remove { } }
        public void Abort() { }
        public System.IAsyncResult BeginCancel(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken rst, System.AsyncCallback callback, object state) { throw null; }
        public System.IAsyncResult BeginCancel(System.ServiceModel.Channels.Message message, System.AsyncCallback callback, object asyncState) { throw null; }
        public System.IAsyncResult BeginClose(System.AsyncCallback callback, object state) { throw null; }
        public System.IAsyncResult BeginClose(System.TimeSpan timeout, System.AsyncCallback callback, object state) { throw null; }
        public System.IAsyncResult BeginIssue(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken rst, System.AsyncCallback callback, object asyncState) { throw null; }
        public System.IAsyncResult BeginIssue(System.ServiceModel.Channels.Message message, System.AsyncCallback callback, object asyncState) { throw null; }
        public System.IAsyncResult BeginOpen(System.AsyncCallback callback, object state) { throw null; }
        public System.IAsyncResult BeginOpen(System.TimeSpan timeout, System.AsyncCallback callback, object state) { throw null; }
        public System.IAsyncResult BeginRenew(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken rst, System.AsyncCallback callback, object state) { throw null; }
        public System.IAsyncResult BeginRenew(System.ServiceModel.Channels.Message message, System.AsyncCallback callback, object asyncState) { throw null; }
        public System.IAsyncResult BeginValidate(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken rst, System.AsyncCallback callback, object state) { throw null; }
        public System.IAsyncResult BeginValidate(System.ServiceModel.Channels.Message message, System.AsyncCallback callback, object asyncState) { throw null; }
        public virtual System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse Cancel(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken rst) { throw null; }
        public System.ServiceModel.Channels.Message Cancel(System.ServiceModel.Channels.Message message) { throw null; }
        public void Close() { }
        public void Close(System.TimeSpan timeout) { }
        protected virtual System.ServiceModel.Channels.Message CreateRequest(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, string requestType) { throw null; }
        public System.ServiceModel.Channels.Message EndCancel(System.IAsyncResult asyncResult) { throw null; }
        public void EndCancel(System.IAsyncResult result, out System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse rstr) { throw null; }
        public void EndClose(System.IAsyncResult result) { }
        public System.ServiceModel.Channels.Message EndIssue(System.IAsyncResult asyncResult) { throw null; }
        public System.IdentityModel.Tokens.SecurityToken EndIssue(System.IAsyncResult result, out System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse rstr) { throw null; }
        public void EndOpen(System.IAsyncResult result) { }
        public System.ServiceModel.Channels.Message EndRenew(System.IAsyncResult asyncResult) { throw null; }
        public void EndRenew(System.IAsyncResult result, out System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse rstr) { throw null; }
        public System.ServiceModel.Channels.Message EndValidate(System.IAsyncResult asyncResult) { throw null; }
        public void EndValidate(System.IAsyncResult result, out System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse rstr) { throw null; }
        public T GetProperty<T>() where T : class { throw null; }
        protected static string GetRequestAction(string requestType, System.ServiceModel.Security.TrustVersion trustVersion) { throw null; }
        public virtual System.IdentityModel.Tokens.SecurityToken GetTokenFromResponse(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse response) { throw null; }
        public virtual System.IdentityModel.Tokens.SecurityToken Issue(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken rst) { throw null; }
        public virtual System.IdentityModel.Tokens.SecurityToken Issue(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken rst, out System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse rstr) { throw null; }
        public System.ServiceModel.Channels.Message Issue(System.ServiceModel.Channels.Message message) { throw null; }
        public void Open() { }
        public void Open(System.TimeSpan timeout) { }
        protected virtual System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse ReadResponse(System.ServiceModel.Channels.Message response) { throw null; }
        public virtual System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse Renew(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken rst) { throw null; }
        public System.ServiceModel.Channels.Message Renew(System.ServiceModel.Channels.Message message) { throw null; }
        public virtual System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse Validate(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken rst) { throw null; }
        public System.ServiceModel.Channels.Message Validate(System.ServiceModel.Channels.Message message) { throw null; }
    }
    [System.Runtime.InteropServices.ComVisibleAttribute(false)]
    public partial class WSTrustChannelFactory : System.ServiceModel.ChannelFactory<System.ServiceModel.Security.IWSTrustChannelContract>
    {
        public WSTrustChannelFactory() { }
        public WSTrustChannelFactory(System.ServiceModel.Channels.Binding binding) { }
        public WSTrustChannelFactory(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) { }
        public WSTrustChannelFactory(System.ServiceModel.Channels.Binding binding, string remoteAddress) { }
        public WSTrustChannelFactory(System.ServiceModel.Description.ServiceEndpoint endpoint) { }
        public WSTrustChannelFactory(string endpointConfigurationName) { }
        public WSTrustChannelFactory(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) { }
        public System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager SecurityTokenHandlerCollectionManager { get { throw null; } set { } }
        public System.IdentityModel.Selectors.SecurityTokenResolver SecurityTokenResolver { get { throw null; } set { } }
        public System.ServiceModel.Security.TrustVersion TrustVersion { get { throw null; } set { } }
        public System.IdentityModel.Selectors.SecurityTokenResolver UseKeyTokenResolver { get { throw null; } set { } }
        public System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer WSTrustRequestSerializer { get { throw null; } set { } }
        public System.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer WSTrustResponseSerializer { get { throw null; } set { } }
        public override System.ServiceModel.Security.IWSTrustChannelContract CreateChannel(System.ServiceModel.EndpointAddress address, System.Uri via) { throw null; }
        protected virtual System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext CreateSerializationContext() { throw null; }
        protected virtual System.ServiceModel.Security.WSTrustChannel CreateTrustChannel(System.ServiceModel.Security.IWSTrustChannelContract innerChannel, System.ServiceModel.Security.TrustVersion trustVersion, System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext context, System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer requestSerializer, System.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer responseSerializer) { throw null; }
    }
    public partial class WSTrustRequestBodyWriter : System.ServiceModel.Channels.BodyWriter
    {
        public WSTrustRequestBodyWriter(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken requestSecurityToken, System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer serializer, System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext serializationContext) : base (default(bool)) { }
        protected override void OnWriteBodyContents(System.Xml.XmlDictionaryWriter writer) { }
    }
    public partial class WSTrustRequestProcessingErrorEventArgs : System.EventArgs
    {
        public WSTrustRequestProcessingErrorEventArgs(string requestType, System.Exception exception) { }
        public System.Exception Exception { get { throw null; } }
        public string RequestType { get { throw null; } }
    }
    public partial class WSTrustResponseBodyWriter : System.ServiceModel.Channels.BodyWriter
    {
        public WSTrustResponseBodyWriter(System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse requestSecurityTokenResponse, System.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer serializer, System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext context) : base (default(bool)) { }
        protected override void OnWriteBodyContents(System.Xml.XmlDictionaryWriter writer) { }
    }
    [System.ServiceModel.Activation.AspNetCompatibilityRequirementsAttribute(RequirementsMode=System.ServiceModel.Activation.AspNetCompatibilityRequirementsMode.Allowed)]
    [System.ServiceModel.ServiceBehaviorAttribute(Name="SecurityTokenService", Namespace="http://schemas.microsoft.com/ws/2008/06/identity/securitytokenservice", InstanceContextMode=System.ServiceModel.InstanceContextMode.Single, ConcurrencyMode=System.ServiceModel.ConcurrencyMode.Multiple)]
    public partial class WSTrustServiceContract : System.ServiceModel.Description.IContractBehavior, System.ServiceModel.Description.IWsdlExportExtension, System.ServiceModel.Security.IWSTrust13AsyncContract, System.ServiceModel.Security.IWSTrust13SyncContract, System.ServiceModel.Security.IWSTrustFeb2005AsyncContract, System.ServiceModel.Security.IWSTrustFeb2005SyncContract
    {
        public WSTrustServiceContract(System.IdentityModel.Configuration.SecurityTokenServiceConfiguration securityTokenServiceConfiguration) { }
        public System.IdentityModel.Configuration.SecurityTokenServiceConfiguration SecurityTokenServiceConfiguration { get { throw null; } }
        public event System.EventHandler<System.ServiceModel.Security.WSTrustRequestProcessingErrorEventArgs> RequestFailed { add { } remove { } }
        public void AddBindingParameters(System.ServiceModel.Description.ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Channels.BindingParameterCollection bindingParameters) { }
        public void ApplyClientBehavior(System.ServiceModel.Description.ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.ClientRuntime clientRuntime) { }
        public void ApplyDispatchBehavior(System.ServiceModel.Description.ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.DispatchRuntime dispatchRuntime) { }
        protected virtual System.IAsyncResult BeginDispatchRequest(System.ServiceModel.Security.DispatchContext dispatchContext, System.AsyncCallback asyncCallback, object asyncState) { throw null; }
        protected virtual System.IAsyncResult BeginProcessCore(System.ServiceModel.Channels.Message requestMessage, System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer requestSerializer, System.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer responseSerializer, string requestAction, string responseAction, string trustNamespace, System.AsyncCallback callback, object state) { throw null; }
        public System.IAsyncResult BeginTrust13Cancel(System.ServiceModel.Channels.Message request, System.AsyncCallback callback, object state) { throw null; }
        public System.IAsyncResult BeginTrust13CancelResponse(System.ServiceModel.Channels.Message request, System.AsyncCallback callback, object state) { throw null; }
        public System.IAsyncResult BeginTrust13Issue(System.ServiceModel.Channels.Message request, System.AsyncCallback callback, object state) { throw null; }
        public System.IAsyncResult BeginTrust13IssueResponse(System.ServiceModel.Channels.Message request, System.AsyncCallback callback, object state) { throw null; }
        public System.IAsyncResult BeginTrust13Renew(System.ServiceModel.Channels.Message request, System.AsyncCallback callback, object state) { throw null; }
        public System.IAsyncResult BeginTrust13RenewResponse(System.ServiceModel.Channels.Message request, System.AsyncCallback callback, object state) { throw null; }
        public System.IAsyncResult BeginTrust13Validate(System.ServiceModel.Channels.Message request, System.AsyncCallback callback, object state) { throw null; }
        public System.IAsyncResult BeginTrust13ValidateResponse(System.ServiceModel.Channels.Message request, System.AsyncCallback callback, object state) { throw null; }
        public System.IAsyncResult BeginTrustFeb2005Cancel(System.ServiceModel.Channels.Message request, System.AsyncCallback callback, object state) { throw null; }
        public System.IAsyncResult BeginTrustFeb2005CancelResponse(System.ServiceModel.Channels.Message request, System.AsyncCallback callback, object state) { throw null; }
        public System.IAsyncResult BeginTrustFeb2005Issue(System.ServiceModel.Channels.Message request, System.AsyncCallback callback, object state) { throw null; }
        public System.IAsyncResult BeginTrustFeb2005IssueResponse(System.ServiceModel.Channels.Message request, System.AsyncCallback callback, object state) { throw null; }
        public System.IAsyncResult BeginTrustFeb2005Renew(System.ServiceModel.Channels.Message request, System.AsyncCallback callback, object state) { throw null; }
        public System.IAsyncResult BeginTrustFeb2005RenewResponse(System.ServiceModel.Channels.Message request, System.AsyncCallback callback, object state) { throw null; }
        public System.IAsyncResult BeginTrustFeb2005Validate(System.ServiceModel.Channels.Message request, System.AsyncCallback callback, object state) { throw null; }
        public System.IAsyncResult BeginTrustFeb2005ValidateResponse(System.ServiceModel.Channels.Message request, System.AsyncCallback callback, object state) { throw null; }
        protected virtual System.ServiceModel.Security.DispatchContext CreateDispatchContext(System.ServiceModel.Channels.Message requestMessage, string requestAction, string responseAction, string trustNamespace, System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer requestSerializer, System.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer responseSerializer, System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext serializationContext) { throw null; }
        protected virtual System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext CreateSerializationContext() { throw null; }
        protected virtual void DispatchRequest(System.ServiceModel.Security.DispatchContext dispatchContext) { }
        protected virtual System.ServiceModel.Security.DispatchContext EndDispatchRequest(System.IAsyncResult ar) { throw null; }
        protected virtual System.ServiceModel.Channels.Message EndProcessCore(System.IAsyncResult ar, string requestAction, string responseAction, string trustNamespace) { throw null; }
        public System.ServiceModel.Channels.Message EndTrust13Cancel(System.IAsyncResult ar) { throw null; }
        public System.ServiceModel.Channels.Message EndTrust13CancelResponse(System.IAsyncResult ar) { throw null; }
        public System.ServiceModel.Channels.Message EndTrust13Issue(System.IAsyncResult ar) { throw null; }
        public System.ServiceModel.Channels.Message EndTrust13IssueResponse(System.IAsyncResult ar) { throw null; }
        public System.ServiceModel.Channels.Message EndTrust13Renew(System.IAsyncResult ar) { throw null; }
        public System.ServiceModel.Channels.Message EndTrust13RenewResponse(System.IAsyncResult ar) { throw null; }
        public System.ServiceModel.Channels.Message EndTrust13Validate(System.IAsyncResult ar) { throw null; }
        public System.ServiceModel.Channels.Message EndTrust13ValidateResponse(System.IAsyncResult ar) { throw null; }
        public System.ServiceModel.Channels.Message EndTrustFeb2005Cancel(System.IAsyncResult ar) { throw null; }
        public System.ServiceModel.Channels.Message EndTrustFeb2005CancelResponse(System.IAsyncResult ar) { throw null; }
        public System.ServiceModel.Channels.Message EndTrustFeb2005Issue(System.IAsyncResult ar) { throw null; }
        public System.ServiceModel.Channels.Message EndTrustFeb2005IssueResponse(System.IAsyncResult ar) { throw null; }
        public System.ServiceModel.Channels.Message EndTrustFeb2005Renew(System.IAsyncResult ar) { throw null; }
        public System.ServiceModel.Channels.Message EndTrustFeb2005RenewResponse(System.IAsyncResult ar) { throw null; }
        public System.ServiceModel.Channels.Message EndTrustFeb2005Validate(System.IAsyncResult ar) { throw null; }
        public System.ServiceModel.Channels.Message EndTrustFeb2005ValidateResponse(System.IAsyncResult ar) { throw null; }
        public virtual void ExportContract(System.ServiceModel.Description.WsdlExporter exporter, System.ServiceModel.Description.WsdlContractConversionContext context) { }
        public virtual void ExportEndpoint(System.ServiceModel.Description.WsdlExporter exporter, System.ServiceModel.Description.WsdlEndpointConversionContext context) { }
        protected virtual void FixMessageElement(System.Web.Services.Description.ServiceDescription serviceDescription, System.Web.Services.Description.PortType portType, System.ServiceModel.Description.WsdlEndpointConversionContext context, string operationName, System.Xml.XmlQualifiedName inputMessageElement, System.Xml.XmlQualifiedName outputMessageElement) { }
        protected virtual System.IdentityModel.Selectors.SecurityTokenResolver GetRstSecurityTokenResolver() { throw null; }
        protected virtual System.IdentityModel.Selectors.SecurityTokenResolver GetSecurityHeaderTokenResolver(System.ServiceModel.Channels.RequestContext requestContext) { throw null; }
        protected virtual bool HandleException(System.Exception ex, string trustNamespace, string action, System.ServiceModel.EnvelopeVersion requestEnvelopeVersion) { throw null; }
        protected virtual void ImportSchema(System.ServiceModel.Description.WsdlExporter exporter, System.ServiceModel.Description.WsdlEndpointConversionContext context, string ns) { }
        protected virtual void IncludeNamespace(System.ServiceModel.Description.WsdlEndpointConversionContext context, string prefix, string ns) { }
        protected virtual System.ServiceModel.Channels.Message ProcessCore(System.ServiceModel.Channels.Message requestMessage, System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer requestSerializer, System.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer responseSerializer, string requestAction, string responseAction, string trustNamespace) { throw null; }
        public System.ServiceModel.Channels.Message ProcessTrust13Cancel(System.ServiceModel.Channels.Message message) { throw null; }
        public System.ServiceModel.Channels.Message ProcessTrust13CancelResponse(System.ServiceModel.Channels.Message message) { throw null; }
        public System.ServiceModel.Channels.Message ProcessTrust13Issue(System.ServiceModel.Channels.Message message) { throw null; }
        public System.ServiceModel.Channels.Message ProcessTrust13IssueResponse(System.ServiceModel.Channels.Message message) { throw null; }
        public System.ServiceModel.Channels.Message ProcessTrust13Renew(System.ServiceModel.Channels.Message message) { throw null; }
        public System.ServiceModel.Channels.Message ProcessTrust13RenewResponse(System.ServiceModel.Channels.Message message) { throw null; }
        public System.ServiceModel.Channels.Message ProcessTrust13Validate(System.ServiceModel.Channels.Message message) { throw null; }
        public System.ServiceModel.Channels.Message ProcessTrust13ValidateResponse(System.ServiceModel.Channels.Message message) { throw null; }
        public System.ServiceModel.Channels.Message ProcessTrustFeb2005Cancel(System.ServiceModel.Channels.Message message) { throw null; }
        public System.ServiceModel.Channels.Message ProcessTrustFeb2005CancelResponse(System.ServiceModel.Channels.Message message) { throw null; }
        public System.ServiceModel.Channels.Message ProcessTrustFeb2005Issue(System.ServiceModel.Channels.Message message) { throw null; }
        public System.ServiceModel.Channels.Message ProcessTrustFeb2005IssueResponse(System.ServiceModel.Channels.Message message) { throw null; }
        public System.ServiceModel.Channels.Message ProcessTrustFeb2005Renew(System.ServiceModel.Channels.Message message) { throw null; }
        public System.ServiceModel.Channels.Message ProcessTrustFeb2005RenewResponse(System.ServiceModel.Channels.Message message) { throw null; }
        public System.ServiceModel.Channels.Message ProcessTrustFeb2005Validate(System.ServiceModel.Channels.Message message) { throw null; }
        public System.ServiceModel.Channels.Message ProcessTrustFeb2005ValidateResponse(System.ServiceModel.Channels.Message message) { throw null; }
        public void Validate(System.ServiceModel.Description.ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint) { }
        protected virtual void ValidateDispatchContext(System.ServiceModel.Security.DispatchContext dispatchContext) { }
    }
    public partial class WSTrustServiceHost : System.ServiceModel.ServiceHost
    {
        public WSTrustServiceHost(System.IdentityModel.Configuration.SecurityTokenServiceConfiguration securityTokenServiceConfiguration, params System.Uri[] baseAddresses) { }
        public WSTrustServiceHost(System.ServiceModel.Security.WSTrustServiceContract serviceContract, params System.Uri[] baseAddresses) { }
        public System.IdentityModel.Configuration.SecurityTokenServiceConfiguration SecurityTokenServiceConfiguration { get { throw null; } }
        public System.ServiceModel.Security.WSTrustServiceContract ServiceContract { get { throw null; } }
        protected override void ApplyConfiguration() { }
        protected virtual void ConfigureMetadata() { }
        protected override void InitializeRuntime() { }
        protected virtual void UpdateServiceConfiguration() { }
    }
    public sealed partial class X509CertificateInitiatorClientCredential
    {
        internal X509CertificateInitiatorClientCredential() { }
        public System.Security.Cryptography.X509Certificates.X509Certificate2 Certificate { get { throw null; } set { } }
        public void SetCertificate(System.Security.Cryptography.X509Certificates.StoreLocation storeLocation, System.Security.Cryptography.X509Certificates.StoreName storeName, System.Security.Cryptography.X509Certificates.X509FindType findType, object findValue) { }
        public void SetCertificate(string subjectName, System.Security.Cryptography.X509Certificates.StoreLocation storeLocation, System.Security.Cryptography.X509Certificates.StoreName storeName) { }
    }
    public sealed partial class X509CertificateInitiatorServiceCredential
    {
        internal X509CertificateInitiatorServiceCredential() { }
        public System.ServiceModel.Security.X509ClientCertificateAuthentication Authentication { get { throw null; } }
        public System.Security.Cryptography.X509Certificates.X509Certificate2 Certificate { get { throw null; } set { } }
        public void SetCertificate(System.Security.Cryptography.X509Certificates.StoreLocation storeLocation, System.Security.Cryptography.X509Certificates.StoreName storeName, System.Security.Cryptography.X509Certificates.X509FindType findType, object findValue) { }
        public void SetCertificate(string subjectName, System.Security.Cryptography.X509Certificates.StoreLocation storeLocation, System.Security.Cryptography.X509Certificates.StoreName storeName) { }
    }
    public sealed partial class X509CertificateRecipientClientCredential
    {
        internal X509CertificateRecipientClientCredential() { }
        public System.ServiceModel.Security.X509ServiceCertificateAuthentication Authentication { get { throw null; } }
        public System.Security.Cryptography.X509Certificates.X509Certificate2 DefaultCertificate { get { throw null; } set { } }
        public System.Collections.Generic.Dictionary<System.Uri, System.Security.Cryptography.X509Certificates.X509Certificate2> ScopedCertificates { get { throw null; } }
        public System.ServiceModel.Security.X509ServiceCertificateAuthentication SslCertificateAuthentication { get { throw null; } set { } }
        public void SetDefaultCertificate(System.Security.Cryptography.X509Certificates.StoreLocation storeLocation, System.Security.Cryptography.X509Certificates.StoreName storeName, System.Security.Cryptography.X509Certificates.X509FindType findType, object findValue) { }
        public void SetDefaultCertificate(string subjectName, System.Security.Cryptography.X509Certificates.StoreLocation storeLocation, System.Security.Cryptography.X509Certificates.StoreName storeName) { }
        public void SetScopedCertificate(System.Security.Cryptography.X509Certificates.StoreLocation storeLocation, System.Security.Cryptography.X509Certificates.StoreName storeName, System.Security.Cryptography.X509Certificates.X509FindType findType, object findValue, System.Uri targetService) { }
        public void SetScopedCertificate(string subjectName, System.Security.Cryptography.X509Certificates.StoreLocation storeLocation, System.Security.Cryptography.X509Certificates.StoreName storeName, System.Uri targetService) { }
    }
    public sealed partial class X509CertificateRecipientServiceCredential
    {
        internal X509CertificateRecipientServiceCredential() { }
        public System.Security.Cryptography.X509Certificates.X509Certificate2 Certificate { get { throw null; } set { } }
        public void SetCertificate(System.Security.Cryptography.X509Certificates.StoreLocation storeLocation, System.Security.Cryptography.X509Certificates.StoreName storeName, System.Security.Cryptography.X509Certificates.X509FindType findType, object findValue) { }
        public void SetCertificate(string subjectName) { }
        public void SetCertificate(string subjectName, System.Security.Cryptography.X509Certificates.StoreLocation storeLocation, System.Security.Cryptography.X509Certificates.StoreName storeName) { }
    }
    public partial class X509ClientCertificateAuthentication
    {
        internal X509ClientCertificateAuthentication() { }
        public System.ServiceModel.Security.X509CertificateValidationMode CertificateValidationMode { get { throw null; } set { } }
        public System.IdentityModel.Selectors.X509CertificateValidator CustomCertificateValidator { get { throw null; } set { } }
        public bool IncludeWindowsGroups { get { throw null; } set { } }
        public bool MapClientCertificateToWindowsAccount { get { throw null; } set { } }
        public System.Security.Cryptography.X509Certificates.X509RevocationMode RevocationMode { get { throw null; } set { } }
        public System.Security.Cryptography.X509Certificates.StoreLocation TrustedStoreLocation { get { throw null; } set { } }
    }
    public partial class X509PeerCertificateAuthentication
    {
        internal X509PeerCertificateAuthentication() { }
        public System.ServiceModel.Security.X509CertificateValidationMode CertificateValidationMode { get { throw null; } set { } }
        public System.IdentityModel.Selectors.X509CertificateValidator CustomCertificateValidator { get { throw null; } set { } }
        public System.Security.Cryptography.X509Certificates.X509RevocationMode RevocationMode { get { throw null; } set { } }
        public System.Security.Cryptography.X509Certificates.StoreLocation TrustedStoreLocation { get { throw null; } set { } }
    }
    public sealed partial class X509ServiceCertificateAuthentication
    {
        public X509ServiceCertificateAuthentication() { }
        public System.ServiceModel.Security.X509CertificateValidationMode CertificateValidationMode { get { throw null; } set { } }
        public System.IdentityModel.Selectors.X509CertificateValidator CustomCertificateValidator { get { throw null; } set { } }
        public System.Security.Cryptography.X509Certificates.X509RevocationMode RevocationMode { get { throw null; } set { } }
        public System.Security.Cryptography.X509Certificates.StoreLocation TrustedStoreLocation { get { throw null; } set { } }
    }
}
namespace System.ServiceModel.Security.Tokens
{
    public partial class ClaimTypeRequirement
    {
        public ClaimTypeRequirement(string claimType) { }
        public ClaimTypeRequirement(string claimType, bool isOptional) { }
        public string ClaimType { get { throw null; } }
        public bool IsOptional { get { throw null; } }
    }
    public partial interface IIssuanceSecurityTokenAuthenticator
    {
        System.ServiceModel.Security.Tokens.IssuedSecurityTokenHandler IssuedSecurityTokenHandler { get; set; }
        System.ServiceModel.Security.Tokens.RenewedSecurityTokenHandler RenewedSecurityTokenHandler { get; set; }
    }
    public partial interface ILogonTokenCacheManager
    {
        void FlushLogonTokenCache();
        bool RemoveCachedLogonToken(string username);
    }
    public sealed partial class InitiatorServiceModelSecurityTokenRequirement : System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement
    {
        public InitiatorServiceModelSecurityTokenRequirement() { }
        public System.ServiceModel.EndpointAddress TargetAddress { get { throw null; } set { } }
        public System.Uri Via { get { throw null; } set { } }
        public override string ToString() { throw null; }
    }
    public partial interface ISecurityContextSecurityTokenCache
    {
        void AddContext(System.ServiceModel.Security.Tokens.SecurityContextSecurityToken token);
        void ClearContexts();
        System.Collections.ObjectModel.Collection<System.ServiceModel.Security.Tokens.SecurityContextSecurityToken> GetAllContexts(System.Xml.UniqueId contextId);
        System.ServiceModel.Security.Tokens.SecurityContextSecurityToken GetContext(System.Xml.UniqueId contextId, System.Xml.UniqueId generation);
        void RemoveAllContexts(System.Xml.UniqueId contextId);
        void RemoveContext(System.Xml.UniqueId contextId, System.Xml.UniqueId generation);
        bool TryAddContext(System.ServiceModel.Security.Tokens.SecurityContextSecurityToken token);
        void UpdateContextCachingTime(System.ServiceModel.Security.Tokens.SecurityContextSecurityToken context, System.DateTime expirationTime);
    }
    public delegate void IssuedSecurityTokenHandler(System.IdentityModel.Tokens.SecurityToken issuedToken, System.ServiceModel.EndpointAddress tokenRequestor);
    public partial class IssuedSecurityTokenParameters : System.ServiceModel.Security.Tokens.SecurityTokenParameters
    {
        public IssuedSecurityTokenParameters() { }
        protected IssuedSecurityTokenParameters(System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters other) { }
        public IssuedSecurityTokenParameters(string tokenType) { }
        public IssuedSecurityTokenParameters(string tokenType, System.ServiceModel.EndpointAddress issuerAddress) { }
        public IssuedSecurityTokenParameters(string tokenType, System.ServiceModel.EndpointAddress issuerAddress, System.ServiceModel.Channels.Binding issuerBinding) { }
        public System.Collections.ObjectModel.Collection<System.Xml.XmlElement> AdditionalRequestParameters { get { throw null; } }
        public System.Collections.ObjectModel.Collection<System.ServiceModel.Security.Tokens.ClaimTypeRequirement> ClaimTypeRequirements { get { throw null; } }
        public System.ServiceModel.MessageSecurityVersion DefaultMessageSecurityVersion { get { throw null; } set { } }
        protected internal override bool HasAsymmetricKey { get { throw null; } }
        public System.ServiceModel.EndpointAddress IssuerAddress { get { throw null; } set { } }
        public System.ServiceModel.Channels.Binding IssuerBinding { get { throw null; } set { } }
        public System.ServiceModel.EndpointAddress IssuerMetadataAddress { get { throw null; } set { } }
        public int KeySize { get { throw null; } set { } }
        public System.IdentityModel.Tokens.SecurityKeyType KeyType { get { throw null; } set { } }
        protected internal override bool SupportsClientAuthentication { get { throw null; } }
        protected internal override bool SupportsClientWindowsIdentity { get { throw null; } }
        protected internal override bool SupportsServerAuthentication { get { throw null; } }
        public string TokenType { get { throw null; } set { } }
        public bool UseStrTransform { get { throw null; } set { } }
        protected override System.ServiceModel.Security.Tokens.SecurityTokenParameters CloneCore() { throw null; }
        protected internal override System.IdentityModel.Tokens.SecurityKeyIdentifierClause CreateKeyIdentifierClause(System.IdentityModel.Tokens.SecurityToken token, System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle referenceStyle) { throw null; }
        public System.Collections.ObjectModel.Collection<System.Xml.XmlElement> CreateRequestParameters(System.ServiceModel.MessageSecurityVersion messageSecurityVersion, System.IdentityModel.Selectors.SecurityTokenSerializer securityTokenSerializer) { throw null; }
        protected internal override void InitializeSecurityTokenRequirement(System.IdentityModel.Selectors.SecurityTokenRequirement requirement) { }
        public override string ToString() { throw null; }
    }
    public partial class IssuedSecurityTokenProvider : System.IdentityModel.Selectors.SecurityTokenProvider, System.ServiceModel.ICommunicationObject
    {
        public IssuedSecurityTokenProvider() { }
        public bool CacheIssuedTokens { get { throw null; } set { } }
        public virtual System.TimeSpan DefaultCloseTimeout { get { throw null; } }
        public virtual System.TimeSpan DefaultOpenTimeout { get { throw null; } }
        public System.ServiceModel.Security.IdentityVerifier IdentityVerifier { get { throw null; } set { } }
        public int IssuedTokenRenewalThresholdPercentage { get { throw null; } set { } }
        public System.ServiceModel.EndpointAddress IssuerAddress { get { throw null; } set { } }
        public System.ServiceModel.Channels.Binding IssuerBinding { get { throw null; } set { } }
        public System.Collections.Generic.KeyedByTypeCollection<System.ServiceModel.Description.IEndpointBehavior> IssuerChannelBehaviors { get { throw null; } }
        public System.ServiceModel.Security.SecurityKeyEntropyMode KeyEntropyMode { get { throw null; } set { } }
        public System.TimeSpan MaxIssuedTokenCachingTime { get { throw null; } set { } }
        public System.ServiceModel.MessageSecurityVersion MessageSecurityVersion { get { throw null; } set { } }
        public System.ServiceModel.Security.SecurityAlgorithmSuite SecurityAlgorithmSuite { get { throw null; } set { } }
        public System.IdentityModel.Selectors.SecurityTokenSerializer SecurityTokenSerializer { get { throw null; } set { } }
        public System.ServiceModel.CommunicationState State { get { throw null; } }
        public override bool SupportsTokenCancellation { get { throw null; } }
        public System.ServiceModel.EndpointAddress TargetAddress { get { throw null; } set { } }
        public System.Collections.ObjectModel.Collection<System.Xml.XmlElement> TokenRequestParameters { get { throw null; } }
        public event System.EventHandler Closed { add { } remove { } }
        public event System.EventHandler Closing { add { } remove { } }
        public event System.EventHandler Faulted { add { } remove { } }
        public event System.EventHandler Opened { add { } remove { } }
        public event System.EventHandler Opening { add { } remove { } }
        public void Abort() { }
        public System.IAsyncResult BeginClose(System.AsyncCallback callback, object state) { throw null; }
        public System.IAsyncResult BeginClose(System.TimeSpan timeout, System.AsyncCallback callback, object state) { throw null; }
        protected override System.IAsyncResult BeginGetTokenCore(System.TimeSpan timeout, System.AsyncCallback callback, object state) { throw null; }
        public System.IAsyncResult BeginOpen(System.AsyncCallback callback, object state) { throw null; }
        public System.IAsyncResult BeginOpen(System.TimeSpan timeout, System.AsyncCallback callback, object state) { throw null; }
        public void Close() { }
        public void Close(System.TimeSpan timeout) { }
        public void Dispose() { }
        public void EndClose(System.IAsyncResult result) { }
        protected override System.IdentityModel.Tokens.SecurityToken EndGetTokenCore(System.IAsyncResult result) { throw null; }
        public void EndOpen(System.IAsyncResult result) { }
        protected override System.IdentityModel.Tokens.SecurityToken GetTokenCore(System.TimeSpan timeout) { throw null; }
        public void Open() { }
        public void Open(System.TimeSpan timeout) { }
    }
    public partial class KerberosSecurityTokenParameters : System.ServiceModel.Security.Tokens.SecurityTokenParameters
    {
        public KerberosSecurityTokenParameters() { }
        protected KerberosSecurityTokenParameters(System.ServiceModel.Security.Tokens.KerberosSecurityTokenParameters other) { }
        protected internal override bool HasAsymmetricKey { get { throw null; } }
        protected internal override bool SupportsClientAuthentication { get { throw null; } }
        protected internal override bool SupportsClientWindowsIdentity { get { throw null; } }
        protected internal override bool SupportsServerAuthentication { get { throw null; } }
        protected override System.ServiceModel.Security.Tokens.SecurityTokenParameters CloneCore() { throw null; }
        protected internal override System.IdentityModel.Tokens.SecurityKeyIdentifierClause CreateKeyIdentifierClause(System.IdentityModel.Tokens.SecurityToken token, System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle referenceStyle) { throw null; }
        protected internal override void InitializeSecurityTokenRequirement(System.IdentityModel.Selectors.SecurityTokenRequirement requirement) { }
    }
    public sealed partial class RecipientServiceModelSecurityTokenRequirement : System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement
    {
        public RecipientServiceModelSecurityTokenRequirement() { }
        public System.ServiceModel.AuditLogLocation AuditLogLocation { get { throw null; } set { } }
        public System.Uri ListenUri { get { throw null; } set { } }
        public System.ServiceModel.AuditLevel MessageAuthenticationAuditLevel { get { throw null; } set { } }
        public bool SuppressAuditFailure { get { throw null; } set { } }
        public override string ToString() { throw null; }
    }
    public delegate void RenewedSecurityTokenHandler(System.IdentityModel.Tokens.SecurityToken newSecurityToken, System.IdentityModel.Tokens.SecurityToken oldSecurityToken);
    public partial class RsaSecurityTokenParameters : System.ServiceModel.Security.Tokens.SecurityTokenParameters
    {
        public RsaSecurityTokenParameters() { }
        protected RsaSecurityTokenParameters(System.ServiceModel.Security.Tokens.RsaSecurityTokenParameters other) { }
        protected internal override bool HasAsymmetricKey { get { throw null; } }
        protected internal override bool SupportsClientAuthentication { get { throw null; } }
        protected internal override bool SupportsClientWindowsIdentity { get { throw null; } }
        protected internal override bool SupportsServerAuthentication { get { throw null; } }
        protected override System.ServiceModel.Security.Tokens.SecurityTokenParameters CloneCore() { throw null; }
        protected internal override System.IdentityModel.Tokens.SecurityKeyIdentifierClause CreateKeyIdentifierClause(System.IdentityModel.Tokens.SecurityToken token, System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle referenceStyle) { throw null; }
        protected internal override void InitializeSecurityTokenRequirement(System.IdentityModel.Selectors.SecurityTokenRequirement requirement) { }
    }
    public partial class SecureConversationSecurityTokenParameters : System.ServiceModel.Security.Tokens.SecurityTokenParameters
    {
        public SecureConversationSecurityTokenParameters() { }
        public SecureConversationSecurityTokenParameters(System.ServiceModel.Channels.SecurityBindingElement bootstrapSecurityBindingElement) { }
        public SecureConversationSecurityTokenParameters(System.ServiceModel.Channels.SecurityBindingElement bootstrapSecurityBindingElement, bool requireCancellation) { }
        public SecureConversationSecurityTokenParameters(System.ServiceModel.Channels.SecurityBindingElement bootstrapSecurityBindingElement, bool requireCancellation, bool canRenewSession) { }
        public SecureConversationSecurityTokenParameters(System.ServiceModel.Channels.SecurityBindingElement bootstrapSecurityBindingElement, bool requireCancellation, bool canRenewSession, System.ServiceModel.Security.ChannelProtectionRequirements bootstrapProtectionRequirements) { }
        public SecureConversationSecurityTokenParameters(System.ServiceModel.Channels.SecurityBindingElement bootstrapSecurityBindingElement, bool requireCancellation, System.ServiceModel.Security.ChannelProtectionRequirements bootstrapProtectionRequirements) { }
        protected SecureConversationSecurityTokenParameters(System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters other) { }
        public System.ServiceModel.Security.ChannelProtectionRequirements BootstrapProtectionRequirements { get { throw null; } }
        public System.ServiceModel.Channels.SecurityBindingElement BootstrapSecurityBindingElement { get { throw null; } set { } }
        public bool CanRenewSession { get { throw null; } set { } }
        protected internal override bool HasAsymmetricKey { get { throw null; } }
        public bool RequireCancellation { get { throw null; } set { } }
        protected internal override bool SupportsClientAuthentication { get { throw null; } }
        protected internal override bool SupportsClientWindowsIdentity { get { throw null; } }
        protected internal override bool SupportsServerAuthentication { get { throw null; } }
        protected override System.ServiceModel.Security.Tokens.SecurityTokenParameters CloneCore() { throw null; }
        protected internal override System.IdentityModel.Tokens.SecurityKeyIdentifierClause CreateKeyIdentifierClause(System.IdentityModel.Tokens.SecurityToken token, System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle referenceStyle) { throw null; }
        protected internal override void InitializeSecurityTokenRequirement(System.IdentityModel.Selectors.SecurityTokenRequirement requirement) { }
        public override string ToString() { throw null; }
    }
    public partial class SecurityContextSecurityToken : System.IdentityModel.Tokens.SecurityToken, System.IDisposable
    {
        public SecurityContextSecurityToken(System.Xml.UniqueId contextId, byte[] key, System.DateTime validFrom, System.DateTime validTo) { }
        public SecurityContextSecurityToken(System.Xml.UniqueId contextId, string id, byte[] key, System.DateTime validFrom, System.DateTime validTo) { }
        public SecurityContextSecurityToken(System.Xml.UniqueId contextId, string id, byte[] key, System.DateTime validFrom, System.DateTime validTo, System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.Policy.IAuthorizationPolicy> authorizationPolicies) { }
        public SecurityContextSecurityToken(System.Xml.UniqueId contextId, string id, byte[] key, System.DateTime validFrom, System.DateTime validTo, System.Xml.UniqueId keyGeneration, System.DateTime keyEffectiveTime, System.DateTime keyExpirationTime, System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.Policy.IAuthorizationPolicy> authorizationPolicies) { }
        public System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.Policy.IAuthorizationPolicy> AuthorizationPolicies { get { throw null; } }
        public System.ServiceModel.Security.SecurityMessageProperty BootstrapMessageProperty { get { throw null; } set { } }
        public System.Xml.UniqueId ContextId { get { throw null; } }
        public override string Id { get { throw null; } }
        public bool IsCookieMode { get { throw null; } }
        public System.DateTime KeyEffectiveTime { get { throw null; } }
        public System.DateTime KeyExpirationTime { get { throw null; } }
        public System.Xml.UniqueId KeyGeneration { get { throw null; } }
        public override System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.Tokens.SecurityKey> SecurityKeys { get { throw null; } }
        public override System.DateTime ValidFrom { get { throw null; } }
        public override System.DateTime ValidTo { get { throw null; } }
        public override bool CanCreateKeyIdentifierClause<T>() { throw null; }
        public static System.ServiceModel.Security.Tokens.SecurityContextSecurityToken CreateCookieSecurityContextToken(System.Xml.UniqueId contextId, string id, byte[] key, System.DateTime validFrom, System.DateTime validTo, System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.Policy.IAuthorizationPolicy> authorizationPolicies, System.ServiceModel.Security.SecurityStateEncoder securityStateEncoder) { throw null; }
        public static System.ServiceModel.Security.Tokens.SecurityContextSecurityToken CreateCookieSecurityContextToken(System.Xml.UniqueId contextId, string id, byte[] key, System.DateTime validFrom, System.DateTime validTo, System.Xml.UniqueId keyGeneration, System.DateTime keyEffectiveTime, System.DateTime keyExpirationTime, System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.Policy.IAuthorizationPolicy> authorizationPolicies, System.ServiceModel.Security.SecurityStateEncoder securityStateEncoder) { throw null; }
        public override T CreateKeyIdentifierClause<T>() { throw null; }
        public void Dispose() { }
        public override bool MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause keyIdentifierClause) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class SecurityContextSecurityTokenAuthenticator : System.IdentityModel.Selectors.SecurityTokenAuthenticator
    {
        public SecurityContextSecurityTokenAuthenticator() { }
        protected override bool CanValidateTokenCore(System.IdentityModel.Tokens.SecurityToken token) { throw null; }
        protected override System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.Policy.IAuthorizationPolicy> ValidateTokenCore(System.IdentityModel.Tokens.SecurityToken token) { throw null; }
    }
    public partial class SecurityContextSecurityTokenResolver : System.IdentityModel.Selectors.SecurityTokenResolver, System.ServiceModel.Security.Tokens.ISecurityContextSecurityTokenCache
    {
        public SecurityContextSecurityTokenResolver(int securityContextCacheCapacity, bool removeOldestTokensOnCacheFull) { }
        public SecurityContextSecurityTokenResolver(int securityContextCacheCapacity, bool removeOldestTokensOnCacheFull, System.TimeSpan clockSkew) { }
        public System.TimeSpan ClockSkew { get { throw null; } }
        public bool RemoveOldestTokensOnCacheFull { get { throw null; } }
        public int SecurityContextTokenCacheCapacity { get { throw null; } }
        public void AddContext(System.ServiceModel.Security.Tokens.SecurityContextSecurityToken token) { }
        public void ClearContexts() { }
        public System.Collections.ObjectModel.Collection<System.ServiceModel.Security.Tokens.SecurityContextSecurityToken> GetAllContexts(System.Xml.UniqueId contextId) { throw null; }
        public System.ServiceModel.Security.Tokens.SecurityContextSecurityToken GetContext(System.Xml.UniqueId contextId, System.Xml.UniqueId generation) { throw null; }
        public void RemoveAllContexts(System.Xml.UniqueId contextId) { }
        public void RemoveContext(System.Xml.UniqueId contextId, System.Xml.UniqueId generation) { }
        public bool TryAddContext(System.ServiceModel.Security.Tokens.SecurityContextSecurityToken token) { throw null; }
        protected override bool TryResolveSecurityKeyCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause keyIdentifierClause, out System.IdentityModel.Tokens.SecurityKey key) { throw null; }
        protected override bool TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifier keyIdentifier, out System.IdentityModel.Tokens.SecurityToken token) { throw null; }
        protected override bool TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause keyIdentifierClause, out System.IdentityModel.Tokens.SecurityToken token) { throw null; }
        public void UpdateContextCachingTime(System.ServiceModel.Security.Tokens.SecurityContextSecurityToken context, System.DateTime expirationTime) { }
    }
    public enum SecurityTokenInclusionMode
    {
        AlwaysToInitiator = 3,
        AlwaysToRecipient = 0,
        Never = 1,
        Once = 2,
    }
    public abstract partial class SecurityTokenParameters
    {
        protected SecurityTokenParameters() { }
        protected SecurityTokenParameters(System.ServiceModel.Security.Tokens.SecurityTokenParameters other) { }
        protected internal abstract bool HasAsymmetricKey { get; }
        public System.ServiceModel.Security.Tokens.SecurityTokenInclusionMode InclusionMode { get { throw null; } set { } }
        public System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle ReferenceStyle { get { throw null; } set { } }
        public bool RequireDerivedKeys { get { throw null; } set { } }
        protected internal abstract bool SupportsClientAuthentication { get; }
        protected internal abstract bool SupportsClientWindowsIdentity { get; }
        protected internal abstract bool SupportsServerAuthentication { get; }
        public System.ServiceModel.Security.Tokens.SecurityTokenParameters Clone() { throw null; }
        protected abstract System.ServiceModel.Security.Tokens.SecurityTokenParameters CloneCore();
        protected internal abstract System.IdentityModel.Tokens.SecurityKeyIdentifierClause CreateKeyIdentifierClause(System.IdentityModel.Tokens.SecurityToken token, System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle referenceStyle);
        protected internal abstract void InitializeSecurityTokenRequirement(System.IdentityModel.Selectors.SecurityTokenRequirement requirement);
        protected internal virtual bool MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityToken token, System.IdentityModel.Tokens.SecurityKeyIdentifierClause keyIdentifierClause, System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle referenceStyle) { throw null; }
        public override string ToString() { throw null; }
    }
    public enum SecurityTokenReferenceStyle
    {
        External = 1,
        Internal = 0,
    }
    public abstract partial class ServiceModelSecurityTokenRequirement : System.IdentityModel.Selectors.SecurityTokenRequirement
    {
        protected const string Namespace = "http://schemas.microsoft.com/ws/2006/05/servicemodel/securitytokenrequirement";
        protected ServiceModelSecurityTokenRequirement() { }
        public static string AuditLogLocationProperty { get { throw null; } }
        public static string ChannelParametersCollectionProperty { get { throw null; } }
        public static string DuplexClientLocalAddressProperty { get { throw null; } }
        public static string EndpointFilterTableProperty { get { throw null; } }
        public static string ExtendedProtectionPolicy { get { throw null; } }
        public static string HttpAuthenticationSchemeProperty { get { throw null; } }
        public bool IsInitiator { get { throw null; } }
        public static string IsInitiatorProperty { get { throw null; } }
        public static string IsOutOfBandTokenProperty { get { throw null; } }
        public static string IssuedSecurityTokenParametersProperty { get { throw null; } }
        public System.ServiceModel.EndpointAddress IssuerAddress { get { throw null; } set { } }
        public static string IssuerAddressProperty { get { throw null; } }
        public System.ServiceModel.Channels.Binding IssuerBinding { get { throw null; } set { } }
        public static string IssuerBindingContextProperty { get { throw null; } }
        public static string IssuerBindingProperty { get { throw null; } }
        public static string ListenUriProperty { get { throw null; } }
        public static string MessageAuthenticationAuditLevelProperty { get { throw null; } }
        public static string MessageDirectionProperty { get { throw null; } }
        public System.IdentityModel.Selectors.SecurityTokenVersion MessageSecurityVersion { get { throw null; } set { } }
        public static string MessageSecurityVersionProperty { get { throw null; } }
        public static string PreferSslCertificateAuthenticatorProperty { get { throw null; } }
        public static string PrivacyNoticeUriProperty { get { throw null; } }
        public static string PrivacyNoticeVersionProperty { get { throw null; } }
        public System.ServiceModel.Channels.SecurityBindingElement SecureConversationSecurityBindingElement { get { throw null; } set { } }
        public static string SecureConversationSecurityBindingElementProperty { get { throw null; } }
        public System.ServiceModel.Security.SecurityAlgorithmSuite SecurityAlgorithmSuite { get { throw null; } set { } }
        public static string SecurityAlgorithmSuiteProperty { get { throw null; } }
        public System.ServiceModel.Channels.SecurityBindingElement SecurityBindingElement { get { throw null; } set { } }
        public static string SecurityBindingElementProperty { get { throw null; } }
        public static string SupportingTokenAttachmentModeProperty { get { throw null; } }
        public static string SupportSecurityContextCancellationProperty { get { throw null; } }
        public static string SuppressAuditFailureProperty { get { throw null; } }
        public static string TargetAddressProperty { get { throw null; } }
        public string TransportScheme { get { throw null; } set { } }
        public static string TransportSchemeProperty { get { throw null; } }
        public static string ViaProperty { get { throw null; } }
    }
    public static partial class ServiceModelSecurityTokenTypes
    {
        public static string AnonymousSslnego { get { throw null; } }
        public static string MutualSslnego { get { throw null; } }
        public static string SecureConversation { get { throw null; } }
        public static string SecurityContext { get { throw null; } }
        public static string Spnego { get { throw null; } }
        public static string SspiCredential { get { throw null; } }
    }
    public partial class SslSecurityTokenParameters : System.ServiceModel.Security.Tokens.SecurityTokenParameters
    {
        public SslSecurityTokenParameters() { }
        public SslSecurityTokenParameters(bool requireClientCertificate) { }
        public SslSecurityTokenParameters(bool requireClientCertificate, bool requireCancellation) { }
        protected SslSecurityTokenParameters(System.ServiceModel.Security.Tokens.SslSecurityTokenParameters other) { }
        protected internal override bool HasAsymmetricKey { get { throw null; } }
        public bool RequireCancellation { get { throw null; } set { } }
        public bool RequireClientCertificate { get { throw null; } set { } }
        protected internal override bool SupportsClientAuthentication { get { throw null; } }
        protected internal override bool SupportsClientWindowsIdentity { get { throw null; } }
        protected internal override bool SupportsServerAuthentication { get { throw null; } }
        protected override System.ServiceModel.Security.Tokens.SecurityTokenParameters CloneCore() { throw null; }
        protected internal override System.IdentityModel.Tokens.SecurityKeyIdentifierClause CreateKeyIdentifierClause(System.IdentityModel.Tokens.SecurityToken token, System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle referenceStyle) { throw null; }
        protected internal override void InitializeSecurityTokenRequirement(System.IdentityModel.Selectors.SecurityTokenRequirement requirement) { }
        public override string ToString() { throw null; }
    }
    public partial class SspiSecurityToken : System.IdentityModel.Tokens.SecurityToken
    {
        public SspiSecurityToken(System.Net.NetworkCredential networkCredential, bool extractGroupsForWindowsAccounts, bool allowUnauthenticatedCallers) { }
        public SspiSecurityToken(System.Security.Principal.TokenImpersonationLevel impersonationLevel, bool allowNtlm, System.Net.NetworkCredential networkCredential) { }
        public bool AllowNtlm { get { throw null; } }
        public bool AllowUnauthenticatedCallers { get { throw null; } }
        public bool ExtractGroupsForWindowsAccounts { get { throw null; } }
        public override string Id { get { throw null; } }
        public System.Security.Principal.TokenImpersonationLevel ImpersonationLevel { get { throw null; } }
        public System.Net.NetworkCredential NetworkCredential { get { throw null; } }
        public override System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.Tokens.SecurityKey> SecurityKeys { get { throw null; } }
        public override System.DateTime ValidFrom { get { throw null; } }
        public override System.DateTime ValidTo { get { throw null; } }
    }
    public partial class SspiSecurityTokenParameters : System.ServiceModel.Security.Tokens.SecurityTokenParameters
    {
        public SspiSecurityTokenParameters() { }
        public SspiSecurityTokenParameters(bool requireCancellation) { }
        protected SspiSecurityTokenParameters(System.ServiceModel.Security.Tokens.SspiSecurityTokenParameters other) { }
        protected internal override bool HasAsymmetricKey { get { throw null; } }
        public bool RequireCancellation { get { throw null; } set { } }
        protected internal override bool SupportsClientAuthentication { get { throw null; } }
        protected internal override bool SupportsClientWindowsIdentity { get { throw null; } }
        protected internal override bool SupportsServerAuthentication { get { throw null; } }
        protected override System.ServiceModel.Security.Tokens.SecurityTokenParameters CloneCore() { throw null; }
        protected internal override System.IdentityModel.Tokens.SecurityKeyIdentifierClause CreateKeyIdentifierClause(System.IdentityModel.Tokens.SecurityToken token, System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle referenceStyle) { throw null; }
        protected internal override void InitializeSecurityTokenRequirement(System.IdentityModel.Selectors.SecurityTokenRequirement requirement) { }
        public override string ToString() { throw null; }
    }
    public partial class SupportingTokenParameters
    {
        public SupportingTokenParameters() { }
        public System.Collections.ObjectModel.Collection<System.ServiceModel.Security.Tokens.SecurityTokenParameters> Endorsing { get { throw null; } }
        public System.Collections.ObjectModel.Collection<System.ServiceModel.Security.Tokens.SecurityTokenParameters> Signed { get { throw null; } }
        public System.Collections.ObjectModel.Collection<System.ServiceModel.Security.Tokens.SecurityTokenParameters> SignedEncrypted { get { throw null; } }
        public System.Collections.ObjectModel.Collection<System.ServiceModel.Security.Tokens.SecurityTokenParameters> SignedEndorsing { get { throw null; } }
        public System.ServiceModel.Security.Tokens.SupportingTokenParameters Clone() { throw null; }
        protected virtual System.ServiceModel.Security.Tokens.SupportingTokenParameters CloneCore() { throw null; }
        public void SetKeyDerivation(bool requireDerivedKeys) { }
        public override string ToString() { throw null; }
    }
    public partial class UserNameSecurityTokenParameters : System.ServiceModel.Security.Tokens.SecurityTokenParameters
    {
        public UserNameSecurityTokenParameters() { }
        protected UserNameSecurityTokenParameters(System.ServiceModel.Security.Tokens.UserNameSecurityTokenParameters other) { }
        protected internal override bool HasAsymmetricKey { get { throw null; } }
        protected internal override bool SupportsClientAuthentication { get { throw null; } }
        protected internal override bool SupportsClientWindowsIdentity { get { throw null; } }
        protected internal override bool SupportsServerAuthentication { get { throw null; } }
        protected override System.ServiceModel.Security.Tokens.SecurityTokenParameters CloneCore() { throw null; }
        protected internal override System.IdentityModel.Tokens.SecurityKeyIdentifierClause CreateKeyIdentifierClause(System.IdentityModel.Tokens.SecurityToken token, System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle referenceStyle) { throw null; }
        protected internal override void InitializeSecurityTokenRequirement(System.IdentityModel.Selectors.SecurityTokenRequirement requirement) { }
    }
    public enum X509KeyIdentifierClauseType
    {
        Any = 0,
        IssuerSerial = 2,
        RawDataKeyIdentifier = 4,
        SubjectKeyIdentifier = 3,
        Thumbprint = 1,
    }
    public partial class X509SecurityTokenParameters : System.ServiceModel.Security.Tokens.SecurityTokenParameters
    {
        public X509SecurityTokenParameters() { }
        public X509SecurityTokenParameters(System.ServiceModel.Security.Tokens.X509KeyIdentifierClauseType x509ReferenceStyle) { }
        public X509SecurityTokenParameters(System.ServiceModel.Security.Tokens.X509KeyIdentifierClauseType x509ReferenceStyle, System.ServiceModel.Security.Tokens.SecurityTokenInclusionMode inclusionMode) { }
        protected X509SecurityTokenParameters(System.ServiceModel.Security.Tokens.X509SecurityTokenParameters other) { }
        protected internal override bool HasAsymmetricKey { get { throw null; } }
        protected internal override bool SupportsClientAuthentication { get { throw null; } }
        protected internal override bool SupportsClientWindowsIdentity { get { throw null; } }
        protected internal override bool SupportsServerAuthentication { get { throw null; } }
        public System.ServiceModel.Security.Tokens.X509KeyIdentifierClauseType X509ReferenceStyle { get { throw null; } set { } }
        protected override System.ServiceModel.Security.Tokens.SecurityTokenParameters CloneCore() { throw null; }
        protected internal override System.IdentityModel.Tokens.SecurityKeyIdentifierClause CreateKeyIdentifierClause(System.IdentityModel.Tokens.SecurityToken token, System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle referenceStyle) { throw null; }
        protected internal override void InitializeSecurityTokenRequirement(System.IdentityModel.Selectors.SecurityTokenRequirement requirement) { }
        public override string ToString() { throw null; }
    }
}
namespace System.ServiceModel.Syndication
{
    [System.Runtime.CompilerServices.TypeForwardedFromAttribute("System.ServiceModel.Web, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
    [System.Xml.Serialization.XmlRootAttribute(ElementName="feed", Namespace="http://www.w3.org/2005/Atom")]
    public partial class Atom10FeedFormatter : System.ServiceModel.Syndication.SyndicationFeedFormatter, System.Xml.Serialization.IXmlSerializable
    {
        public Atom10FeedFormatter() { }
        public Atom10FeedFormatter(System.ServiceModel.Syndication.SyndicationFeed feedToWrite) { }
        public Atom10FeedFormatter(System.Type feedTypeToCreate) { }
        protected System.Type FeedType { get { throw null; } }
        public bool PreserveAttributeExtensions { get { throw null; } set { } }
        public bool PreserveElementExtensions { get { throw null; } set { } }
        public override string Version { get { throw null; } }
        public override bool CanRead(System.Xml.XmlReader reader) { throw null; }
        protected override System.ServiceModel.Syndication.SyndicationFeed CreateFeedInstance() { throw null; }
        public override void ReadFrom(System.Xml.XmlReader reader) { }
        protected virtual System.ServiceModel.Syndication.SyndicationItem ReadItem(System.Xml.XmlReader reader, System.ServiceModel.Syndication.SyndicationFeed feed) { throw null; }
        protected virtual System.Collections.Generic.IEnumerable<System.ServiceModel.Syndication.SyndicationItem> ReadItems(System.Xml.XmlReader reader, System.ServiceModel.Syndication.SyndicationFeed feed, out bool areAllItemsRead) { throw null; }
        System.Xml.Schema.XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema() { throw null; }
        void System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader reader) { }
        void System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter writer) { }
        protected virtual void WriteItem(System.Xml.XmlWriter writer, System.ServiceModel.Syndication.SyndicationItem item, System.Uri feedBaseUri) { }
        protected virtual void WriteItems(System.Xml.XmlWriter writer, System.Collections.Generic.IEnumerable<System.ServiceModel.Syndication.SyndicationItem> items, System.Uri feedBaseUri) { }
        public override void WriteTo(System.Xml.XmlWriter writer) { }
    }
    [System.Runtime.CompilerServices.TypeForwardedFromAttribute("System.ServiceModel.Web, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
    [System.Xml.Serialization.XmlRootAttribute(ElementName="feed", Namespace="http://www.w3.org/2005/Atom")]
    public partial class Atom10FeedFormatter<TSyndicationFeed> : System.ServiceModel.Syndication.Atom10FeedFormatter where TSyndicationFeed : System.ServiceModel.Syndication.SyndicationFeed, new()
    {
        public Atom10FeedFormatter() { }
        public Atom10FeedFormatter(TSyndicationFeed feedToWrite) { }
        protected override System.ServiceModel.Syndication.SyndicationFeed CreateFeedInstance() { throw null; }
    }
    [System.Runtime.CompilerServices.TypeForwardedFromAttribute("System.ServiceModel.Web, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
    [System.Xml.Serialization.XmlRootAttribute(ElementName="entry", Namespace="http://www.w3.org/2005/Atom")]
    public partial class Atom10ItemFormatter : System.ServiceModel.Syndication.SyndicationItemFormatter, System.Xml.Serialization.IXmlSerializable
    {
        public Atom10ItemFormatter() { }
        public Atom10ItemFormatter(System.ServiceModel.Syndication.SyndicationItem itemToWrite) { }
        public Atom10ItemFormatter(System.Type itemTypeToCreate) { }
        protected System.Type ItemType { get { throw null; } }
        public bool PreserveAttributeExtensions { get { throw null; } set { } }
        public bool PreserveElementExtensions { get { throw null; } set { } }
        public override string Version { get { throw null; } }
        public override bool CanRead(System.Xml.XmlReader reader) { throw null; }
        protected override System.ServiceModel.Syndication.SyndicationItem CreateItemInstance() { throw null; }
        public override void ReadFrom(System.Xml.XmlReader reader) { }
        System.Xml.Schema.XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema() { throw null; }
        void System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader reader) { }
        void System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter writer) { }
        public override void WriteTo(System.Xml.XmlWriter writer) { }
    }
    [System.Runtime.CompilerServices.TypeForwardedFromAttribute("System.ServiceModel.Web, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
    [System.Xml.Serialization.XmlRootAttribute(ElementName="entry", Namespace="http://www.w3.org/2005/Atom")]
    public partial class Atom10ItemFormatter<TSyndicationItem> : System.ServiceModel.Syndication.Atom10ItemFormatter where TSyndicationItem : System.ServiceModel.Syndication.SyndicationItem, new()
    {
        public Atom10ItemFormatter() { }
        public Atom10ItemFormatter(TSyndicationItem itemToWrite) { }
        protected override System.ServiceModel.Syndication.SyndicationItem CreateItemInstance() { throw null; }
    }
    [System.Runtime.CompilerServices.TypeForwardedFromAttribute("System.ServiceModel.Web, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
    [System.Xml.Serialization.XmlRootAttribute(ElementName="categories", Namespace="http://www.w3.org/2007/app")]
    public partial class AtomPub10CategoriesDocumentFormatter : System.ServiceModel.Syndication.CategoriesDocumentFormatter, System.Xml.Serialization.IXmlSerializable
    {
        public AtomPub10CategoriesDocumentFormatter() { }
        public AtomPub10CategoriesDocumentFormatter(System.ServiceModel.Syndication.CategoriesDocument documentToWrite) { }
        public AtomPub10CategoriesDocumentFormatter(System.Type inlineDocumentType, System.Type referencedDocumentType) { }
        public override string Version { get { throw null; } }
        public override bool CanRead(System.Xml.XmlReader reader) { throw null; }
        protected override System.ServiceModel.Syndication.InlineCategoriesDocument CreateInlineCategoriesDocument() { throw null; }
        protected override System.ServiceModel.Syndication.ReferencedCategoriesDocument CreateReferencedCategoriesDocument() { throw null; }
        public override void ReadFrom(System.Xml.XmlReader reader) { }
        System.Xml.Schema.XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema() { throw null; }
        void System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader reader) { }
        void System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter writer) { }
        public override void WriteTo(System.Xml.XmlWriter writer) { }
    }
    [System.Runtime.CompilerServices.TypeForwardedFromAttribute("System.ServiceModel.Web, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
    [System.Xml.Serialization.XmlRootAttribute(ElementName="service", Namespace="http://www.w3.org/2007/app")]
    public partial class AtomPub10ServiceDocumentFormatter : System.ServiceModel.Syndication.ServiceDocumentFormatter, System.Xml.Serialization.IXmlSerializable
    {
        public AtomPub10ServiceDocumentFormatter() { }
        public AtomPub10ServiceDocumentFormatter(System.ServiceModel.Syndication.ServiceDocument documentToWrite) { }
        public AtomPub10ServiceDocumentFormatter(System.Type documentTypeToCreate) { }
        public override string Version { get { throw null; } }
        public override bool CanRead(System.Xml.XmlReader reader) { throw null; }
        protected override System.ServiceModel.Syndication.ServiceDocument CreateDocumentInstance() { throw null; }
        public override void ReadFrom(System.Xml.XmlReader reader) { }
        System.Xml.Schema.XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema() { throw null; }
        void System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader reader) { }
        void System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter writer) { }
        public override void WriteTo(System.Xml.XmlWriter writer) { }
    }
    [System.Runtime.CompilerServices.TypeForwardedFromAttribute("System.ServiceModel.Web, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
    [System.Xml.Serialization.XmlRootAttribute(ElementName="service", Namespace="http://www.w3.org/2007/app")]
    public partial class AtomPub10ServiceDocumentFormatter<TServiceDocument> : System.ServiceModel.Syndication.AtomPub10ServiceDocumentFormatter where TServiceDocument : System.ServiceModel.Syndication.ServiceDocument, new()
    {
        public AtomPub10ServiceDocumentFormatter() { }
        public AtomPub10ServiceDocumentFormatter(TServiceDocument documentToWrite) { }
        protected override System.ServiceModel.Syndication.ServiceDocument CreateDocumentInstance() { throw null; }
    }
    [System.Runtime.CompilerServices.TypeForwardedFromAttribute("System.ServiceModel.Web, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
    public abstract partial class CategoriesDocument
    {
        internal CategoriesDocument() { }
        public System.Collections.Generic.Dictionary<System.Xml.XmlQualifiedName, string> AttributeExtensions { get { throw null; } }
        public System.Uri BaseUri { get { throw null; } set { } }
        public System.ServiceModel.Syndication.SyndicationElementExtensionCollection ElementExtensions { get { throw null; } }
        public string Language { get { throw null; } set { } }
        public static System.ServiceModel.Syndication.InlineCategoriesDocument Create(System.Collections.ObjectModel.Collection<System.ServiceModel.Syndication.SyndicationCategory> categories) { throw null; }
        public static System.ServiceModel.Syndication.InlineCategoriesDocument Create(System.Collections.ObjectModel.Collection<System.ServiceModel.Syndication.SyndicationCategory> categories, bool isFixed, string scheme) { throw null; }
        public static System.ServiceModel.Syndication.ReferencedCategoriesDocument Create(System.Uri linkToCategoriesDocument) { throw null; }
        public System.ServiceModel.Syndication.CategoriesDocumentFormatter GetFormatter() { throw null; }
        public static System.ServiceModel.Syndication.CategoriesDocument Load(System.Xml.XmlReader reader) { throw null; }
        public void Save(System.Xml.XmlWriter writer) { }
        protected internal virtual bool TryParseAttribute(string name, string ns, string value, string version) { throw null; }
        protected internal virtual bool TryParseElement(System.Xml.XmlReader reader, string version) { throw null; }
        protected internal virtual void WriteAttributeExtensions(System.Xml.XmlWriter writer, string version) { }
        protected internal virtual void WriteElementExtensions(System.Xml.XmlWriter writer, string version) { }
    }
    [System.Runtime.CompilerServices.TypeForwardedFromAttribute("System.ServiceModel.Web, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
    [System.Runtime.Serialization.DataContractAttribute]
    public abstract partial class CategoriesDocumentFormatter
    {
        protected CategoriesDocumentFormatter() { }
        protected CategoriesDocumentFormatter(System.ServiceModel.Syndication.CategoriesDocument documentToWrite) { }
        public System.ServiceModel.Syndication.CategoriesDocument Document { get { throw null; } }
        public abstract string Version { get; }
        public abstract bool CanRead(System.Xml.XmlReader reader);
        protected virtual System.ServiceModel.Syndication.InlineCategoriesDocument CreateInlineCategoriesDocument() { throw null; }
        protected virtual System.ServiceModel.Syndication.ReferencedCategoriesDocument CreateReferencedCategoriesDocument() { throw null; }
        public abstract void ReadFrom(System.Xml.XmlReader reader);
        protected virtual void SetDocument(System.ServiceModel.Syndication.CategoriesDocument document) { }
        public abstract void WriteTo(System.Xml.XmlWriter writer);
    }
    [System.Runtime.CompilerServices.TypeForwardedFromAttribute("System.ServiceModel.Web, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
    public partial class InlineCategoriesDocument : System.ServiceModel.Syndication.CategoriesDocument
    {
        public InlineCategoriesDocument() { }
        public InlineCategoriesDocument(System.Collections.Generic.IEnumerable<System.ServiceModel.Syndication.SyndicationCategory> categories) { }
        public InlineCategoriesDocument(System.Collections.Generic.IEnumerable<System.ServiceModel.Syndication.SyndicationCategory> categories, bool isFixed, string scheme) { }
        public System.Collections.ObjectModel.Collection<System.ServiceModel.Syndication.SyndicationCategory> Categories { get { throw null; } }
        public bool IsFixed { get { throw null; } set { } }
        public string Scheme { get { throw null; } set { } }
        protected internal virtual System.ServiceModel.Syndication.SyndicationCategory CreateCategory() { throw null; }
    }
    [System.Runtime.CompilerServices.TypeForwardedFromAttribute("System.ServiceModel.Web, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
    public partial class ReferencedCategoriesDocument : System.ServiceModel.Syndication.CategoriesDocument
    {
        public ReferencedCategoriesDocument() { }
        public ReferencedCategoriesDocument(System.Uri link) { }
        public System.Uri Link { get { throw null; } set { } }
    }
    [System.Runtime.CompilerServices.TypeForwardedFromAttribute("System.ServiceModel.Web, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
    public partial class ResourceCollectionInfo
    {
        public ResourceCollectionInfo() { }
        public ResourceCollectionInfo(System.ServiceModel.Syndication.TextSyndicationContent title, System.Uri link) { }
        public ResourceCollectionInfo(System.ServiceModel.Syndication.TextSyndicationContent title, System.Uri link, System.Collections.Generic.IEnumerable<System.ServiceModel.Syndication.CategoriesDocument> categories, bool allowsNewEntries) { }
        public ResourceCollectionInfo(System.ServiceModel.Syndication.TextSyndicationContent title, System.Uri link, System.Collections.Generic.IEnumerable<System.ServiceModel.Syndication.CategoriesDocument> categories, System.Collections.Generic.IEnumerable<string> accepts) { }
        public ResourceCollectionInfo(string title, System.Uri link) { }
        public System.Collections.ObjectModel.Collection<string> Accepts { get { throw null; } }
        public System.Collections.Generic.Dictionary<System.Xml.XmlQualifiedName, string> AttributeExtensions { get { throw null; } }
        public System.Uri BaseUri { get { throw null; } set { } }
        public System.Collections.ObjectModel.Collection<System.ServiceModel.Syndication.CategoriesDocument> Categories { get { throw null; } }
        public System.ServiceModel.Syndication.SyndicationElementExtensionCollection ElementExtensions { get { throw null; } }
        public System.Uri Link { get { throw null; } set { } }
        public System.ServiceModel.Syndication.TextSyndicationContent Title { get { throw null; } set { } }
        protected internal virtual System.ServiceModel.Syndication.InlineCategoriesDocument CreateInlineCategoriesDocument() { throw null; }
        protected internal virtual System.ServiceModel.Syndication.ReferencedCategoriesDocument CreateReferencedCategoriesDocument() { throw null; }
        protected internal virtual bool TryParseAttribute(string name, string ns, string value, string version) { throw null; }
        protected internal virtual bool TryParseElement(System.Xml.XmlReader reader, string version) { throw null; }
        protected internal virtual void WriteAttributeExtensions(System.Xml.XmlWriter writer, string version) { }
        protected internal virtual void WriteElementExtensions(System.Xml.XmlWriter writer, string version) { }
    }
    [System.Runtime.CompilerServices.TypeForwardedFromAttribute("System.ServiceModel.Web, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
    [System.Xml.Serialization.XmlRootAttribute(ElementName="rss", Namespace="")]
    public partial class Rss20FeedFormatter : System.ServiceModel.Syndication.SyndicationFeedFormatter, System.Xml.Serialization.IXmlSerializable
    {
        public Rss20FeedFormatter() { }
        public Rss20FeedFormatter(System.ServiceModel.Syndication.SyndicationFeed feedToWrite) { }
        public Rss20FeedFormatter(System.ServiceModel.Syndication.SyndicationFeed feedToWrite, bool serializeExtensionsAsAtom) { }
        public Rss20FeedFormatter(System.Type feedTypeToCreate) { }
        protected System.Type FeedType { get { throw null; } }
        public bool PreserveAttributeExtensions { get { throw null; } set { } }
        public bool PreserveElementExtensions { get { throw null; } set { } }
        public bool SerializeExtensionsAsAtom { get { throw null; } set { } }
        public override string Version { get { throw null; } }
        public override bool CanRead(System.Xml.XmlReader reader) { throw null; }
        protected override System.ServiceModel.Syndication.SyndicationFeed CreateFeedInstance() { throw null; }
        public override void ReadFrom(System.Xml.XmlReader reader) { }
        protected virtual System.ServiceModel.Syndication.SyndicationItem ReadItem(System.Xml.XmlReader reader, System.ServiceModel.Syndication.SyndicationFeed feed) { throw null; }
        protected virtual System.Collections.Generic.IEnumerable<System.ServiceModel.Syndication.SyndicationItem> ReadItems(System.Xml.XmlReader reader, System.ServiceModel.Syndication.SyndicationFeed feed, out bool areAllItemsRead) { throw null; }
        protected internal override void SetFeed(System.ServiceModel.Syndication.SyndicationFeed feed) { }
        System.Xml.Schema.XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema() { throw null; }
        void System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader reader) { }
        void System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter writer) { }
        protected virtual void WriteItem(System.Xml.XmlWriter writer, System.ServiceModel.Syndication.SyndicationItem item, System.Uri feedBaseUri) { }
        protected virtual void WriteItems(System.Xml.XmlWriter writer, System.Collections.Generic.IEnumerable<System.ServiceModel.Syndication.SyndicationItem> items, System.Uri feedBaseUri) { }
        public override void WriteTo(System.Xml.XmlWriter writer) { }
    }
    [System.Runtime.CompilerServices.TypeForwardedFromAttribute("System.ServiceModel.Web, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
    [System.Xml.Serialization.XmlRootAttribute(ElementName="rss", Namespace="")]
    public partial class Rss20FeedFormatter<TSyndicationFeed> : System.ServiceModel.Syndication.Rss20FeedFormatter where TSyndicationFeed : System.ServiceModel.Syndication.SyndicationFeed, new()
    {
        public Rss20FeedFormatter() { }
        public Rss20FeedFormatter(TSyndicationFeed feedToWrite) { }
        public Rss20FeedFormatter(TSyndicationFeed feedToWrite, bool serializeExtensionsAsAtom) { }
        protected override System.ServiceModel.Syndication.SyndicationFeed CreateFeedInstance() { throw null; }
    }
    [System.Runtime.CompilerServices.TypeForwardedFromAttribute("System.ServiceModel.Web, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
    [System.Xml.Serialization.XmlRootAttribute(ElementName="item", Namespace="")]
    public partial class Rss20ItemFormatter : System.ServiceModel.Syndication.SyndicationItemFormatter, System.Xml.Serialization.IXmlSerializable
    {
        public Rss20ItemFormatter() { }
        public Rss20ItemFormatter(System.ServiceModel.Syndication.SyndicationItem itemToWrite) { }
        public Rss20ItemFormatter(System.ServiceModel.Syndication.SyndicationItem itemToWrite, bool serializeExtensionsAsAtom) { }
        public Rss20ItemFormatter(System.Type itemTypeToCreate) { }
        protected System.Type ItemType { get { throw null; } }
        public bool PreserveAttributeExtensions { get { throw null; } set { } }
        public bool PreserveElementExtensions { get { throw null; } set { } }
        public bool SerializeExtensionsAsAtom { get { throw null; } set { } }
        public override string Version { get { throw null; } }
        public override bool CanRead(System.Xml.XmlReader reader) { throw null; }
        protected override System.ServiceModel.Syndication.SyndicationItem CreateItemInstance() { throw null; }
        public override void ReadFrom(System.Xml.XmlReader reader) { }
        System.Xml.Schema.XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema() { throw null; }
        void System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader reader) { }
        void System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter writer) { }
        public override void WriteTo(System.Xml.XmlWriter writer) { }
    }
    [System.Runtime.CompilerServices.TypeForwardedFromAttribute("System.ServiceModel.Web, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
    [System.Xml.Serialization.XmlRootAttribute(ElementName="item", Namespace="")]
    public partial class Rss20ItemFormatter<TSyndicationItem> : System.ServiceModel.Syndication.Rss20ItemFormatter, System.Xml.Serialization.IXmlSerializable where TSyndicationItem : System.ServiceModel.Syndication.SyndicationItem, new()
    {
        public Rss20ItemFormatter() { }
        public Rss20ItemFormatter(TSyndicationItem itemToWrite) { }
        public Rss20ItemFormatter(TSyndicationItem itemToWrite, bool serializeExtensionsAsAtom) { }
        protected override System.ServiceModel.Syndication.SyndicationItem CreateItemInstance() { throw null; }
    }
    [System.Runtime.CompilerServices.TypeForwardedFromAttribute("System.ServiceModel.Web, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
    public partial class ServiceDocument
    {
        public ServiceDocument() { }
        public ServiceDocument(System.Collections.Generic.IEnumerable<System.ServiceModel.Syndication.Workspace> workspaces) { }
        public System.Collections.Generic.Dictionary<System.Xml.XmlQualifiedName, string> AttributeExtensions { get { throw null; } }
        public System.Uri BaseUri { get { throw null; } set { } }
        public System.ServiceModel.Syndication.SyndicationElementExtensionCollection ElementExtensions { get { throw null; } }
        public string Language { get { throw null; } set { } }
        public System.Collections.ObjectModel.Collection<System.ServiceModel.Syndication.Workspace> Workspaces { get { throw null; } }
        protected internal virtual System.ServiceModel.Syndication.Workspace CreateWorkspace() { throw null; }
        public System.ServiceModel.Syndication.ServiceDocumentFormatter GetFormatter() { throw null; }
        public static System.ServiceModel.Syndication.ServiceDocument Load(System.Xml.XmlReader reader) { throw null; }
        public static TServiceDocument Load<TServiceDocument>(System.Xml.XmlReader reader) where TServiceDocument : System.ServiceModel.Syndication.ServiceDocument, new() { throw null; }
        public void Save(System.Xml.XmlWriter writer) { }
        protected internal virtual bool TryParseAttribute(string name, string ns, string value, string version) { throw null; }
        protected internal virtual bool TryParseElement(System.Xml.XmlReader reader, string version) { throw null; }
        protected internal virtual void WriteAttributeExtensions(System.Xml.XmlWriter writer, string version) { }
        protected internal virtual void WriteElementExtensions(System.Xml.XmlWriter writer, string version) { }
    }
    [System.Runtime.CompilerServices.TypeForwardedFromAttribute("System.ServiceModel.Web, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
    [System.Runtime.Serialization.DataContractAttribute]
    public abstract partial class ServiceDocumentFormatter
    {
        protected ServiceDocumentFormatter() { }
        protected ServiceDocumentFormatter(System.ServiceModel.Syndication.ServiceDocument documentToWrite) { }
        public System.ServiceModel.Syndication.ServiceDocument Document { get { throw null; } }
        public abstract string Version { get; }
        public abstract bool CanRead(System.Xml.XmlReader reader);
        protected static System.ServiceModel.Syndication.SyndicationCategory CreateCategory(System.ServiceModel.Syndication.InlineCategoriesDocument inlineCategories) { throw null; }
        protected static System.ServiceModel.Syndication.ResourceCollectionInfo CreateCollection(System.ServiceModel.Syndication.Workspace workspace) { throw null; }
        protected virtual System.ServiceModel.Syndication.ServiceDocument CreateDocumentInstance() { throw null; }
        protected static System.ServiceModel.Syndication.InlineCategoriesDocument CreateInlineCategories(System.ServiceModel.Syndication.ResourceCollectionInfo collection) { throw null; }
        protected static System.ServiceModel.Syndication.ReferencedCategoriesDocument CreateReferencedCategories(System.ServiceModel.Syndication.ResourceCollectionInfo collection) { throw null; }
        protected static System.ServiceModel.Syndication.Workspace CreateWorkspace(System.ServiceModel.Syndication.ServiceDocument document) { throw null; }
        protected static void LoadElementExtensions(System.Xml.XmlReader reader, System.ServiceModel.Syndication.CategoriesDocument categories, int maxExtensionSize) { }
        protected static void LoadElementExtensions(System.Xml.XmlReader reader, System.ServiceModel.Syndication.ResourceCollectionInfo collection, int maxExtensionSize) { }
        protected static void LoadElementExtensions(System.Xml.XmlReader reader, System.ServiceModel.Syndication.ServiceDocument document, int maxExtensionSize) { }
        protected static void LoadElementExtensions(System.Xml.XmlReader reader, System.ServiceModel.Syndication.Workspace workspace, int maxExtensionSize) { }
        public abstract void ReadFrom(System.Xml.XmlReader reader);
        protected virtual void SetDocument(System.ServiceModel.Syndication.ServiceDocument document) { }
        protected static bool TryParseAttribute(string name, string ns, string value, System.ServiceModel.Syndication.CategoriesDocument categories, string version) { throw null; }
        protected static bool TryParseAttribute(string name, string ns, string value, System.ServiceModel.Syndication.ResourceCollectionInfo collection, string version) { throw null; }
        protected static bool TryParseAttribute(string name, string ns, string value, System.ServiceModel.Syndication.ServiceDocument document, string version) { throw null; }
        protected static bool TryParseAttribute(string name, string ns, string value, System.ServiceModel.Syndication.Workspace workspace, string version) { throw null; }
        protected static bool TryParseElement(System.Xml.XmlReader reader, System.ServiceModel.Syndication.CategoriesDocument categories, string version) { throw null; }
        protected static bool TryParseElement(System.Xml.XmlReader reader, System.ServiceModel.Syndication.ResourceCollectionInfo collection, string version) { throw null; }
        protected static bool TryParseElement(System.Xml.XmlReader reader, System.ServiceModel.Syndication.ServiceDocument document, string version) { throw null; }
        protected static bool TryParseElement(System.Xml.XmlReader reader, System.ServiceModel.Syndication.Workspace workspace, string version) { throw null; }
        protected static void WriteAttributeExtensions(System.Xml.XmlWriter writer, System.ServiceModel.Syndication.CategoriesDocument categories, string version) { }
        protected static void WriteAttributeExtensions(System.Xml.XmlWriter writer, System.ServiceModel.Syndication.ResourceCollectionInfo collection, string version) { }
        protected static void WriteAttributeExtensions(System.Xml.XmlWriter writer, System.ServiceModel.Syndication.ServiceDocument document, string version) { }
        protected static void WriteAttributeExtensions(System.Xml.XmlWriter writer, System.ServiceModel.Syndication.Workspace workspace, string version) { }
        protected static void WriteElementExtensions(System.Xml.XmlWriter writer, System.ServiceModel.Syndication.CategoriesDocument categories, string version) { }
        protected static void WriteElementExtensions(System.Xml.XmlWriter writer, System.ServiceModel.Syndication.ResourceCollectionInfo collection, string version) { }
        protected static void WriteElementExtensions(System.Xml.XmlWriter writer, System.ServiceModel.Syndication.ServiceDocument document, string version) { }
        protected static void WriteElementExtensions(System.Xml.XmlWriter writer, System.ServiceModel.Syndication.Workspace workspace, string version) { }
        public abstract void WriteTo(System.Xml.XmlWriter writer);
    }
    [System.Runtime.CompilerServices.TypeForwardedFromAttribute("System.ServiceModel.Web, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
    public partial class SyndicationCategory
    {
        public SyndicationCategory() { }
        protected SyndicationCategory(System.ServiceModel.Syndication.SyndicationCategory source) { }
        public SyndicationCategory(string name) { }
        public SyndicationCategory(string name, string scheme, string label) { }
        public System.Collections.Generic.Dictionary<System.Xml.XmlQualifiedName, string> AttributeExtensions { get { throw null; } }
        public System.ServiceModel.Syndication.SyndicationElementExtensionCollection ElementExtensions { get { throw null; } }
        public string Label { get { throw null; } set { } }
        public string Name { get { throw null; } set { } }
        public string Scheme { get { throw null; } set { } }
        public virtual System.ServiceModel.Syndication.SyndicationCategory Clone() { throw null; }
        protected internal virtual bool TryParseAttribute(string name, string ns, string value, string version) { throw null; }
        protected internal virtual bool TryParseElement(System.Xml.XmlReader reader, string version) { throw null; }
        protected internal virtual void WriteAttributeExtensions(System.Xml.XmlWriter writer, string version) { }
        protected internal virtual void WriteElementExtensions(System.Xml.XmlWriter writer, string version) { }
    }
    [System.Runtime.CompilerServices.TypeForwardedFromAttribute("System.ServiceModel.Web, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
    public abstract partial class SyndicationContent
    {
        protected SyndicationContent() { }
        protected SyndicationContent(System.ServiceModel.Syndication.SyndicationContent source) { }
        public System.Collections.Generic.Dictionary<System.Xml.XmlQualifiedName, string> AttributeExtensions { get { throw null; } }
        public abstract string Type { get; }
        public abstract System.ServiceModel.Syndication.SyndicationContent Clone();
        public static System.ServiceModel.Syndication.TextSyndicationContent CreateHtmlContent(string content) { throw null; }
        public static System.ServiceModel.Syndication.TextSyndicationContent CreatePlaintextContent(string content) { throw null; }
        public static System.ServiceModel.Syndication.UrlSyndicationContent CreateUrlContent(System.Uri url, string mediaType) { throw null; }
        public static System.ServiceModel.Syndication.TextSyndicationContent CreateXhtmlContent(string content) { throw null; }
        public static System.ServiceModel.Syndication.XmlSyndicationContent CreateXmlContent(object dataContractObject) { throw null; }
        public static System.ServiceModel.Syndication.XmlSyndicationContent CreateXmlContent(object dataContractObject, System.Runtime.Serialization.XmlObjectSerializer dataContractSerializer) { throw null; }
        public static System.ServiceModel.Syndication.XmlSyndicationContent CreateXmlContent(object xmlSerializerObject, System.Xml.Serialization.XmlSerializer serializer) { throw null; }
        public static System.ServiceModel.Syndication.XmlSyndicationContent CreateXmlContent(System.Xml.XmlReader xmlReader) { throw null; }
        protected abstract void WriteContentsTo(System.Xml.XmlWriter writer);
        public void WriteTo(System.Xml.XmlWriter writer, string outerElementName, string outerElementNamespace) { }
    }
    [System.Runtime.CompilerServices.TypeForwardedFromAttribute("System.ServiceModel.Web, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
    public partial class SyndicationElementExtension
    {
        public SyndicationElementExtension(object dataContractExtension) { }
        public SyndicationElementExtension(object dataContractExtension, System.Runtime.Serialization.XmlObjectSerializer dataContractSerializer) { }
        public SyndicationElementExtension(object xmlSerializerExtension, System.Xml.Serialization.XmlSerializer serializer) { }
        public SyndicationElementExtension(string outerName, string outerNamespace, object dataContractExtension) { }
        public SyndicationElementExtension(string outerName, string outerNamespace, object dataContractExtension, System.Runtime.Serialization.XmlObjectSerializer dataContractSerializer) { }
        public SyndicationElementExtension(System.Xml.XmlReader xmlReader) { }
        public string OuterName { get { throw null; } }
        public string OuterNamespace { get { throw null; } }
        public TExtension GetObject<TExtension>() { throw null; }
        public TExtension GetObject<TExtension>(System.Runtime.Serialization.XmlObjectSerializer serializer) { throw null; }
        public TExtension GetObject<TExtension>(System.Xml.Serialization.XmlSerializer serializer) { throw null; }
        public System.Xml.XmlReader GetReader() { throw null; }
        public void WriteTo(System.Xml.XmlWriter writer) { }
    }
    [System.Runtime.CompilerServices.TypeForwardedFromAttribute("System.ServiceModel.Web, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
    public sealed partial class SyndicationElementExtensionCollection : System.Collections.ObjectModel.Collection<System.ServiceModel.Syndication.SyndicationElementExtension>
    {
        internal SyndicationElementExtensionCollection() { }
        public void Add(object extension) { }
        public void Add(object dataContractExtension, System.Runtime.Serialization.DataContractSerializer serializer) { }
        public void Add(object xmlSerializerExtension, System.Xml.Serialization.XmlSerializer serializer) { }
        public void Add(string outerName, string outerNamespace, object dataContractExtension) { }
        public void Add(string outerName, string outerNamespace, object dataContractExtension, System.Runtime.Serialization.XmlObjectSerializer dataContractSerializer) { }
        public void Add(System.Xml.XmlReader xmlReader) { }
        protected override void ClearItems() { }
        public System.Xml.XmlReader GetReaderAtElementExtensions() { throw null; }
        protected override void InsertItem(int index, System.ServiceModel.Syndication.SyndicationElementExtension item) { }
        public System.Collections.ObjectModel.Collection<TExtension> ReadElementExtensions<TExtension>(string extensionName, string extensionNamespace) { throw null; }
        public System.Collections.ObjectModel.Collection<TExtension> ReadElementExtensions<TExtension>(string extensionName, string extensionNamespace, System.Runtime.Serialization.XmlObjectSerializer serializer) { throw null; }
        public System.Collections.ObjectModel.Collection<TExtension> ReadElementExtensions<TExtension>(string extensionName, string extensionNamespace, System.Xml.Serialization.XmlSerializer serializer) { throw null; }
        protected override void RemoveItem(int index) { }
        protected override void SetItem(int index, System.ServiceModel.Syndication.SyndicationElementExtension item) { }
    }
    [System.Runtime.CompilerServices.TypeForwardedFromAttribute("System.ServiceModel.Web, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
    public partial class SyndicationFeed
    {
        public SyndicationFeed() { }
        public SyndicationFeed(System.Collections.Generic.IEnumerable<System.ServiceModel.Syndication.SyndicationItem> items) { }
        protected SyndicationFeed(System.ServiceModel.Syndication.SyndicationFeed source, bool cloneItems) { }
        public SyndicationFeed(string title, string description, System.Uri feedAlternateLink) { }
        public SyndicationFeed(string title, string description, System.Uri feedAlternateLink, System.Collections.Generic.IEnumerable<System.ServiceModel.Syndication.SyndicationItem> items) { }
        public SyndicationFeed(string title, string description, System.Uri feedAlternateLink, string id, System.DateTimeOffset lastUpdatedTime) { }
        public SyndicationFeed(string title, string description, System.Uri feedAlternateLink, string id, System.DateTimeOffset lastUpdatedTime, System.Collections.Generic.IEnumerable<System.ServiceModel.Syndication.SyndicationItem> items) { }
        public System.Collections.Generic.Dictionary<System.Xml.XmlQualifiedName, string> AttributeExtensions { get { throw null; } }
        public System.Collections.ObjectModel.Collection<System.ServiceModel.Syndication.SyndicationPerson> Authors { get { throw null; } }
        public System.Uri BaseUri { get { throw null; } set { } }
        public System.Collections.ObjectModel.Collection<System.ServiceModel.Syndication.SyndicationCategory> Categories { get { throw null; } }
        public System.Collections.ObjectModel.Collection<System.ServiceModel.Syndication.SyndicationPerson> Contributors { get { throw null; } }
        public System.ServiceModel.Syndication.TextSyndicationContent Copyright { get { throw null; } set { } }
        public System.ServiceModel.Syndication.TextSyndicationContent Description { get { throw null; } set { } }
        public System.ServiceModel.Syndication.SyndicationElementExtensionCollection ElementExtensions { get { throw null; } }
        public string Generator { get { throw null; } set { } }
        public string Id { get { throw null; } set { } }
        public System.Uri ImageUrl { get { throw null; } set { } }
        public System.Collections.Generic.IEnumerable<System.ServiceModel.Syndication.SyndicationItem> Items { get { throw null; } set { } }
        public string Language { get { throw null; } set { } }
        public System.DateTimeOffset LastUpdatedTime { get { throw null; } set { } }
        public System.Collections.ObjectModel.Collection<System.ServiceModel.Syndication.SyndicationLink> Links { get { throw null; } }
        public System.ServiceModel.Syndication.TextSyndicationContent Title { get { throw null; } set { } }
        public virtual System.ServiceModel.Syndication.SyndicationFeed Clone(bool cloneItems) { throw null; }
        protected internal virtual System.ServiceModel.Syndication.SyndicationCategory CreateCategory() { throw null; }
        protected internal virtual System.ServiceModel.Syndication.SyndicationItem CreateItem() { throw null; }
        protected internal virtual System.ServiceModel.Syndication.SyndicationLink CreateLink() { throw null; }
        protected internal virtual System.ServiceModel.Syndication.SyndicationPerson CreatePerson() { throw null; }
        public System.ServiceModel.Syndication.Atom10FeedFormatter GetAtom10Formatter() { throw null; }
        public System.ServiceModel.Syndication.Rss20FeedFormatter GetRss20Formatter() { throw null; }
        public System.ServiceModel.Syndication.Rss20FeedFormatter GetRss20Formatter(bool serializeExtensionsAsAtom) { throw null; }
        public static System.ServiceModel.Syndication.SyndicationFeed Load(System.Xml.XmlReader reader) { throw null; }
        public static TSyndicationFeed Load<TSyndicationFeed>(System.Xml.XmlReader reader) where TSyndicationFeed : System.ServiceModel.Syndication.SyndicationFeed, new() { throw null; }
        public void SaveAsAtom10(System.Xml.XmlWriter writer) { }
        public void SaveAsRss20(System.Xml.XmlWriter writer) { }
        protected internal virtual bool TryParseAttribute(string name, string ns, string value, string version) { throw null; }
        protected internal virtual bool TryParseElement(System.Xml.XmlReader reader, string version) { throw null; }
        protected internal virtual void WriteAttributeExtensions(System.Xml.XmlWriter writer, string version) { }
        protected internal virtual void WriteElementExtensions(System.Xml.XmlWriter writer, string version) { }
    }
    [System.Runtime.CompilerServices.TypeForwardedFromAttribute("System.ServiceModel.Web, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
    [System.Runtime.Serialization.DataContractAttribute]
    public abstract partial class SyndicationFeedFormatter
    {
        protected SyndicationFeedFormatter() { }
        protected SyndicationFeedFormatter(System.ServiceModel.Syndication.SyndicationFeed feedToWrite) { }
        public System.ServiceModel.Syndication.SyndicationFeed Feed { get { throw null; } }
        public abstract string Version { get; }
        public abstract bool CanRead(System.Xml.XmlReader reader);
        protected internal static System.ServiceModel.Syndication.SyndicationCategory CreateCategory(System.ServiceModel.Syndication.SyndicationFeed feed) { throw null; }
        protected internal static System.ServiceModel.Syndication.SyndicationCategory CreateCategory(System.ServiceModel.Syndication.SyndicationItem item) { throw null; }
        protected abstract System.ServiceModel.Syndication.SyndicationFeed CreateFeedInstance();
        protected internal static System.ServiceModel.Syndication.SyndicationItem CreateItem(System.ServiceModel.Syndication.SyndicationFeed feed) { throw null; }
        protected internal static System.ServiceModel.Syndication.SyndicationLink CreateLink(System.ServiceModel.Syndication.SyndicationFeed feed) { throw null; }
        protected internal static System.ServiceModel.Syndication.SyndicationLink CreateLink(System.ServiceModel.Syndication.SyndicationItem item) { throw null; }
        protected internal static System.ServiceModel.Syndication.SyndicationPerson CreatePerson(System.ServiceModel.Syndication.SyndicationFeed feed) { throw null; }
        protected internal static System.ServiceModel.Syndication.SyndicationPerson CreatePerson(System.ServiceModel.Syndication.SyndicationItem item) { throw null; }
        protected internal static void LoadElementExtensions(System.Xml.XmlReader reader, System.ServiceModel.Syndication.SyndicationCategory category, int maxExtensionSize) { }
        protected internal static void LoadElementExtensions(System.Xml.XmlReader reader, System.ServiceModel.Syndication.SyndicationFeed feed, int maxExtensionSize) { }
        protected internal static void LoadElementExtensions(System.Xml.XmlReader reader, System.ServiceModel.Syndication.SyndicationItem item, int maxExtensionSize) { }
        protected internal static void LoadElementExtensions(System.Xml.XmlReader reader, System.ServiceModel.Syndication.SyndicationLink link, int maxExtensionSize) { }
        protected internal static void LoadElementExtensions(System.Xml.XmlReader reader, System.ServiceModel.Syndication.SyndicationPerson person, int maxExtensionSize) { }
        public abstract void ReadFrom(System.Xml.XmlReader reader);
        protected internal virtual void SetFeed(System.ServiceModel.Syndication.SyndicationFeed feed) { }
        public override string ToString() { throw null; }
        protected internal static bool TryParseAttribute(string name, string ns, string value, System.ServiceModel.Syndication.SyndicationCategory category, string version) { throw null; }
        protected internal static bool TryParseAttribute(string name, string ns, string value, System.ServiceModel.Syndication.SyndicationFeed feed, string version) { throw null; }
        protected internal static bool TryParseAttribute(string name, string ns, string value, System.ServiceModel.Syndication.SyndicationItem item, string version) { throw null; }
        protected internal static bool TryParseAttribute(string name, string ns, string value, System.ServiceModel.Syndication.SyndicationLink link, string version) { throw null; }
        protected internal static bool TryParseAttribute(string name, string ns, string value, System.ServiceModel.Syndication.SyndicationPerson person, string version) { throw null; }
        protected internal static bool TryParseContent(System.Xml.XmlReader reader, System.ServiceModel.Syndication.SyndicationItem item, string contentType, string version, out System.ServiceModel.Syndication.SyndicationContent content) { throw null; }
        protected internal static bool TryParseElement(System.Xml.XmlReader reader, System.ServiceModel.Syndication.SyndicationCategory category, string version) { throw null; }
        protected internal static bool TryParseElement(System.Xml.XmlReader reader, System.ServiceModel.Syndication.SyndicationFeed feed, string version) { throw null; }
        protected internal static bool TryParseElement(System.Xml.XmlReader reader, System.ServiceModel.Syndication.SyndicationItem item, string version) { throw null; }
        protected internal static bool TryParseElement(System.Xml.XmlReader reader, System.ServiceModel.Syndication.SyndicationLink link, string version) { throw null; }
        protected internal static bool TryParseElement(System.Xml.XmlReader reader, System.ServiceModel.Syndication.SyndicationPerson person, string version) { throw null; }
        protected internal static void WriteAttributeExtensions(System.Xml.XmlWriter writer, System.ServiceModel.Syndication.SyndicationCategory category, string version) { }
        protected internal static void WriteAttributeExtensions(System.Xml.XmlWriter writer, System.ServiceModel.Syndication.SyndicationFeed feed, string version) { }
        protected internal static void WriteAttributeExtensions(System.Xml.XmlWriter writer, System.ServiceModel.Syndication.SyndicationItem item, string version) { }
        protected internal static void WriteAttributeExtensions(System.Xml.XmlWriter writer, System.ServiceModel.Syndication.SyndicationLink link, string version) { }
        protected internal static void WriteAttributeExtensions(System.Xml.XmlWriter writer, System.ServiceModel.Syndication.SyndicationPerson person, string version) { }
        protected internal static void WriteElementExtensions(System.Xml.XmlWriter writer, System.ServiceModel.Syndication.SyndicationCategory category, string version) { }
        protected internal static void WriteElementExtensions(System.Xml.XmlWriter writer, System.ServiceModel.Syndication.SyndicationFeed feed, string version) { }
        protected internal static void WriteElementExtensions(System.Xml.XmlWriter writer, System.ServiceModel.Syndication.SyndicationItem item, string version) { }
        protected internal static void WriteElementExtensions(System.Xml.XmlWriter writer, System.ServiceModel.Syndication.SyndicationLink link, string version) { }
        protected internal static void WriteElementExtensions(System.Xml.XmlWriter writer, System.ServiceModel.Syndication.SyndicationPerson person, string version) { }
        public abstract void WriteTo(System.Xml.XmlWriter writer);
    }
    [System.Runtime.CompilerServices.TypeForwardedFromAttribute("System.ServiceModel.Web, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
    public partial class SyndicationItem
    {
        public SyndicationItem() { }
        protected SyndicationItem(System.ServiceModel.Syndication.SyndicationItem source) { }
        public SyndicationItem(string title, System.ServiceModel.Syndication.SyndicationContent content, System.Uri itemAlternateLink, string id, System.DateTimeOffset lastUpdatedTime) { }
        public SyndicationItem(string title, string content, System.Uri itemAlternateLink) { }
        public SyndicationItem(string title, string content, System.Uri itemAlternateLink, string id, System.DateTimeOffset lastUpdatedTime) { }
        public System.Collections.Generic.Dictionary<System.Xml.XmlQualifiedName, string> AttributeExtensions { get { throw null; } }
        public System.Collections.ObjectModel.Collection<System.ServiceModel.Syndication.SyndicationPerson> Authors { get { throw null; } }
        public System.Uri BaseUri { get { throw null; } set { } }
        public System.Collections.ObjectModel.Collection<System.ServiceModel.Syndication.SyndicationCategory> Categories { get { throw null; } }
        public System.ServiceModel.Syndication.SyndicationContent Content { get { throw null; } set { } }
        public System.Collections.ObjectModel.Collection<System.ServiceModel.Syndication.SyndicationPerson> Contributors { get { throw null; } }
        public System.ServiceModel.Syndication.TextSyndicationContent Copyright { get { throw null; } set { } }
        public System.ServiceModel.Syndication.SyndicationElementExtensionCollection ElementExtensions { get { throw null; } }
        public string Id { get { throw null; } set { } }
        public System.DateTimeOffset LastUpdatedTime { get { throw null; } set { } }
        public System.Collections.ObjectModel.Collection<System.ServiceModel.Syndication.SyndicationLink> Links { get { throw null; } }
        public System.DateTimeOffset PublishDate { get { throw null; } set { } }
        public System.ServiceModel.Syndication.SyndicationFeed SourceFeed { get { throw null; } set { } }
        public System.ServiceModel.Syndication.TextSyndicationContent Summary { get { throw null; } set { } }
        public System.ServiceModel.Syndication.TextSyndicationContent Title { get { throw null; } set { } }
        public void AddPermalink(System.Uri permalink) { }
        public virtual System.ServiceModel.Syndication.SyndicationItem Clone() { throw null; }
        protected internal virtual System.ServiceModel.Syndication.SyndicationCategory CreateCategory() { throw null; }
        protected internal virtual System.ServiceModel.Syndication.SyndicationLink CreateLink() { throw null; }
        protected internal virtual System.ServiceModel.Syndication.SyndicationPerson CreatePerson() { throw null; }
        public System.ServiceModel.Syndication.Atom10ItemFormatter GetAtom10Formatter() { throw null; }
        public System.ServiceModel.Syndication.Rss20ItemFormatter GetRss20Formatter() { throw null; }
        public System.ServiceModel.Syndication.Rss20ItemFormatter GetRss20Formatter(bool serializeExtensionsAsAtom) { throw null; }
        public static System.ServiceModel.Syndication.SyndicationItem Load(System.Xml.XmlReader reader) { throw null; }
        public static TSyndicationItem Load<TSyndicationItem>(System.Xml.XmlReader reader) where TSyndicationItem : System.ServiceModel.Syndication.SyndicationItem, new() { throw null; }
        public void SaveAsAtom10(System.Xml.XmlWriter writer) { }
        public void SaveAsRss20(System.Xml.XmlWriter writer) { }
        protected internal virtual bool TryParseAttribute(string name, string ns, string value, string version) { throw null; }
        protected internal virtual bool TryParseContent(System.Xml.XmlReader reader, string contentType, string version, out System.ServiceModel.Syndication.SyndicationContent content) { throw null; }
        protected internal virtual bool TryParseElement(System.Xml.XmlReader reader, string version) { throw null; }
        protected internal virtual void WriteAttributeExtensions(System.Xml.XmlWriter writer, string version) { }
        protected internal virtual void WriteElementExtensions(System.Xml.XmlWriter writer, string version) { }
    }
    [System.Runtime.CompilerServices.TypeForwardedFromAttribute("System.ServiceModel.Web, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
    [System.Runtime.Serialization.DataContractAttribute]
    public abstract partial class SyndicationItemFormatter
    {
        protected SyndicationItemFormatter() { }
        protected SyndicationItemFormatter(System.ServiceModel.Syndication.SyndicationItem itemToWrite) { }
        public System.ServiceModel.Syndication.SyndicationItem Item { get { throw null; } }
        public abstract string Version { get; }
        public abstract bool CanRead(System.Xml.XmlReader reader);
        protected static System.ServiceModel.Syndication.SyndicationCategory CreateCategory(System.ServiceModel.Syndication.SyndicationItem item) { throw null; }
        protected abstract System.ServiceModel.Syndication.SyndicationItem CreateItemInstance();
        protected static System.ServiceModel.Syndication.SyndicationLink CreateLink(System.ServiceModel.Syndication.SyndicationItem item) { throw null; }
        protected static System.ServiceModel.Syndication.SyndicationPerson CreatePerson(System.ServiceModel.Syndication.SyndicationItem item) { throw null; }
        protected static void LoadElementExtensions(System.Xml.XmlReader reader, System.ServiceModel.Syndication.SyndicationCategory category, int maxExtensionSize) { }
        protected static void LoadElementExtensions(System.Xml.XmlReader reader, System.ServiceModel.Syndication.SyndicationItem item, int maxExtensionSize) { }
        protected static void LoadElementExtensions(System.Xml.XmlReader reader, System.ServiceModel.Syndication.SyndicationLink link, int maxExtensionSize) { }
        protected static void LoadElementExtensions(System.Xml.XmlReader reader, System.ServiceModel.Syndication.SyndicationPerson person, int maxExtensionSize) { }
        public abstract void ReadFrom(System.Xml.XmlReader reader);
        protected internal virtual void SetItem(System.ServiceModel.Syndication.SyndicationItem item) { }
        public override string ToString() { throw null; }
        protected static bool TryParseAttribute(string name, string ns, string value, System.ServiceModel.Syndication.SyndicationCategory category, string version) { throw null; }
        protected static bool TryParseAttribute(string name, string ns, string value, System.ServiceModel.Syndication.SyndicationItem item, string version) { throw null; }
        protected static bool TryParseAttribute(string name, string ns, string value, System.ServiceModel.Syndication.SyndicationLink link, string version) { throw null; }
        protected static bool TryParseAttribute(string name, string ns, string value, System.ServiceModel.Syndication.SyndicationPerson person, string version) { throw null; }
        protected static bool TryParseContent(System.Xml.XmlReader reader, System.ServiceModel.Syndication.SyndicationItem item, string contentType, string version, out System.ServiceModel.Syndication.SyndicationContent content) { throw null; }
        protected static bool TryParseElement(System.Xml.XmlReader reader, System.ServiceModel.Syndication.SyndicationCategory category, string version) { throw null; }
        protected static bool TryParseElement(System.Xml.XmlReader reader, System.ServiceModel.Syndication.SyndicationItem item, string version) { throw null; }
        protected static bool TryParseElement(System.Xml.XmlReader reader, System.ServiceModel.Syndication.SyndicationLink link, string version) { throw null; }
        protected static bool TryParseElement(System.Xml.XmlReader reader, System.ServiceModel.Syndication.SyndicationPerson person, string version) { throw null; }
        protected static void WriteAttributeExtensions(System.Xml.XmlWriter writer, System.ServiceModel.Syndication.SyndicationCategory category, string version) { }
        protected static void WriteAttributeExtensions(System.Xml.XmlWriter writer, System.ServiceModel.Syndication.SyndicationItem item, string version) { }
        protected static void WriteAttributeExtensions(System.Xml.XmlWriter writer, System.ServiceModel.Syndication.SyndicationLink link, string version) { }
        protected static void WriteAttributeExtensions(System.Xml.XmlWriter writer, System.ServiceModel.Syndication.SyndicationPerson person, string version) { }
        protected void WriteElementExtensions(System.Xml.XmlWriter writer, System.ServiceModel.Syndication.SyndicationCategory category, string version) { }
        protected static void WriteElementExtensions(System.Xml.XmlWriter writer, System.ServiceModel.Syndication.SyndicationItem item, string version) { }
        protected void WriteElementExtensions(System.Xml.XmlWriter writer, System.ServiceModel.Syndication.SyndicationLink link, string version) { }
        protected void WriteElementExtensions(System.Xml.XmlWriter writer, System.ServiceModel.Syndication.SyndicationPerson person, string version) { }
        public abstract void WriteTo(System.Xml.XmlWriter writer);
    }
    [System.Runtime.CompilerServices.TypeForwardedFromAttribute("System.ServiceModel.Web, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
    public partial class SyndicationLink
    {
        public SyndicationLink() { }
        protected SyndicationLink(System.ServiceModel.Syndication.SyndicationLink source) { }
        public SyndicationLink(System.Uri uri) { }
        public SyndicationLink(System.Uri uri, string relationshipType, string title, string mediaType, long length) { }
        public System.Collections.Generic.Dictionary<System.Xml.XmlQualifiedName, string> AttributeExtensions { get { throw null; } }
        public System.Uri BaseUri { get { throw null; } set { } }
        public System.ServiceModel.Syndication.SyndicationElementExtensionCollection ElementExtensions { get { throw null; } }
        public long Length { get { throw null; } set { } }
        public string MediaType { get { throw null; } set { } }
        public string RelationshipType { get { throw null; } set { } }
        public string Title { get { throw null; } set { } }
        public System.Uri Uri { get { throw null; } set { } }
        public virtual System.ServiceModel.Syndication.SyndicationLink Clone() { throw null; }
        public static System.ServiceModel.Syndication.SyndicationLink CreateAlternateLink(System.Uri uri) { throw null; }
        public static System.ServiceModel.Syndication.SyndicationLink CreateAlternateLink(System.Uri uri, string mediaType) { throw null; }
        public static System.ServiceModel.Syndication.SyndicationLink CreateMediaEnclosureLink(System.Uri uri, string mediaType, long length) { throw null; }
        public static System.ServiceModel.Syndication.SyndicationLink CreateSelfLink(System.Uri uri) { throw null; }
        public static System.ServiceModel.Syndication.SyndicationLink CreateSelfLink(System.Uri uri, string mediaType) { throw null; }
        public System.Uri GetAbsoluteUri() { throw null; }
        protected internal virtual bool TryParseAttribute(string name, string ns, string value, string version) { throw null; }
        protected internal virtual bool TryParseElement(System.Xml.XmlReader reader, string version) { throw null; }
        protected internal virtual void WriteAttributeExtensions(System.Xml.XmlWriter writer, string version) { }
        protected internal virtual void WriteElementExtensions(System.Xml.XmlWriter writer, string version) { }
    }
    [System.Runtime.CompilerServices.TypeForwardedFromAttribute("System.ServiceModel.Web, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
    public partial class SyndicationPerson
    {
        public SyndicationPerson() { }
        protected SyndicationPerson(System.ServiceModel.Syndication.SyndicationPerson source) { }
        public SyndicationPerson(string email) { }
        public SyndicationPerson(string email, string name, string uri) { }
        public System.Collections.Generic.Dictionary<System.Xml.XmlQualifiedName, string> AttributeExtensions { get { throw null; } }
        public System.ServiceModel.Syndication.SyndicationElementExtensionCollection ElementExtensions { get { throw null; } }
        public string Email { get { throw null; } set { } }
        public string Name { get { throw null; } set { } }
        public string Uri { get { throw null; } set { } }
        public virtual System.ServiceModel.Syndication.SyndicationPerson Clone() { throw null; }
        protected internal virtual bool TryParseAttribute(string name, string ns, string value, string version) { throw null; }
        protected internal virtual bool TryParseElement(System.Xml.XmlReader reader, string version) { throw null; }
        protected internal virtual void WriteAttributeExtensions(System.Xml.XmlWriter writer, string version) { }
        protected internal virtual void WriteElementExtensions(System.Xml.XmlWriter writer, string version) { }
    }
    [System.Runtime.CompilerServices.TypeForwardedFromAttribute("System.ServiceModel.Web, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
    public static partial class SyndicationVersions
    {
        public const string Atom10 = "Atom10";
        public const string Rss20 = "Rss20";
    }
    [System.Runtime.CompilerServices.TypeForwardedFromAttribute("System.ServiceModel.Web, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
    public partial class TextSyndicationContent : System.ServiceModel.Syndication.SyndicationContent
    {
        protected TextSyndicationContent(System.ServiceModel.Syndication.TextSyndicationContent source) { }
        public TextSyndicationContent(string text) { }
        public TextSyndicationContent(string text, System.ServiceModel.Syndication.TextSyndicationContentKind textKind) { }
        public string Text { get { throw null; } }
        public override string Type { get { throw null; } }
        public override System.ServiceModel.Syndication.SyndicationContent Clone() { throw null; }
        protected override void WriteContentsTo(System.Xml.XmlWriter writer) { }
    }
    [System.Runtime.CompilerServices.TypeForwardedFromAttribute("System.ServiceModel.Web, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
    public enum TextSyndicationContentKind
    {
        Html = 1,
        Plaintext = 0,
        XHtml = 2,
    }
    [System.Runtime.CompilerServices.TypeForwardedFromAttribute("System.ServiceModel.Web, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
    public partial class UrlSyndicationContent : System.ServiceModel.Syndication.SyndicationContent
    {
        protected UrlSyndicationContent(System.ServiceModel.Syndication.UrlSyndicationContent source) { }
        public UrlSyndicationContent(System.Uri url, string mediaType) { }
        public override string Type { get { throw null; } }
        public System.Uri Url { get { throw null; } }
        public override System.ServiceModel.Syndication.SyndicationContent Clone() { throw null; }
        protected override void WriteContentsTo(System.Xml.XmlWriter writer) { }
    }
    [System.Runtime.CompilerServices.TypeForwardedFromAttribute("System.ServiceModel.Web, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
    public partial class Workspace
    {
        public Workspace() { }
        public Workspace(System.ServiceModel.Syndication.TextSyndicationContent title, System.Collections.Generic.IEnumerable<System.ServiceModel.Syndication.ResourceCollectionInfo> collections) { }
        public Workspace(string title, System.Collections.Generic.IEnumerable<System.ServiceModel.Syndication.ResourceCollectionInfo> collections) { }
        public System.Collections.Generic.Dictionary<System.Xml.XmlQualifiedName, string> AttributeExtensions { get { throw null; } }
        public System.Uri BaseUri { get { throw null; } set { } }
        public System.Collections.ObjectModel.Collection<System.ServiceModel.Syndication.ResourceCollectionInfo> Collections { get { throw null; } }
        public System.ServiceModel.Syndication.SyndicationElementExtensionCollection ElementExtensions { get { throw null; } }
        public System.ServiceModel.Syndication.TextSyndicationContent Title { get { throw null; } set { } }
        protected internal virtual System.ServiceModel.Syndication.ResourceCollectionInfo CreateResourceCollection() { throw null; }
        protected internal virtual bool TryParseAttribute(string name, string ns, string value, string version) { throw null; }
        protected internal virtual bool TryParseElement(System.Xml.XmlReader reader, string version) { throw null; }
        protected internal virtual void WriteAttributeExtensions(System.Xml.XmlWriter writer, string version) { }
        protected internal virtual void WriteElementExtensions(System.Xml.XmlWriter writer, string version) { }
    }
    [System.Runtime.CompilerServices.TypeForwardedFromAttribute("System.ServiceModel.Web, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
    public partial class XmlSyndicationContent : System.ServiceModel.Syndication.SyndicationContent
    {
        protected XmlSyndicationContent(System.ServiceModel.Syndication.XmlSyndicationContent source) { }
        public XmlSyndicationContent(string type, object dataContractExtension, System.Runtime.Serialization.XmlObjectSerializer dataContractSerializer) { }
        public XmlSyndicationContent(string type, object xmlSerializerExtension, System.Xml.Serialization.XmlSerializer serializer) { }
        public XmlSyndicationContent(string type, System.ServiceModel.Syndication.SyndicationElementExtension extension) { }
        public XmlSyndicationContent(System.Xml.XmlReader reader) { }
        public System.ServiceModel.Syndication.SyndicationElementExtension Extension { get { throw null; } }
        public override string Type { get { throw null; } }
        public override System.ServiceModel.Syndication.SyndicationContent Clone() { throw null; }
        public System.Xml.XmlDictionaryReader GetReaderAtContent() { throw null; }
        public TContent ReadContent<TContent>() { throw null; }
        public TContent ReadContent<TContent>(System.Runtime.Serialization.XmlObjectSerializer dataContractSerializer) { throw null; }
        public TContent ReadContent<TContent>(System.Xml.Serialization.XmlSerializer serializer) { throw null; }
        protected override void WriteContentsTo(System.Xml.XmlWriter writer) { }
    }
}
namespace System.ServiceModel.XamlIntegration
{
    [System.Windows.Markup.ContentPropertyAttribute("Namespaces")]
    public partial class XPathMessageContextMarkupExtension : System.Windows.Markup.MarkupExtension
    {
        public XPathMessageContextMarkupExtension() { }
        public XPathMessageContextMarkupExtension(System.ServiceModel.Dispatcher.XPathMessageContext context) { }
        public System.Collections.Generic.Dictionary<string, string> Namespaces { get { throw null; } }
        public override object ProvideValue(System.IServiceProvider serviceProvider) { throw null; }
    }
    public partial class XPathMessageContextTypeConverter : System.ComponentModel.TypeConverter
    {
        public XPathMessageContextTypeConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { throw null; }
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { throw null; }
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { throw null; }
    }
}
