test001,"Returns a value (6)"
test002,"For loop with variable x incrementing ++x to 6"
test003,"While loop with incrementing ++x values up to 6"
test004,"If/else statement including += and == operators"
test005,"Nested for loop using ++x"
test006,"Nested while loop using ++x"
test007,"Switch statement based on matching ‘x’ and returning 6"
test008,"Struct statement based on returning a member 6"
test009,"Array example incrementing from 0 - 10, returning the 6th member of array"
test010,"Nested switch statement, returning ‘x’ then ‘6’"
test011,"Addition using variables, x(6) = i(2) + t(4)"
test012,"Subtraction using variables, x(6) = i(8) - t(2)"
test013,"Multiplication using variables, x(6) = i(3) * t(2)"
test014,"Division using variables, x(6) = i(30) / t(5)"
test015,"Modulus using variables, x(6) = i(26) % t(20)"
test016,"Unary plus (+a) operator, increase data size of char from 2 to 4"
test017,"Unary minus (-a) operator, convert 10 to -10 and check all three variables"
test018,"Increment (++a) operator, ++5 returns 6"
test019,"Decrement (--a) operator, --7 returns 6"
test020,"Greater Than (>) Relational Logic Operator, if x>y, return x (6)"
test021,"Greater Than or Equal (>=) Relational Logic Operator, if x>y, return x (6)"
test022,"Less Than (<) Relational Logic Operator, if x<y, return x (6)"
test023,"Less Than or Equal (<=) Logic Operator, if x<=y, return x (6)"
test024,"Equal (==) Relational Logic Operator, if x==y, return x (6)"
test025,"Not Equal (!=) Relational Logic Operator, if x!=y, return x (6)"
test026,"And (&&) Relational Logic Operator, if x==y && x==z, return x (6)"
test027,"OR (||) Relational Logic Operator, if x==y || x!=z, return x (6)"
test028,"NOT (~a) Bitwise Operator, b=~(-7)a, return (6)"
test029,"AND (a&b) Bitwise Operator, c(6)=a(6)&b(15), return (6) "
test030,"OR (a|b) Bitwise Operator, c(6)=a(2)|b(4), return (6)"
test031,"XOR (a^b) Bitwise Operator, c(6)=a(9)^b(15), return (6)"
test032,"Binary Shift Left (a<<b) Bitwise Operator, b(6)=a(3)<<1, return (6)"
test033,"Binary Shift Right (a>>b) Bitwise Operator, b(6)=a(13)>>1, return (6)"
test034,"Compound Addition (a+=b) Assignment Operator, a(3)+=b(3), return a(6)"
test035,"Compound Subtraction (a+=b) Assignment Operator, a(9)-=b(3), return a(6)"
test036,"Compound Multiplication (a*=) Assignment Operator, a(2)*=b(3), return a(6)"
test037,"Compound Division (a/=b) Assignment Operator, a(30)/=b(5), return a(6)"
test038,"Compound Modulus (a%=b) Assignment Operator, a(20)%=b(14), return a(6)"
test039,"AND (a&=b) Compound Assignment Bitwise Operator, a(6)&=b(15), return a(6)"
test040,"OR (a|=b) Compound Assignment Bitwise Operator, a(2)|=b(4), return a(6)"
test041,"XOR (a^=b) Compound Assignment Bitwise Operator, a(9)^=b(15), return a(6)"
test042,"Binary Shift Left (a<<=b) Compound Assignment B. Operator, a(3)<<=1, return a(6)"
test043,"Binary Shift Right (a>>=) Compound Assignment B. Operator, a(13)>>=1, return a(6)"
test044,"Declaring ‘char’, char a(’A’), ia=a, ia-59, return ia(6)"
test045,"Declaring ‘signed char’, signed char a(’A’), ia=a, ia-59, return ia(6)"
test046,"Declaring ‘unsigned char’, unsigned char a(’A’), ia=a, ia-59, return ia(6)"
test047,"Declaring ‘int’, int a(6), return a(6)"
test048,"Declaring ‘short int’, short int a(6), ia=a, ia=(int)a, return ia(6)"
test049,"Declaring ‘long int’, long int a(6), ia=a, ia=(int)a, return ia(6)"
test050,"Declaring ‘signed int’, signed int a(6), ia=a, ia=(int)a, return ia(6)"
test051,"Declaring ‘unsigned int’, unsigned int a(6), ia=a, ia=(int)a, return ia(6)"
test052,"Declaring ‘float’, float a(6.0), ia=a, ia=(int)a, return ia(6)"
test053,"Declaring ‘double’, double a(6.0), ia=a, ia=(int)a, return ia(6)"
test054,"Declaring ‘long double’, long double a(6.0), ia=a, ia=(int)a, return ia(6)"
test055,"Declaring ‘short’, short a(6), ia=a, ia=(int)a, return ia(6)"
test056,"Declaring ‘signed short’, signed short a(6), ia=a, ia=(int)a, return ia(6)"
test057,"Declaring ‘unsigned short’, unsigned short a(6), ia=a, ia=(int)a, return ia(6)"
test058,"Declaring ‘signed short int’, signed short int a(6), ia=a, ia=(int)a, return ia(6)"
test059,"Declaring ‘unsigned short int’, unsigned short int a(6), ia=a, ia=(int)a, return ia(6)"
test060,"Declaring ‘long’, long a(6), ia=a, ia=(int)a, return ia(6)"
test061,"Declaring ‘signed long’, signed long a(6), ia=a, ia=(int)a, return ia(6)"
test062,"Declaring ‘unsigned long’, unsigned long a(6), ia=a, ia=(int)a, return ia(6)"
test063,"Declaring ‘signed long int’, signed long int a(6), ia=a, ia=(int)a, return ia(6)"
test064,"Declaring ‘unsigned long int’, unsigned long int a(6), ia=a, ia=(int)a, return ia(6)"
test065,"Declaring ‘long long’, signed long a(6), ia=a, ia=(int)a, return ia(6)"
test066,"Declaring ‘long long int’, long long int a(6), ia=a, ia=(int)a, return ia(6)"
test067,"Declaring ‘signed long long’, signed long long a(6), ia=a, ia=(int)a, return ia(6)"
test068,"Declaring ‘unsigned long long’, unsigned long long a(6), ia=a, ia=(int)a, return ia(6)"
test069,"Declaring ‘signed long long int’, signed long long int a(6), ia=a, ia=(int)a, return ia(6)"
test070,"Declaring ‘unsigned long long int’, unsigned long long int a(6), ia=a, ia=(int)a, return ia(6)"
test071,"Executes an if statement, returns x(6)"
test072,"Executes an else/if statement, else option returns 6"
test073,"Executes a do/while statement, while x==0, return 6"
test074,"Executes a break/continue statement, x++, if x<15 continue, if x==10 break, return 6"
test075,"Executes a Goto-Label statement, goto label (skips an infinite loop), return 6"
test076,"Declares and returns the value of an integer pointer, return 6"
test077,Declares a char pointer and compares the value to return 6
test078,"Assigned a NULL pointer and checks to make sure it returns 0, return 6"
test079,"Declares a double pointer and confirms its value located at address x, return 6"
test080,"Declares a float pointer and confirms its value located at address x, return 6"
test081,"Properly uses an address-of value (&) variable and returns the value-at address (*), return 6"
test082,Tests a pointer to a structure (->) and returns 6
test083,"Declares an array and uses a pointer to return 6 (cannot announce arrays: a[2]={1,6};)"
test084,"Increments a pointer via int, Subtracts two memory addresses and adds 2 to return 6"
test085,"Decrements a pointer via int, Subtracts two memory addresses and adds 2 to return 6"
test086,"Increments a pointer via char, Subrtracts two memory addresses and adds 2 to return 6"
test087,"Decrements a pointer via char, Subtracts two memory addresses and adds 2 to return 6"
test088,Tests a Multi-Dimensional Array Uses a pointer to access address [1][1] and returns 6
test089,"Tests an executed data-packing structure, returns 6"
test090,"Tests an executed union and checks if the data size is correct, returns 6"
test091,Tests an executed union and returns a member (6)
test092,"Tests to see if the CBE can pass a structure into a function, returns 6"
test093,"Tests if the CBE will execute a nested structure properly, returns 6"
test094,"Tests if the CBE will execute a structure using typedef properly, returns 6"
test095,"Tests if the CBE will execute an array of structures, returns 6"
test096,"Tests if the CBE will execute a self-referencing structure, returns 6"
test097,"Tests if the CBE can handle a simple addition function, returns 6"
test098,"Tests if the CBE can handle static variables, returns 6"
test099,"Tests if the CBE can handle register variables, returns 6"
test100,"Tests if the CBE can handle a recursive function, returns 6"
test101,"Tests if the CBE can handle a fibonacci numbers example, returns 6"
test102,"Tests if the CBE will execute a function pointer, returns 6"
test103,"Tests if the CBE will execute Macro Substitution, returns 6"
test104,"Tests if the CBE will execute a tail recursion example, returns 6"
test105,"Tests if the CBE will execute a head recursion example, returns 6"
