<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AntiForgeryToken_AdditionalDataCheckFailed" xml:space="preserve">
    <value>The provided anti-forgery token failed a custom data check.</value>
  </data>
  <data name="AntiForgeryToken_ClaimUidMismatch" xml:space="preserve">
    <value>The provided anti-forgery token was meant for a different claims-based user than the current user.</value>
  </data>
  <data name="AntiForgeryToken_CookieMissing" xml:space="preserve">
    <value>The required anti-forgery cookie "{0}" is not present.</value>
  </data>
  <data name="AntiForgeryToken_DeserializationFailed" xml:space="preserve">
    <value>The anti-forgery token could not be decrypted. If this application is hosted by a Web Farm or cluster, ensure that all machines are running the same version of ASP.NET Web Pages and that the &lt;machineKey&gt; configuration specifies explicit encryption and validation keys. AutoGenerate cannot be used in a cluster.</value>
  </data>
  <data name="AntiForgeryToken_FormFieldMissing" xml:space="preserve">
    <value>The required anti-forgery form field "{0}" is not present.</value>
  </data>
  <data name="AntiForgeryToken_SecurityTokenMismatch" xml:space="preserve">
    <value>The anti-forgery cookie token and form field token do not match.</value>
  </data>
  <data name="AntiForgeryToken_TokensSwapped" xml:space="preserve">
    <value>Validation of the provided anti-forgery token failed. The cookie "{0}" and the form field "{1}" were swapped.</value>
  </data>
  <data name="AntiForgeryToken_UsernameMismatch" xml:space="preserve">
    <value>The provided anti-forgery token was meant for user "{0}", but the current user is "{1}".</value>
  </data>
  <data name="AntiForgeryWorker_RequireSSL" xml:space="preserve">
    <value>The anti-forgery system has the configuration value AntiForgeryConfig.RequireSsl = true, but the current request is not an SSL request.</value>
  </data>
  <data name="ApplicationPart_ModuleAlreadyRegistered" xml:space="preserve">
    <value>The assembly "{0}" is already registered.</value>
  </data>
  <data name="ApplicationPart_ModuleAlreadyRegisteredForVirtualPath" xml:space="preserve">
    <value>An application module is already registered for virtual path "{0}".</value>
  </data>
  <data name="ApplicationPart_ModuleCannotBeFound" xml:space="preserve">
    <value>Unable to find an application module with the name "{0}".</value>
  </data>
  <data name="ApplicationPart_ModuleNotRegistered" xml:space="preserve">
    <value>The assembly "{0}" is not a registered application module.</value>
  </data>
  <data name="ApplicationPart_ResourceNotFound" xml:space="preserve">
    <value>The resource file "{0}" could not be found.</value>
  </data>
  <data name="ClaimUidExtractor_ClaimNotPresent" xml:space="preserve">
    <value>A claim of type '{0}' was not present on the provided ClaimsIdentity.</value>
  </data>
  <data name="ClaimUidExtractor_DefaultClaimsNotPresent" xml:space="preserve">
    <value>A claim of type 'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier' or 'http://schemas.microsoft.com/accesscontrolservice/2010/07/claims/identityprovider' was not present on the provided ClaimsIdentity. To enable anti-forgery token support with claims-based authentication, please verify that the configured claims provider is providing both of these claims on the ClaimsIdentity instances it generates. If the configured claims provider instead uses a different claim type as a unique identifier, it can be configured by setting the static property AntiForgeryConfig.UniqueClaimTypeIdentifier.</value>
  </data>
  <data name="DynamicDictionary_InvalidNumberOfIndexes" xml:space="preserve">
    <value>Index length must be exactly one.</value>
  </data>
  <data name="DynamicHttpApplicationState_UseOnlyStringOrIntToGet" xml:space="preserve">
    <value>Index must be of type string or int when getting a value.</value>
  </data>
  <data name="DynamicHttpApplicationState_UseOnlyStringToSet" xml:space="preserve">
    <value>Index must be of type string when setting a value.</value>
  </data>
  <data name="HtmlHelper_ConversionThrew" xml:space="preserve">
    <value>The parameter conversion from type "{0}" to type "{1}" failed. See the inner exception for more information.</value>
  </data>
  <data name="HtmlHelper_NoConverterExists" xml:space="preserve">
    <value>The parameter conversion from type "{0}" to type "{1}" failed because no type converter can convert between these types.</value>
  </data>
  <data name="HttpContextUnavailable" xml:space="preserve">
    <value>An HttpContext is required to perform this operation. Check that this operation is being performed during a web request.</value>
  </data>
  <data name="SessionState_InvalidValue" xml:space="preserve">
    <value>Value "{0}" specified in "{1}" is an invalid value for the SessionState directive. Possible values are: "{2}".</value>
  </data>
  <data name="SessionState_TooManyValues" xml:space="preserve">
    <value>At most one SessionState value can be declared per page.</value>
  </data>
  <data name="StateStorage_RequestScopeNotAvailable" xml:space="preserve">
    <value>RequestScope cannot be created when _AppStart is executing.</value>
  </data>
  <data name="StateStorage_ScopeIsReadOnly" xml:space="preserve">
    <value>Storage scope is read only.</value>
  </data>
  <data name="StateStorage_StorageScopesCannotBeCreated" xml:space="preserve">
    <value>Storage scopes cannot be created when _AppStart is executing.</value>
  </data>
  <data name="TokenValidator_AuthenticatedUserWithoutUsername" xml:space="preserve">
    <value>The provided identity of type '{0}' is marked IsAuthenticated = true but does not have a value for Name. By default, the anti-forgery system requires that all authenticated identities have a unique Name. If it is not possible to provide a unique Name for this identity, consider setting the static property AntiForgeryConfig.AdditionalDataProvider to an instance of a type that can provide some form of unique identifier for the current user.</value>
  </data>
  <data name="UnobtrusiveJavascript_ValidationParameterCannotBeEmpty" xml:space="preserve">
    <value>Validation parameter names in unobtrusive client validation rules cannot be empty. Client rule type: {0}</value>
  </data>
  <data name="UnobtrusiveJavascript_ValidationParameterMustBeLegal" xml:space="preserve">
    <value>Validation parameter names in unobtrusive client validation rules must start with a lowercase letter and consist of only lowercase letters or digits. Validation parameter name: {0}, client rule type: {1}</value>
  </data>
  <data name="UnobtrusiveJavascript_ValidationTypeCannotBeEmpty" xml:space="preserve">
    <value>Validation type names in unobtrusive client validation rules cannot be empty. Client rule type: {0}</value>
  </data>
  <data name="UnobtrusiveJavascript_ValidationTypeMustBeLegal" xml:space="preserve">
    <value>Validation type names in unobtrusive client validation rules must consist of only lowercase letters. Invalid name: "{0}", client rule type: {1}</value>
  </data>
  <data name="UnobtrusiveJavascript_ValidationTypeMustBeUnique" xml:space="preserve">
    <value>Validation type names in unobtrusive client validation rules must be unique. The following validation type was seen more than once: {0}</value>
  </data>
  <data name="UrlData_ReadOnly" xml:space="preserve">
    <value>The UrlData collection is read-only.</value>
  </data>
  <data name="ValidationDefault_DataType" xml:space="preserve">
    <value>Input format is invalid.</value>
  </data>
  <data name="ValidationDefault_EqualsTo" xml:space="preserve">
    <value>Values do not match.</value>
  </data>
  <data name="ValidationDefault_FloatRange" xml:space="preserve">
    <value>Value must be a decimal between {0} and {1}.</value>
  </data>
  <data name="ValidationDefault_IntegerRange" xml:space="preserve">
    <value>Value must be an integer between {0} and {1}.</value>
  </data>
  <data name="ValidationDefault_Regex" xml:space="preserve">
    <value>Value is invalid.</value>
  </data>
  <data name="ValidationDefault_Required" xml:space="preserve">
    <value>This field is required.</value>
  </data>
  <data name="ValidationDefault_StringLength" xml:space="preserve">
    <value>Max length: {0}.</value>
  </data>
  <data name="ValidationDefault_StringLengthRange" xml:space="preserve">
    <value>String must be between {0} and {1} characters.</value>
  </data>
  <data name="WebPageRoute_UnderscoreBlocked" xml:space="preserve">
    <value>Files with leading underscores ("_") cannot be served.</value>
  </data>
  <data name="WebPage_CannotRequestDirectly" xml:space="preserve">
    <value>The file "{0}" cannot be requested directly because it calls the "{1}" method.</value>
  </data>
  <data name="WebPage_FileNotSupported" xml:space="preserve">
    <value>The following file could not be rendered because its extension "{0}" might not be supported: "{1}".</value>
  </data>
  <data name="WebPage_InvalidPageType" xml:space="preserve">
    <value>The file "{0}" could not be rendered, because it does not exist or is not a valid page.</value>
  </data>
  <data name="WebPage_LayoutPageNotFound" xml:space="preserve">
    <value>The layout page "{0}" could not be found at the following path: "{1}".</value>
  </data>
  <data name="WebPage_RenderBodyAlreadyCalled" xml:space="preserve">
    <value>The "RenderBody" method has already been called.</value>
  </data>
  <data name="WebPage_RenderBodyNotCalled" xml:space="preserve">
    <value>The "RenderBody" method has not been called for layout page "{0}".</value>
  </data>
  <data name="WebPage_SectionAleadyDefined" xml:space="preserve">
    <value>Section already defined: "{0}".</value>
  </data>
  <data name="WebPage_SectionAleadyRendered" xml:space="preserve">
    <value>The "RenderSection" method has already been called for the section named "{0}".</value>
  </data>
  <data name="WebPage_SectionNotDefined" xml:space="preserve">
    <value>Section not defined: "{0}".</value>
  </data>
  <data name="WebPage_SectionsNotRendered" xml:space="preserve">
    <value>The following sections have been defined but have not been rendered for the layout page "{0}": "{1}".</value>
  </data>
</root>